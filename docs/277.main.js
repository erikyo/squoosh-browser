"use strict";(self.webpackChunksquoosh_browser_demo=self.webpackChunksquoosh_browser_demo||[]).push([[277],{277:(e,n,t)=>{t.r(n),t.d(n,{default:()=>m,initThreadPool:()=>p,optimise:()=>f,wbg_rayon_PoolBuilder:()=>y,wbg_rayon_start_worker:()=>g});var r=t(723);let o,i=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0});i.decode();let s=null;function a(){return null!==s&&s.buffer===o.__wbindgen_export_0.buffer||(s=new Uint8Array(o.__wbindgen_export_0.buffer)),s}const _=new Array(32).fill(void 0);_.push(void 0,null,!0,!1);let u=_.length;function b(e){u===_.length&&_.push(_.length+1);const n=u;return u=_[n],_[n]=e,n}let c=0,l=null;function w(){return null!==l&&l.buffer===o.__wbindgen_export_0.buffer||(l=new Int32Array(o.__wbindgen_export_0.buffer)),l}function f(e,n,t){try{const f=o.__wbindgen_add_to_stack_pointer(-16);var r=function(e,n){const t=n(1*e.length);return a().set(e,t/1),c=e.length,t}(e,o.__wbindgen_malloc),i=c;o.optimise(f,r,i,n,t);var s=w()[f/4+0],_=w()[f/4+1],u=(b=s,l=_,a().subarray(b/1,b/1+l)).slice();return o.__wbindgen_free(s,1*_),u}finally{o.__wbindgen_add_to_stack_pointer(16)}var b,l}function d(e){const n=function(e){return _[e]}(e);return function(e){e<36||(_[e]=u,u=e)}(e),n}function p(e){return d(o.initThreadPool(e))}function g(e){o.wbg_rayon_start_worker(e)}class y{static __wrap(e){const n=Object.create(y.prototype);return n.ptr=e,n}__destroy_into_raw(){const e=this.ptr;return this.ptr=0,e}free(){const e=this.__destroy_into_raw();o.__wbg_wbg_rayon_poolbuilder_free(e)}numThreads(){return o.wbg_rayon_poolbuilder_numThreads(this.ptr)>>>0}receiver(){return o.wbg_rayon_poolbuilder_receiver(this.ptr)}build(){o.wbg_rayon_poolbuilder_build(this.ptr)}}const m=async function e(n,s){void 0===n&&(n=new URL(t(456),t.b));const _={wbg:{}};_.wbg.__wbindgen_throw=function(e,n){throw new Error((t=e,r=n,i.decode(a().slice(t,t+r))));var t,r},_.wbg.__wbindgen_module=function(){return b(e.__wbindgen_wasm_module)},_.wbg.__wbindgen_memory=function(){return b(o.__wbindgen_export_0)},_.wbg.__wbg_startWorkers_914655bb4d5bb5e1=function(e,n,t){return b((0,r.Q)(d(e),d(n),y.__wrap(t)))},("string"==typeof n||"function"==typeof Request&&n instanceof Request||"function"==typeof URL&&n instanceof URL)&&(n=fetch(n)),_.wbg.memory=s||new WebAssembly.Memory({initial:17,maximum:16384,shared:!0});const{instance:u,module:c}=await async function(e,n){if("function"==typeof Response&&e instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(e,n)}catch(n){if("application/wasm"==e.headers.get("Content-Type"))throw n;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",n)}const t=await e.arrayBuffer();return await WebAssembly.instantiate(t,n)}{const t=await WebAssembly.instantiate(e,n);return t instanceof WebAssembly.Instance?{instance:t,module:e}:t}}(await n,_);return o=u.exports,e.__wbindgen_wasm_module=c,o.__wbindgen_start(),o}},456:(e,n,t)=>{e.exports=t.p+"6ac3239376efce53600f.wasm"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,