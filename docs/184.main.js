"use strict";(self.webpackChunksquoosh_browser_demo=self.webpackChunksquoosh_browser_demo||[]).push([[184],{184:(e,r,t)=>{t.r(r),t.d(r,{default:()=>n});const n=("file:///D:/altri/squoosh-web/squoosh-browser/codecs/jxl/enc/jxl_enc_mt.js",function(e){function r(){return A.buffer!=E&&Q(A.buffer),C}function n(){return A.buffer!=E&&Q(A.buffer),W}function a(){return A.buffer!=E&&Q(A.buffer),S}function o(){return A.buffer!=E&&Q(A.buffer),P}function i(){return A.buffer!=E&&Q(A.buffer),F}function u(){return A.buffer!=E&&Q(A.buffer),D}function s(){return A.buffer!=E&&Q(A.buffer),I}var c,f;(e=void 0!==(e=e||{})?e:{}).ready=new Promise((function(e,r){c=e,f=r}));var l,d={};for(l in e)e.hasOwnProperty(l)&&(d[l]=e[l]);var h,p=[],m="./this.program",v=function(e,r){throw r},g=e.ENVIRONMENT_IS_PTHREAD||!1,_="";function y(r){return e.locateFile?e.locateFile(r,_):_+r}_=self.location.href,_=0!==(_="file:///D:/altri/squoosh-web/squoosh-browser/codecs/jxl/enc/jxl_enc_mt.js").indexOf("blob:")?_.substr(0,_.lastIndexOf("/")+1):"",h=function(e){var r=new XMLHttpRequest;return r.open("GET",e,!1),r.responseType="arraybuffer",r.send(null),new Uint8Array(r.response)};var w,b=e.print||console.log.bind(console),T=e.printErr||console.warn.bind(console);for(l in d)d.hasOwnProperty(l)&&(e[l]=d[l]);d=null,e.arguments&&(p=e.arguments),e.thisProgram&&(m=e.thisProgram),e.quit&&(v=e.quit),Atomics.load,Atomics.store,Atomics.compareExchange,e.wasmBinary&&(w=e.wasmBinary);var A,k,x=e.noExitRuntime||!0;"object"!=typeof WebAssembly&&oe("no native wasm support detected");var E,C,W,S,P,F,D,M,I,j=!1;function O(e,r){e||oe("Assertion failed: "+r)}function H(e,r,t){for(var n=r+t,a="";!(r>=n);){var o=e[r++];if(!o)return a;if(128&o){var i=63&e[r++];if(192!=(224&o)){var u=63&e[r++];if((o=224==(240&o)?(15&o)<<12|i<<6|u:(7&o)<<18|i<<12|u<<6|63&e[r++])<65536)a+=String.fromCharCode(o);else{var s=o-65536;a+=String.fromCharCode(55296|s>>10,56320|1023&s)}}else a+=String.fromCharCode((31&o)<<6|i)}else a+=String.fromCharCode(o)}return a}function R(e,r){return e?H(n(),e,r):""}function L(e,r,t,n){if(!(n>0))return 0;for(var a=t,o=t+n-1,i=0;i<e.length;++i){var u=e.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&e.charCodeAt(++i)),u<=127){if(t>=o)break;r[t++]=u}else if(u<=2047){if(t+1>=o)break;r[t++]=192|u>>6,r[t++]=128|63&u}else if(u<=65535){if(t+2>=o)break;r[t++]=224|u>>12,r[t++]=128|u>>6&63,r[t++]=128|63&u}else{if(t+3>=o)break;r[t++]=240|u>>18,r[t++]=128|u>>12&63,r[t++]=128|u>>6&63,r[t++]=128|63&u}}return r[t]=0,t-a}function B(e,r,t){return L(e,n(),r,t)}function U(e){for(var r=0,t=0;t<e.length;++t){var n=e.charCodeAt(t);n>=55296&&n<=57343&&(n=65536+((1023&n)<<10)|1023&e.charCodeAt(++t)),n<=127?++r:r+=n<=2047?2:n<=65535?3:4}return r}function G(e,r){for(var t="",n=0;!(n>=r/2);++n){var o=a()[e+2*n>>1];if(0==o)break;t+=String.fromCharCode(o)}return t}function N(e,r,t){if(void 0===t&&(t=2147483647),t<2)return 0;for(var n=r,o=(t-=2)<2*e.length?t/2:e.length,i=0;i<o;++i){var u=e.charCodeAt(i);a()[r>>1]=u,r+=2}return a()[r>>1]=0,r-n}function V(e){return 2*e.length}function q(e,r){for(var t=0,n="";!(t>=r/4);){var a=i()[e+4*t>>2];if(0==a)break;if(++t,a>=65536){var o=a-65536;n+=String.fromCharCode(55296|o>>10,56320|1023&o)}else n+=String.fromCharCode(a)}return n}function Y(e,r,t){if(void 0===t&&(t=2147483647),t<4)return 0;for(var n=r,a=n+t-4,o=0;o<e.length;++o){var u=e.charCodeAt(o);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&e.charCodeAt(++o)),i()[r>>2]=u,(r+=4)+4>a)break}return i()[r>>2]=0,r-n}function z(e){for(var r=0,t=0;t<e.length;++t){var n=e.charCodeAt(t);n>=55296&&n<=57343&&++t,r+=4}return r}function Q(r){E=r,e.HEAP8=C=new Int8Array(r),e.HEAP16=S=new Int16Array(r),e.HEAP32=F=new Int32Array(r),e.HEAPU8=W=new Uint8Array(r),e.HEAPU16=P=new Uint16Array(r),e.HEAPU32=D=new Uint32Array(r),e.HEAPF32=M=new Float32Array(r),e.HEAPF64=I=new Float64Array(r)}g&&(E=e.buffer);var J,X=e.INITIAL_MEMORY||16777216;if(g)A=e.wasmMemory,E=e.buffer;else if(e.wasmMemory)A=e.wasmMemory;else if(!((A=new WebAssembly.Memory({initial:X/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw T("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");A&&(E=A.buffer),X=E.byteLength,Q(E);var Z=[],$=[],K=[],ee=[];function re(){g||fe($)}var te=0,ne=null,ae=null;function oe(r){e.onAbort&&e.onAbort(r),g&&console.error("Pthread aborting at "+(new Error).stack),T(r+=""),j=!0,r="abort("+r+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(r);throw f(t),t}function ie(e){return e.startsWith("data:application/octet-stream;base64,")}if(e.preloadedImages={},e.preloadedAudios={},e.locateFile)ie(ue="jxl_enc_mt.wasm")||(ue=y(ue));else var ue=new URL(t(883),t.b).toString();function se(e){try{if(e==ue&&w)return new Uint8Array(w);if(h)return h(e);throw"both async and sync fetching of the wasm failed"}catch(e){oe(e)}}var ce={61452:function(){throw"Canceled!"},61470:function(e,r){setTimeout((function(){Dr(e,r)}),0)}};function fe(r){for(;r.length>0;){var t=r.shift();if("function"!=typeof t){var n=t.func;"number"==typeof n?void 0===t.arg?J.get(n)():J.get(n)(t.arg):n(void 0===t.arg?null:t.arg)}else t(e)}}function le(e,t){if(e<=0||e>r().length||!0&e||t<0)return-28;if(0==t)return 0;t>=2147483647&&(t=1/0);var n=Atomics.load(i(),zr>>2),a=0;if(n==e&&Atomics.compareExchange(i(),zr>>2,n,0)==n&&(a=1,--t<=0))return 1;var o=Atomics.notify(i(),e>>2,t);if(o>=0)return o+a;throw"Atomics.notify returned an unexpected value "+o}function de(e){if(g)throw"Internal Error! cleanupThread() can only ever be called from main application thread!";if(!e)throw"Internal Error! Null pthread_ptr in cleanupThread!";var r=pe.pthreads[e];if(r){i()[e+12>>2]=0;var t=r.worker;pe.returnWorkerToPool(t)}}e._emscripten_futex_wake=le;var he,pe={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],initMainThreadBlock:function(){for(var e=navigator.hardwareConcurrency,r=0;r<e;++r)pe.allocateUnusedWorker()},initRuntime:function(){for(var e=Cr(228),r=0;r<57;++r)u()[e/4+r]=0;i()[e+12>>2]=e;var t=e+152;i()[t>>2]=t;var n=Cr(512);for(r=0;r<128;++r)u()[n/4+r]=0;Atomics.store(u(),e+100>>2,n),Atomics.store(u(),e+40>>2,e),Hr(e,!1,1),Pr(e)},initWorker:function(){},pthreads:{},threadExitHandlers:[],runExitHandlers:function(){for(;pe.threadExitHandlers.length>0;)pe.threadExitHandlers.pop()();g&&Br()&&Lr()},runExitHandlersAndDeinitThread:function(e,r){Atomics.store(u(),e+56>>2,1),Atomics.store(u(),e+60>>2,0),pe.runExitHandlers(),Atomics.store(u(),e+4>>2,r),Atomics.store(u(),e+0>>2,1),le(e+0,2147483647),Hr(0,0,0)},setExitStatus:function(e){},threadExit:function(e){var r=Br();r&&(pe.runExitHandlersAndDeinitThread(r,e),g&&postMessage({cmd:"exit"}))},threadCancel:function(){pe.runExitHandlersAndDeinitThread(Br(),-1),postMessage({cmd:"cancelDone"})},terminateAllThreads:function(){for(var e in pe.pthreads)(n=pe.pthreads[e])&&n.worker&&pe.returnWorkerToPool(n.worker);pe.pthreads={};for(var r=0;r<pe.unusedWorkers.length;++r)(t=pe.unusedWorkers[r]).terminate();for(pe.unusedWorkers=[],r=0;r<pe.runningWorkers.length;++r){var t,n=(t=pe.runningWorkers[r]).pthread;pe.freeThreadData(n),t.terminate()}pe.runningWorkers=[]},freeThreadData:function(e){if(e){if(e.threadInfoStruct){var r=i()[e.threadInfoStruct+100>>2];i()[e.threadInfoStruct+100>>2]=0,Wr(r),Wr(e.threadInfoStruct)}e.threadInfoStruct=0,e.allocatedOwnStack&&e.stackBase&&Wr(e.stackBase),e.stackBase=0,e.worker&&(e.worker.pthread=null)}},returnWorkerToPool:function(e){pe.runWithoutMainThreadQueuedCalls((function(){delete pe.pthreads[e.pthread.threadInfoStruct],pe.unusedWorkers.push(e),pe.runningWorkers.splice(pe.runningWorkers.indexOf(e),1),pe.freeThreadData(e.pthread),e.pthread=void 0}))},runWithoutMainThreadQueuedCalls:function(e){i()[Yr>>2]=0;try{e()}finally{i()[Yr>>2]=1}},receiveObjectTransfer:function(e){},threadInit:function(){for(var e in pe.tlsInitFunctions)pe.tlsInitFunctions[e]()},loadWasmModuleToWorker:function(r,t){r.onmessage=function(n){var a=n.data,o=a.cmd;if(r.pthread&&(pe.currentProxiedOperationCallerThread=r.pthread.threadInfoStruct),a.targetThread&&a.targetThread!=Br()){var s=pe.pthreads[a.targetThread];return s?s.worker.postMessage(n.data,a.transferList):console.error('Internal error! Worker sent a message "'+o+'" to target pthread '+a.targetThread+", but that thread no longer exists!"),void(pe.currentProxiedOperationCallerThread=void 0)}if("processQueuedMainThreadWork"===o)Ir();else if("spawnThread"===o)vr(n.data);else if("cleanupThread"===o)de(a.thread);else if("killThread"===o)!function(e){if(g)throw"Internal Error! killThread() can only ever be called from main application thread!";if(!e)throw"Internal Error! Null pthread_ptr in killThread!";i()[e+12>>2]=0;var r=pe.pthreads[e];r.worker.terminate(),pe.freeThreadData(r),pe.runningWorkers.splice(pe.runningWorkers.indexOf(r.worker),1),r.worker.pthread=void 0}(a.thread);else if("cancelThread"===o)!function(e){if(g)throw"Internal Error! cancelThread() can only ever be called from main application thread!";if(!e)throw"Internal Error! Null pthread_ptr in cancelThread!";pe.pthreads[e].worker.postMessage({cmd:"cancel"})}(a.thread);else if("loaded"===o)r.loaded=!0,t&&t(r),r.runPthread&&(r.runPthread(),delete r.runPthread);else if("print"===o)b("Thread "+a.threadId+": "+a.text);else if("printErr"===o)T("Thread "+a.threadId+": "+a.text);else if("alert"===o)alert("Thread "+a.threadId+": "+a.text);else if("exit"===o)r.pthread&&Atomics.load(u(),r.pthread.threadInfoStruct+64>>2)&&pe.returnWorkerToPool(r);else if("exitProcess"===o)try{!function(r,t){if(g)throw postMessage({cmd:"exitProcess",returnCode:r}),new Qr(r);me()||(pe.terminateAllThreads(),e.onExit&&e.onExit(r),j=!0),v(r,new Qr(r))}(a.returnCode)}catch(n){if(n instanceof Qr)return;throw n}else"cancelDone"===o?pe.returnWorkerToPool(r):"objectTransfer"===o?pe.receiveObjectTransfer(n.data):"setimmediate"===n.data.target?r.postMessage(n.data):T("worker sent an unknown command "+o);pe.currentProxiedOperationCallerThread=void 0},r.onerror=function(e){T("pthread sent an error! "+e.filename+":"+e.lineno+": "+e.message)},r.postMessage({cmd:"load",urlOrBlob:e.mainScriptUrlOrBlob,wasmMemory:A,wasmModule:k})},allocateUnusedWorker:function(){if(e.locateFile){var r=y("jxl_enc_mt.worker.js");pe.unusedWorkers.push(new Worker(r))}else pe.unusedWorkers.push(new Worker(new URL(t.p+t.u(991),t.b)))},getNewWorker:function(){return 0==pe.unusedWorkers.length&&(pe.allocateUnusedWorker(),pe.loadWasmModuleToWorker(pe.unusedWorkers[0])),pe.unusedWorkers.pop()},busySpinWait:function(e){for(var r=performance.now()+e;performance.now()<r;);}};function me(){return x||!1}e.establishStackSpace=function(e,r){Vr(e,r),Gr(e)},e.invokeEntryPoint=function(e,r){return J.get(e)(r)},e.keepRuntimeAlive=me,he=g?function(){return performance.now()-e.__performance_now_clock_drift}:function(){return performance.now()};function ve(e){this.excPtr=e,this.ptr=e-16,this.set_type=function(e){i()[this.ptr+8>>2]=e},this.get_type=function(){return i()[this.ptr+8>>2]},this.set_destructor=function(e){i()[this.ptr+0>>2]=e},this.get_destructor=function(){return i()[this.ptr+0>>2]},this.set_refcount=function(e){i()[this.ptr+4>>2]=e},this.set_caught=function(e){e=e?1:0,r()[this.ptr+12>>0]=e},this.get_caught=function(){return 0!=r()[this.ptr+12>>0]},this.set_rethrown=function(e){e=e?1:0,r()[this.ptr+13>>0]=e},this.get_rethrown=function(){return 0!=r()[this.ptr+13>>0]},this.init=function(e,r){this.set_type(e),this.set_destructor(r),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){Atomics.add(i(),this.ptr+4>>2,1)},this.release_ref=function(){return 1===Atomics.sub(i(),this.ptr+4>>2,1)}}var ge={};function _e(e){for(;e.length;){var r=e.pop();e.pop()(r)}}function ye(e){return this.fromWireType(u()[e>>2])}var we={},be={},Te={};function Ae(e){if(void 0===e)return"_unknown";var r=(e=e.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return r>=48&&r<=57?"_"+e:e}function ke(e,r){return e=Ae(e),new Function("body","return function "+e+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(r)}function xe(e,r){var t=ke(r,(function(e){this.name=r,this.message=e;var t=new Error(e).stack;void 0!==t&&(this.stack=this.toString()+"\n"+t.replace(/^Error(:[^\n]*)?\n/,""))}));return t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},t}var Ee=void 0;function Ce(e){throw new Ee(e)}function We(e,r,t){function n(r){var n=t(r);n.length!==e.length&&Ce("Mismatched type converter count");for(var a=0;a<e.length;++a)Ie(e[a],n[a])}e.forEach((function(e){Te[e]=r}));var a=new Array(r.length),o=[],i=0;r.forEach((function(e,r){be.hasOwnProperty(e)?a[r]=be[e]:(o.push(e),we.hasOwnProperty(e)||(we[e]=[]),we[e].push((function(){a[r]=be[e],++i===o.length&&n(a)})))})),0===o.length&&n(a)}function Se(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+e)}}var Pe=void 0;function Fe(e){for(var r="",t=e;n()[t];)r+=Pe[n()[t++]];return r}var De=void 0;function Me(e){throw new De(e)}function Ie(e,r,t){if(t=t||{},!("argPackAdvance"in r))throw new TypeError("registerType registeredInstance requires argPackAdvance");var n=r.name;if(e||Me('type "'+n+'" must have a positive integer typeid pointer'),be.hasOwnProperty(e)){if(t.ignoreDuplicateRegistrations)return;Me("Cannot register type '"+n+"' twice")}if(be[e]=r,delete Te[e],we.hasOwnProperty(e)){var a=we[e];delete we[e],a.forEach((function(e){e()}))}}var je=[],Oe=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function He(e){e>4&&0==--Oe[e].refcount&&(Oe[e]=void 0,je.push(e))}function Re(e){switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var r=je.length?je.pop():Oe.length;return Oe[r]={refcount:1,value:e},r}}function Le(e){if(null===e)return"null";var r=typeof e;return"object"===r||"array"===r||"function"===r?e.toString():""+e}function Be(e,r){switch(r){case 2:return function(e){return this.fromWireType((A.buffer!=E&&Q(A.buffer),M)[e>>2])};case 3:return function(e){return this.fromWireType(s()[e>>3])};default:throw new TypeError("Unknown float type: "+e)}}function Ue(r,t,n){return r.includes("j")?function(r,t,n){var a=e["dynCall_"+r];return n&&n.length?a.apply(null,[t].concat(n)):a.call(null,t)}(r,t,n):J.get(t).apply(null,n)}function Ge(e,r){var t,n,a,o=(e=Fe(e)).includes("j")?(t=e,n=r,a=[],function(){a.length=arguments.length;for(var e=0;e<arguments.length;e++)a[e]=arguments[e];return Ue(t,n,a)}):J.get(r);return"function"!=typeof o&&Me("unknown function pointer with signature "+e+": "+r),o}var Ne=void 0;function Ve(e){var r=Sr(e),t=Fe(r);return Wr(r),t}function qe(e,t,s){switch(t){case 0:return s?function(e){return r()[e]}:function(e){return n()[e]};case 1:return s?function(e){return a()[e>>1]}:function(e){return o()[e>>1]};case 2:return s?function(e){return i()[e>>2]}:function(e){return u()[e>>2]};default:throw new TypeError("Unknown integer type: "+e)}}var Ye={};function ze(){return"object"==typeof globalThis?globalThis:Function("return this")()}function Qe(e,r){var t=be[e];return void 0===t&&Me(r+" has unknown type "+Ve(e)),t}var Je={},Xe=[];function Ze(e,t,n){if(e<=0||e>r().length||!0&e)return-28;var a=Atomics.wait(i(),e>>2,t,n);if("timed-out"===a)return-73;if("not-equal"===a)return-6;if("ok"===a)return 0;throw"Atomics.wait returned an unexpected value "+a}function $e(e,r){for(var t=arguments.length-2,n=Ur(),a=t,o=Nr(8*a),i=o>>3,u=0;u<t;u++){var c=arguments[2+u];s()[i+u]=c}var f=jr(e,a,o,r);return Gr(n),f}var Ke=[];function er(e){try{return A.grow(e-E.byteLength+65535>>>16),Q(A.buffer),1}catch(e){}}var rr={inEventHandler:0,removeAllEventListeners:function(){for(var e=rr.eventHandlers.length-1;e>=0;--e)rr._removeHandler(e);rr.eventHandlers=[],rr.deferredCalls=[]},registerRemoveEventListeners:function(){rr.removeEventListenersRegistered||(K.push(rr.removeAllEventListeners),rr.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(e,r,t){function n(e,r){if(e.length!=r.length)return!1;for(var t in e)if(e[t]!=r[t])return!1;return!0}for(var a in rr.deferredCalls){var o=rr.deferredCalls[a];if(o.targetFunction==e&&n(o.argsList,t))return}rr.deferredCalls.push({targetFunction:e,precedence:r,argsList:t}),rr.deferredCalls.sort((function(e,r){return e.precedence<r.precedence}))},removeDeferredCalls:function(e){for(var r=0;r<rr.deferredCalls.length;++r)rr.deferredCalls[r].targetFunction==e&&(rr.deferredCalls.splice(r,1),--r)},canPerformEventHandlerRequests:function(){return rr.inEventHandler&&rr.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(rr.canPerformEventHandlerRequests())for(var e=0;e<rr.deferredCalls.length;++e){var r=rr.deferredCalls[e];rr.deferredCalls.splice(e,1),--e,r.targetFunction.apply(null,r.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:function(e,r){for(var t=0;t<rr.eventHandlers.length;++t)rr.eventHandlers[t].target!=e||r&&r!=rr.eventHandlers[t].eventTypeString||rr._removeHandler(t--)},_removeHandler:function(e){var r=rr.eventHandlers[e];r.target.removeEventListener(r.eventTypeString,r.eventListenerFunc,r.useCapture),rr.eventHandlers.splice(e,1)},registerOrRemoveHandler:function(e){var r=function(r){++rr.inEventHandler,rr.currentEventHandler=e,rr.runDeferredCalls(),e.handlerFunc(r),rr.runDeferredCalls(),--rr.inEventHandler};if(e.callbackfunc)e.eventListenerFunc=r,e.target.addEventListener(e.eventTypeString,r,e.useCapture),rr.eventHandlers.push(e),rr.registerRemoveEventListeners();else for(var t=0;t<rr.eventHandlers.length;++t)rr.eventHandlers[t].target==e.target&&rr.eventHandlers[t].eventTypeString==e.eventTypeString&&rr._removeHandler(t--)},queueEventHandlerOnThread_iiii:function(e,r,t,n,a){var o=Ur(),u=Nr(12);i()[u>>2]=t,i()[u+4>>2]=n,i()[u+8>>2]=a,Or(0,e,637534208,r,n,u),Gr(o)},getTargetThreadForEventCallback:function(e){switch(e){case 1:return 0;case 2:return pe.currentProxiedOperationCallerThread;default:return e}},getNodeNameForTarget:function(e){return e?e==window?"#window":e==screen?"#screen":e&&e.nodeName?e.nodeName:"":""},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}};var tr=[0,"undefined"!=typeof document?document:0,"undefined"!=typeof window?window:0];function nr(e){return function(e){var r;return e=(r=e)>2?R(r):r,tr[e]||("undefined"!=typeof document?document.querySelector(e):void 0)}(e)}function ar(e,r,t){var n=nr(e);if(!n)return-4;if(n.canvasSharedPtr&&(i()[n.canvasSharedPtr>>2]=r,i()[n.canvasSharedPtr+4>>2]=t),!n.offscreenCanvas&&n.controlTransferredOffscreen)return n.canvasSharedPtr?(function(e,r,t,n){!function(e,r,t,n){var a,o,u,s=Ur(),c=Nr(12),f=0;r&&(o=U(a=r)+1,B(a,u=Cr(o),o),f=u),i()[c>>2]=f,i()[c+4>>2]=t,i()[c+8>>2]=n,Or(0,e,657457152,0,f,c),Gr(s)}(e,r=r?R(r):"",t,n)}(i()[n.canvasSharedPtr+8>>2],e,r,t),1):-4;n.offscreenCanvas&&(n=n.offscreenCanvas);var a=!1;if(n.GLctxObject&&n.GLctxObject.GLctx){var o=n.GLctxObject.GLctx.getParameter(2978);a=0===o[0]&&0===o[1]&&o[2]===n.width&&o[3]===n.height}return n.width=r,n.height=t,a&&n.GLctxObject.GLctx.viewport(0,0,r,t),0}function or(e,r,t){return g?$e(2,1,e,r,t):ar(e,r,t)}var ir={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:{},offscreenCanvases:{},queries:[],stringCache:{},unpackAlignment:4,recordError:function(e){ir.lastError||(ir.lastError=e)},getNewId:function(e){for(var r=ir.counter++,t=e.length;t<r;t++)e[t]=null;return r},getSource:function(e,r,t,n){for(var a="",o=0;o<r;++o){var u=n?i()[n+4*o>>2]:-1;a+=R(i()[t+4*o>>2],u<0?void 0:u)}return a},createContext:function(e,r){e.getContextSafariWebGL2Fixed||(e.getContextSafariWebGL2Fixed=e.getContext,e.getContext=function(r,t){var n=e.getContextSafariWebGL2Fixed(r,t);return"webgl"==r==n instanceof WebGLRenderingContext?n:null});var t=e.getContext("webgl",r);return t?ir.registerContext(t,r):0},registerContext:function(e,r){var t=Cr(8);i()[t+4>>2]=Br();var n={handle:t,attributes:r,version:r.majorVersion,GLctx:e};return e.canvas&&(e.canvas.GLctxObject=n),ir.contexts[t]=n,(void 0===r.enableExtensionsByDefault||r.enableExtensionsByDefault)&&ir.initExtensions(n),t},makeContextCurrent:function(r){return ir.currentContext=ir.contexts[r],e.ctx=wr=ir.currentContext&&ir.currentContext.GLctx,!(r&&!wr)},getContext:function(e){return ir.contexts[e]},deleteContext:function(e){ir.currentContext===ir.contexts[e]&&(ir.currentContext=null),"object"==typeof rr&&rr.removeAllHandlersOnTarget(ir.contexts[e].GLctx.canvas),ir.contexts[e]&&ir.contexts[e].GLctx.canvas&&(ir.contexts[e].GLctx.canvas.GLctxObject=void 0),Wr(ir.contexts[e].handle),ir.contexts[e]=null},initExtensions:function(e){if(e||(e=ir.currentContext),!e.initExtensionsDone){e.initExtensionsDone=!0;var r,t=e.GLctx;!function(e){var r=e.getExtension("ANGLE_instanced_arrays");r&&(e.vertexAttribDivisor=function(e,t){r.vertexAttribDivisorANGLE(e,t)},e.drawArraysInstanced=function(e,t,n,a){r.drawArraysInstancedANGLE(e,t,n,a)},e.drawElementsInstanced=function(e,t,n,a,o){r.drawElementsInstancedANGLE(e,t,n,a,o)})}(t),function(e){var r=e.getExtension("OES_vertex_array_object");r&&(e.createVertexArray=function(){return r.createVertexArrayOES()},e.deleteVertexArray=function(e){r.deleteVertexArrayOES(e)},e.bindVertexArray=function(e){r.bindVertexArrayOES(e)},e.isVertexArray=function(e){return r.isVertexArrayOES(e)})}(t),function(e){var r=e.getExtension("WEBGL_draw_buffers");r&&(e.drawBuffers=function(e,t){r.drawBuffersWEBGL(e,t)})}(t),t.disjointTimerQueryExt=t.getExtension("EXT_disjoint_timer_query"),(r=t).multiDrawWebgl=r.getExtension("WEBGL_multi_draw"),(t.getSupportedExtensions()||[]).forEach((function(e){e.includes("lose_context")||e.includes("debug")||t.getExtension(e)}))}}},ur=["default","low-power","high-performance"],sr={};function cr(){if(!cr.strings){var e={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:m||"./this.program"};for(var r in sr)e[r]=sr[r];var t=[];for(var r in e)t.push(r+"="+e[r]);cr.strings=t}return cr.strings}var fr={mappings:{},buffers:[null,[],[]],printChar:function(e,r){var t=fr.buffers[e];0===r||10===r?((1===e?b:T)(H(t,0)),t.length=0):t.push(r)},varargs:void 0,get:function(){return fr.varargs+=4,i()[fr.varargs-4>>2]},getStr:function(e){return R(e)},get64:function(e,r){return e}};function lr(e,t){if(g)return $e(3,1,e,t);var n=0;return cr().forEach((function(a,o){var u=t+n;i()[e+4*o>>2]=u,function(e,t,n){for(var a=0;a<e.length;++a)r()[t++>>0]=e.charCodeAt(a);r()[t>>0]=0}(a,u),n+=a.length+1})),0}function dr(e,r){if(g)return $e(4,1,e,r);var t=cr();i()[e>>2]=t.length;var n=0;return t.forEach((function(e){n+=e.length+1})),i()[r>>2]=n,0}function hr(e){return g?$e(5,1,e):0}function pr(e,r,t,n,a){if(g)return $e(6,1,e,r,t,n,a)}function mr(e,r,t,a){if(g)return $e(7,1,e,r,t,a);for(var o=0,u=0;u<t;u++){for(var s=i()[r+8*u>>2],c=i()[r+(8*u+4)>>2],f=0;f<c;f++)fr.printChar(e,n()[s+f]);o+=c}return i()[a>>2]=o,0}function vr(e){if(g)throw"Internal Error! spawnThread() can only ever be called from main application thread!";var r=pe.getNewWorker();if(!r)return 6;if(void 0!==r.pthread)throw"Internal error!";if(!e.pthread_ptr)throw"Internal error, no pthread ptr!";pe.runningWorkers.push(r);for(var t=Cr(512),n=0;n<128;++n)i()[t+4*n>>2]=0;var a=e.stackBase+e.stackSize,o=pe.pthreads[e.pthread_ptr]={worker:r,stackBase:e.stackBase,stackSize:e.stackSize,allocatedOwnStack:e.allocatedOwnStack,threadInfoStruct:e.pthread_ptr},s=o.threadInfoStruct>>2;Atomics.store(u(),s+16,e.detached),Atomics.store(u(),s+25,t),Atomics.store(u(),s+10,o.threadInfoStruct),Atomics.store(u(),s+20,e.stackSize),Atomics.store(u(),s+19,a),Atomics.store(u(),s+26,e.stackSize),Atomics.store(u(),s+28,a),Atomics.store(u(),s+29,e.detached);var c=Rr()+40;Atomics.store(u(),s+43,c),r.pthread=o;var f={cmd:"run",start_routine:e.startRoutine,arg:e.arg,threadInfoStruct:e.pthread_ptr,stackBase:e.stackBase,stackSize:e.stackSize};return r.runPthread=function(){f.time=performance.now(),r.postMessage(f,e.transferList)},r.loaded&&(r.runPthread(),delete r.runPthread),0}function gr(){if(g){var e=Br();if(e&&!Atomics.load(u(),e+56>>2)&&2==Atomics.load(u(),e+0>>2))throw"Canceled!"}}function _r(e){return e%4==0&&(e%100!=0||e%400==0)}function yr(e,r){for(var t=0,n=0;n<=r;t+=e[n++]);return t}var wr,br=[31,29,31,30,31,30,31,31,30,31,30,31],Tr=[31,28,31,30,31,30,31,31,30,31,30,31];function Ar(e,r){for(var t=new Date(e.getTime());r>0;){var n=_r(t.getFullYear()),a=t.getMonth(),o=(n?br:Tr)[a];if(!(r>o-t.getDate()))return t.setDate(t.getDate()+r),t;r-=o-t.getDate()+1,t.setDate(1),a<11?t.setMonth(a+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return t}g||pe.initMainThreadBlock(),Ee=e.InternalError=xe(Error,"InternalError"),function(){for(var e=new Array(256),r=0;r<256;++r)e[r]=String.fromCharCode(r);Pe=e}(),De=e.BindingError=xe(Error,"BindingError"),e.count_emval_handles=function(){for(var e=0,r=5;r<Oe.length;++r)void 0!==Oe[r]&&++e;return e},e.get_first_emval=function(){for(var e=5;e<Oe.length;++e)if(void 0!==Oe[e])return Oe[e];return null},Ne=e.UnboundTypeError=xe(Error,"UnboundTypeError");var kr,xr=[null,function(e,r){if(g)return $e(1,1,e,r)},or,lr,dr,hr,pr,mr],Er={e:function(e,r,t,n){oe("Assertion failed: "+R(e)+", at: "+[r?R(r):"unknown filename",t,n?R(n):"unknown function"])},M:function(e){return Cr(e+16)+16},q:function(e,r){return t=e,n=r,void pe.threadExitHandlers.push((function(){J.get(t)(n)}));var t,n},B:function(e,r,t){throw new ve(e).init(r,t),e},s:function(e){var r=ge[e];delete ge[e];var t=r.rawConstructor,n=r.rawDestructor,a=r.fields;We([e],a.map((function(e){return e.getterReturnType})).concat(a.map((function(e){return e.setterArgumentType}))),(function(e){var o={};return a.forEach((function(r,t){var n=r.fieldName,i=e[t],u=r.getter,s=r.getterContext,c=e[t+a.length],f=r.setter,l=r.setterContext;o[n]={read:function(e){return i.fromWireType(u(s,e))},write:function(e,r){var t=[];f(l,e,c.toWireType(t,r)),_e(t)}}})),[{name:r.name,fromWireType:function(e){var r={};for(var t in o)r[t]=o[t].read(e);return n(e),r},toWireType:function(e,r){for(var a in o)if(!(a in r))throw new TypeError('Missing field:  "'+a+'"');var i=t();for(a in o)o[a].write(i,r[a]);return null!==e&&e.push(n,i),i},argPackAdvance:8,readValueFromPointer:ye,destructorFunction:n}]}))},w:function(e,r,t,n,a){},Q:function(e,t,n,o,u){var s=Se(n);Ie(e,{name:t=Fe(t),fromWireType:function(e){return!!e},toWireType:function(e,r){return r?o:u},argPackAdvance:8,readValueFromPointer:function(e){var o;if(1===n)o=r();else if(2===n)o=a();else{if(4!==n)throw new TypeError("Unknown boolean type size: "+t);o=i()}return this.fromWireType(o[e>>s])},destructorFunction:null})},P:function(e,r){Ie(e,{name:r=Fe(r),fromWireType:function(e){var r=Oe[e].value;return He(e),r},toWireType:function(e,r){return Re(r)},argPackAdvance:8,readValueFromPointer:ye,destructorFunction:null})},o:function(e,r,t){var n=Se(t);Ie(e,{name:r=Fe(r),fromWireType:function(e){return e},toWireType:function(e,r){if("number"!=typeof r&&"boolean"!=typeof r)throw new TypeError('Cannot convert "'+Le(r)+'" to '+this.name);return r},argPackAdvance:8,readValueFromPointer:Be(r,n),destructorFunction:null})},r:function(r,t,n,a,o,u){var s=function(e,r){for(var t=[],n=0;n<e;n++)t.push(i()[(r>>2)+n]);return t}(t,n);r=Fe(r),o=Ge(a,o),function(r,t,n){e.hasOwnProperty(r)?((void 0===n||void 0!==e[r].overloadTable&&void 0!==e[r].overloadTable[n])&&Me("Cannot register public name '"+r+"' twice"),function(e,r,t){if(void 0===e[r].overloadTable){var n=e[r];e[r]=function(){return e[r].overloadTable.hasOwnProperty(arguments.length)||Me("Function '"+t+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+e[r].overloadTable+")!"),e[r].overloadTable[arguments.length].apply(this,arguments)},e[r].overloadTable=[],e[r].overloadTable[n.argCount]=n}}(e,r,r),e.hasOwnProperty(n)&&Me("Cannot register multiple overloads of a function with the same number of arguments ("+n+")!"),e[r].overloadTable[n]=t):(e[r]=t,void 0!==n&&(e[r].numArguments=n))}(r,(function(){!function(e,r){var t=[],n={};throw r.forEach((function e(r){n[r]||be[r]||(Te[r]?Te[r].forEach(e):(t.push(r),n[r]=!0))})),new Ne(e+": "+t.map(Ve).join([", "]))}("Cannot call "+r+" due to unbound types",s)}),t-1),We([],s,(function(n){var a=[n[0],null].concat(n.slice(1));return function(r,t,n){e.hasOwnProperty(r)||Ce("Replacing nonexistant public symbol"),void 0!==e[r].overloadTable&&void 0!==n?e[r].overloadTable[n]=t:(e[r]=t,e[r].argCount=n)}(r,function(e,r,t,n,a){var o=r.length;o<2&&Me("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==r[1]&&null!==t,u=!1,s=1;s<r.length;++s)if(null!==r[s]&&void 0===r[s].destructorFunction){u=!0;break}var c="void"!==r[0].name,f="",l="";for(s=0;s<o-2;++s)f+=(0!==s?", ":"")+"arg"+s,l+=(0!==s?", ":"")+"arg"+s+"Wired";var d="return function "+Ae(e)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+e+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var h=u?"destructors":"null",p=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],m=[Me,n,a,_e,r[0],r[1]];for(i&&(d+="var thisWired = classParam.toWireType("+h+", this);\n"),s=0;s<o-2;++s)d+="var arg"+s+"Wired = argType"+s+".toWireType("+h+", arg"+s+"); // "+r[s+2].name+"\n",p.push("argType"+s),m.push(r[s+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(c?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(s=i?1:2;s<r.length;++s){var v=1===s?"thisWired":"arg"+(s-2)+"Wired";null!==r[s].destructorFunction&&(d+=v+"_dtor("+v+"); // "+r[s].name+"\n",p.push(v+"_dtor"),m.push(r[s].destructorFunction))}return c&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",p.push(d),function(e,r){if(!(e instanceof Function))throw new TypeError("new_ called with constructor type "+typeof e+" which is not a function");var t=ke(e.name||"unknownFunctionName",(function(){}));t.prototype=e.prototype;var n=new t,a=e.apply(n,r);return a instanceof Object?a:n}(Function,p).apply(null,m)}(r,a,null,o,u),t-1),[]}))},d:function(e,r,t,n,a){r=Fe(r),-1===a&&(a=4294967295);var o=Se(t),i=function(e){return e};if(0===n){var u=32-8*t;i=function(e){return e<<u>>>u}}var s=r.includes("unsigned");Ie(e,{name:r,fromWireType:i,toWireType:function(e,t){if("number"!=typeof t&&"boolean"!=typeof t)throw new TypeError('Cannot convert "'+Le(t)+'" to '+this.name);if(t<n||t>a)throw new TypeError('Passing a number "'+Le(t)+'" from JS side to C/C++ side to an argument of type "'+r+'", which is outside the valid range ['+n+", "+a+"]!");return s?t>>>0:0|t},argPackAdvance:8,readValueFromPointer:qe(r,o,0!==n),destructorFunction:null})},c:function(e,r,t){var n=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][r];function a(e){e>>=2;var r=u(),t=r[e],a=r[e+1];return new n(E,a,t)}Ie(e,{name:t=Fe(t),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},p:function(e,r){var t="std::string"===(r=Fe(r));Ie(e,{name:r,fromWireType:function(e){var r,a=u()[e>>2];if(t)for(var o=e+4,i=0;i<=a;++i){var s=e+4+i;if(i==a||0==n()[s]){var c=R(o,s-o);void 0===r?r=c:(r+=String.fromCharCode(0),r+=c),o=s+1}}else{var f=new Array(a);for(i=0;i<a;++i)f[i]=String.fromCharCode(n()[e+4+i]);r=f.join("")}return Wr(e),r},toWireType:function(e,r){r instanceof ArrayBuffer&&(r=new Uint8Array(r));var a="string"==typeof r;a||r instanceof Uint8Array||r instanceof Uint8ClampedArray||r instanceof Int8Array||Me("Cannot pass non-string to std::string");var o=(t&&a?function(){return U(r)}:function(){return r.length})(),i=Cr(4+o+1);if(u()[i>>2]=o,t&&a)B(r,i+4,o+1);else if(a)for(var s=0;s<o;++s){var c=r.charCodeAt(s);c>255&&(Wr(i),Me("String has UTF-16 code units that do not fit in 8 bits")),n()[i+4+s]=c}else for(s=0;s<o;++s)n()[i+4+s]=r[s];return null!==e&&e.push(Wr,i),i},argPackAdvance:8,readValueFromPointer:ye,destructorFunction:function(e){Wr(e)}})},k:function(e,r,t){var n,a,i,s,c;t=Fe(t),2===r?(n=G,a=N,s=V,i=function(){return o()},c=1):4===r&&(n=q,a=Y,s=z,i=function(){return u()},c=2),Ie(e,{name:t,fromWireType:function(e){for(var t,a=u()[e>>2],o=i(),s=e+4,f=0;f<=a;++f){var l=e+4+f*r;if(f==a||0==o[l>>c]){var d=n(s,l-s);void 0===t?t=d:(t+=String.fromCharCode(0),t+=d),s=l+r}}return Wr(e),t},toWireType:function(e,n){"string"!=typeof n&&Me("Cannot pass non-string to C++ string type "+t);var o=s(n),i=Cr(4+o+r);return u()[i>>2]=o>>c,a(n,i+4,o+r),null!==e&&e.push(Wr,i),i},argPackAdvance:8,readValueFromPointer:ye,destructorFunction:function(e){Wr(e)}})},t:function(e,r,t,n,a,o){ge[e]={name:Fe(r),rawConstructor:Ge(t,n),rawDestructor:Ge(a,o),fields:[]}},f:function(e,r,t,n,a,o,i,u,s,c){ge[e].fields.push({fieldName:Fe(r),getterReturnType:t,getter:Ge(n,a),getterContext:o,setterArgumentType:i,setter:Ge(u,s),setterContext:c})},R:function(e,r){Ie(e,{isVoid:!0,name:r=Fe(r),argPackAdvance:0,fromWireType:function(){},toWireType:function(e,r){}})},L:function(e,r){if(e==r)postMessage({cmd:"processQueuedMainThreadWork"});else if(g)postMessage({targetThread:e,cmd:"processThreadQueue"});else{var t=pe.pthreads[e],n=t&&t.worker;if(!n)return;n.postMessage({cmd:"processThreadQueue"})}return 1},i:He,U:function(e){return 0===e?Re(ze()):(e=void 0===(t=Ye[r=e])?Fe(r):t,Re(ze()[e]));var r,t},T:function(e){e>4&&(Oe[e].refcount+=1)},u:function(r,t,n,a){r=function(e){return e||Me("Cannot use deleted val. handle = "+e),Oe[e].value}(r);var o=Je[t];return o||(o=function(r){for(var t="",n=0;n<r;++n)t+=(0!==n?", ":"")+"arg"+n;var a="return function emval_allocator_"+r+"(constructor, argTypes, args) {\n";for(n=0;n<r;++n)a+="var argType"+n+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+n+'], "parameter '+n+'");\nvar arg'+n+" = argType"+n+".readValueFromPointer(args);\nargs += argType"+n+"['argPackAdvance'];\n";return a+="var obj = new constructor("+t+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(Qe,e,Re)}(t),Je[t]=o),o(r,n,a)},b:function(){oe()},n:function(e,r,t){var a=function(e,r){var t;for(Xe.length=0,r>>=2;t=n()[e++];){var a=t<105;a&&1&r&&r++,Xe.push(a?s()[r++>>1]:i()[r]),++r}return Xe}(r,t);return ce[e].apply(null,a)},H:function(){},m:function(e,r){},h:Ze,g:le,j:he,z:function(e,r,t){n().copyWithin(e,r,r+t)},G:function(){return navigator.hardwareConcurrency},I:function(e,r,t){Ke.length=r;for(var n=t>>3,a=0;a<r;a++)Ke[a]=s()[n+a];return(e<0?ce[-e-1]:xr[e]).apply(null,Ke)},A:function(e){var r=n().length;if((e>>>=0)<=r)return!1;var t,a=2147483648;if(e>a)return!1;for(var o=1;o<=4;o*=2){var i=r*(1+.2/o);if(i=Math.min(i,e+100663296),er(Math.min(a,((t=Math.max(e,i))%65536>0&&(t+=65536-t%65536),t))))return!0}return!1},J:function(e,r,t){return nr(e)?ar(e,r,t):or(e,r,t)},l:function(e){},K:function(e,r){return t=e,n=r>>2,a=i()[n+6],o={alpha:!!i()[n+0],depth:!!i()[n+1],stencil:!!i()[n+2],antialias:!!i()[n+3],premultipliedAlpha:!!i()[n+4],preserveDrawingBuffer:!!i()[n+5],powerPreference:ur[a],failIfMajorPerformanceCaveat:!!i()[n+7],majorVersion:i()[n+8],minorVersion:i()[n+9],enableExtensionsByDefault:i()[n+10],explicitSwapControl:i()[n+11],proxyContextToMainThread:i()[n+12],renderViaOffscreenBackBuffer:i()[n+13]},(u=nr(t))?o.explicitSwapControl?0:ir.createContext(u,o):0;var t,n,a,o,u},D:lr,E:dr,O:hr,v:pr,N:mr,y:function(){pe.initRuntime()},a:A||e.wasmMemory,S:function(e,r,t,n){if("undefined"==typeof SharedArrayBuffer)return T("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;if(!e)return T("pthread_create called with a null thread pointer!"),28;var a=[];if(g&&0===a.length)return Mr(687865856,e,r,t,n);var o=0,s=0,c=0;r&&-1!=r?(o=i()[r>>2],o+=81920,s=i()[r+8>>2],c=0!==i()[r+12>>2]):o=2097152;var f=0==s;f?s=qr(16,o):O((s-=o)>0);for(var l=Cr(228),d=0;d<57;++d)u()[(l>>2)+d]=0;i()[e>>2]=l,i()[l+12>>2]=l;var h=l+152;i()[h>>2]=h;var p={stackBase:s,stackSize:o,allocatedOwnStack:f,detached:c,startRoutine:t,pthread_ptr:l,arg:n,transferList:a};return g?(p.cmd="spawnThread",postMessage(p,a),0):vr(p)},F:function(e,r){return function(e,r,t){if(!e)return T("pthread_join attempted on a null thread pointer!"),71;if(g&&Br()==e)return T("PThread "+e+" is attempting to join to itself!"),16;if(!g&&Fr()==e)return T("Main thread "+e+" is attempting to join to itself!"),16;if(i()[e+12>>2]!==e)return T("pthread_join attempted on thread "+e+", which does not point to a valid thread, or does not exist anymore!"),71;if(Atomics.load(u(),e+64>>2))return T("Attempted to join thread "+e+", which was already detached!"),28;for(;;){var n=Atomics.load(u(),e+0>>2);if(1==n){var a=Atomics.load(u(),e+4>>2);return r&&(i()[r>>2]=a),Atomics.store(u(),e+64>>2,1),g?postMessage({cmd:"cleanupThread",thread:e}):de(e),0}0,gr(),g||Ir(),Ze(e+0,n,g?100:1)}}(e,r)},x:function(e){},C:function(e,t,n,a){return function(e,t,n,a){var o=i()[a+40>>2],u={tm_sec:i()[a>>2],tm_min:i()[a+4>>2],tm_hour:i()[a+8>>2],tm_mday:i()[a+12>>2],tm_mon:i()[a+16>>2],tm_year:i()[a+20>>2],tm_wday:i()[a+24>>2],tm_yday:i()[a+28>>2],tm_isdst:i()[a+32>>2],tm_gmtoff:i()[a+36>>2],tm_zone:o?R(o):""},s=R(n),c={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var f in c)s=s.replace(new RegExp(f,"g"),c[f]);var l=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],d=["January","February","March","April","May","June","July","August","September","October","November","December"];function h(e,r,t){for(var n="number"==typeof e?e.toString():e||"";n.length<r;)n=t[0]+n;return n}function p(e,r){return h(e,r,"0")}function m(e,r){function t(e){return e<0?-1:e>0?1:0}var n;return 0===(n=t(e.getFullYear()-r.getFullYear()))&&0===(n=t(e.getMonth()-r.getMonth()))&&(n=t(e.getDate()-r.getDate())),n}function v(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function g(e){var r=Ar(new Date(e.tm_year+1900,0,1),e.tm_yday),t=new Date(r.getFullYear(),0,4),n=new Date(r.getFullYear()+1,0,4),a=v(t),o=v(n);return m(a,r)<=0?m(o,r)<=0?r.getFullYear()+1:r.getFullYear():r.getFullYear()-1}var _={"%a":function(e){return l[e.tm_wday].substring(0,3)},"%A":function(e){return l[e.tm_wday]},"%b":function(e){return d[e.tm_mon].substring(0,3)},"%B":function(e){return d[e.tm_mon]},"%C":function(e){return p((e.tm_year+1900)/100|0,2)},"%d":function(e){return p(e.tm_mday,2)},"%e":function(e){return h(e.tm_mday,2," ")},"%g":function(e){return g(e).toString().substring(2)},"%G":function(e){return g(e)},"%H":function(e){return p(e.tm_hour,2)},"%I":function(e){var r=e.tm_hour;return 0==r?r=12:r>12&&(r-=12),p(r,2)},"%j":function(e){return p(e.tm_mday+yr(_r(e.tm_year+1900)?br:Tr,e.tm_mon-1),3)},"%m":function(e){return p(e.tm_mon+1,2)},"%M":function(e){return p(e.tm_min,2)},"%n":function(){return"\n"},"%p":function(e){return e.tm_hour>=0&&e.tm_hour<12?"AM":"PM"},"%S":function(e){return p(e.tm_sec,2)},"%t":function(){return"\t"},"%u":function(e){return e.tm_wday||7},"%U":function(e){var r=new Date(e.tm_year+1900,0,1),t=0===r.getDay()?r:Ar(r,7-r.getDay()),n=new Date(e.tm_year+1900,e.tm_mon,e.tm_mday);if(m(t,n)<0){var a=yr(_r(n.getFullYear())?br:Tr,n.getMonth()-1)-31,o=31-t.getDate()+a+n.getDate();return p(Math.ceil(o/7),2)}return 0===m(t,r)?"01":"00"},"%V":function(e){var r,t=new Date(e.tm_year+1900,0,4),n=new Date(e.tm_year+1901,0,4),a=v(t),o=v(n),i=Ar(new Date(e.tm_year+1900,0,1),e.tm_yday);return m(i,a)<0?"53":m(o,i)<=0?"01":(r=a.getFullYear()<e.tm_year+1900?e.tm_yday+32-a.getDate():e.tm_yday+1-a.getDate(),p(Math.ceil(r/7),2))},"%w":function(e){return e.tm_wday},"%W":function(e){var r=new Date(e.tm_year,0,1),t=1===r.getDay()?r:Ar(r,0===r.getDay()?1:7-r.getDay()+1),n=new Date(e.tm_year+1900,e.tm_mon,e.tm_mday);if(m(t,n)<0){var a=yr(_r(n.getFullYear())?br:Tr,n.getMonth()-1)-31,o=31-t.getDate()+a+n.getDate();return p(Math.ceil(o/7),2)}return 0===m(t,r)?"01":"00"},"%y":function(e){return(e.tm_year+1900).toString().substring(2)},"%Y":function(e){return e.tm_year+1900},"%z":function(e){var r=e.tm_gmtoff,t=r>=0;return r=(r=Math.abs(r)/60)/60*100+r%60,(t?"+":"-")+String("0000"+r).slice(-4)},"%Z":function(e){return e.tm_zone},"%%":function(){return"%"}};for(var f in _)s.includes(f)&&(s=s.replace(new RegExp(f,"g"),_[f](u)));var y,w,b,T=(w=U(y=s)+1,L(y,b=new Array(w),0,b.length),b);return T.length>t?0:(function(e,t){r().set(e,t)}(T,e),T.length-1)}(e,t,n,a)}},Cr=(function(){var r={a:Er};function t(r,t){var n,a=r.exports;if(e.asm=a,J=e.asm.Z,n=e.asm.V,$.unshift(n),pe.tlsInitFunctions.push(e.asm.Y),k=t,!g){var o=pe.unusedWorkers.length;pe.unusedWorkers.forEach((function(r){pe.loadWasmModuleToWorker(r,(function(){--o||function(r){if(te--,e.monitorRunDependencies&&e.monitorRunDependencies(te),0==te&&(null!==ne&&(clearInterval(ne),ne=null),ae)){var t=ae;ae=null,t()}}()}))}))}}function n(e){t(e.instance,e.module)}function a(e){return(w||"function"!=typeof fetch?Promise.resolve().then((function(){return se(ue)})):fetch(ue,{credentials:"same-origin"}).then((function(e){if(!e.ok)throw"failed to load wasm binary file at '"+ue+"'";return e.arrayBuffer()})).catch((function(){return se(ue)}))).then((function(e){return WebAssembly.instantiate(e,r)})).then(e,(function(e){T("failed to asynchronously prepare wasm: "+e),oe(e)}))}if(g||(O(!g,"addRunDependency cannot be used in a pthread worker"),te++,e.monitorRunDependencies&&e.monitorRunDependencies(te)),e.instantiateWasm)try{return e.instantiateWasm(r,t)}catch(e){return T("Module.instantiateWasm callback failed with error: "+e),!1}(w||"function"!=typeof WebAssembly.instantiateStreaming||ie(ue)||"function"!=typeof fetch?a(n):fetch(ue,{credentials:"same-origin"}).then((function(e){return WebAssembly.instantiateStreaming(e,r).then(n,(function(e){return T("wasm streaming compile failed: "+e),T("falling back to ArrayBuffer instantiation"),a(n)}))}))).catch(f)}(),e.___wasm_call_ctors=function(){return(e.___wasm_call_ctors=e.asm.V).apply(null,arguments)},e._malloc=function(){return(Cr=e._malloc=e.asm.W).apply(null,arguments)}),Wr=e._free=function(){return(Wr=e._free=e.asm.X).apply(null,arguments)},Sr=(e._emscripten_tls_init=function(){return(e._emscripten_tls_init=e.asm.Y).apply(null,arguments)},e.___getTypeName=function(){return(Sr=e.___getTypeName=e.asm._).apply(null,arguments)}),Pr=(e.___embind_register_native_and_builtin_types=function(){return(e.___embind_register_native_and_builtin_types=e.asm.$).apply(null,arguments)},e._emscripten_current_thread_process_queued_calls=function(){return(e._emscripten_current_thread_process_queued_calls=e.asm.aa).apply(null,arguments)},e._emscripten_register_main_browser_thread_id=function(){return(Pr=e._emscripten_register_main_browser_thread_id=e.asm.ba).apply(null,arguments)}),Fr=e._emscripten_main_browser_thread_id=function(){return(Fr=e._emscripten_main_browser_thread_id=e.asm.ca).apply(null,arguments)},Dr=e.__emscripten_do_dispatch_to_thread=function(){return(Dr=e.__emscripten_do_dispatch_to_thread=e.asm.da).apply(null,arguments)},Mr=e._emscripten_sync_run_in_main_thread_4=function(){return(Mr=e._emscripten_sync_run_in_main_thread_4=e.asm.ea).apply(null,arguments)},Ir=e._emscripten_main_thread_process_queued_calls=function(){return(Ir=e._emscripten_main_thread_process_queued_calls=e.asm.fa).apply(null,arguments)},jr=e._emscripten_run_in_main_runtime_thread_js=function(){return(jr=e._emscripten_run_in_main_runtime_thread_js=e.asm.ga).apply(null,arguments)},Or=e.__emscripten_call_on_thread=function(){return(Or=e.__emscripten_call_on_thread=e.asm.ha).apply(null,arguments)},Hr=e.__emscripten_thread_init=function(){return(Hr=e.__emscripten_thread_init=e.asm.ia).apply(null,arguments)},Rr=e._emscripten_get_global_libc=function(){return(Rr=e._emscripten_get_global_libc=e.asm.ja).apply(null,arguments)},Lr=e.___pthread_tsd_run_dtors=function(){return(Lr=e.___pthread_tsd_run_dtors=e.asm.ka).apply(null,arguments)},Br=e._pthread_self=function(){return(Br=e._pthread_self=e.asm.la).apply(null,arguments)},Ur=e.stackSave=function(){return(Ur=e.stackSave=e.asm.ma).apply(null,arguments)},Gr=e.stackRestore=function(){return(Gr=e.stackRestore=e.asm.na).apply(null,arguments)},Nr=e.stackAlloc=function(){return(Nr=e.stackAlloc=e.asm.oa).apply(null,arguments)},Vr=e._emscripten_stack_set_limits=function(){return(Vr=e._emscripten_stack_set_limits=e.asm.pa).apply(null,arguments)},qr=e._memalign=function(){return(qr=e._memalign=e.asm.qa).apply(null,arguments)},Yr=(e.dynCall_iiji=function(){return(e.dynCall_iiji=e.asm.ra).apply(null,arguments)},e.dynCall_jiji=function(){return(e.dynCall_jiji=e.asm.sa).apply(null,arguments)},e.dynCall_iiiiij=function(){return(e.dynCall_iiiiij=e.asm.ta).apply(null,arguments)},e.dynCall_iiiiijj=function(){return(e.dynCall_iiiiijj=e.asm.ua).apply(null,arguments)},e.dynCall_iiiiiijj=function(){return(e.dynCall_iiiiiijj=e.asm.va).apply(null,arguments)},e.dynCall_viijii=function(){return(e.dynCall_viijii=e.asm.wa).apply(null,arguments)},e.__emscripten_allow_main_runtime_queued_calls=61440),zr=e.__emscripten_main_thread_futex=72292;function Qr(e){this.name="ExitStatus",this.message="Program terminated with exit("+e+")",this.status=e}function Jr(r){if(r=r||p,!(te>0)){if(g)return c(e),re(),void postMessage({cmd:"loaded"});!function(){if(!g){if(e.preRun)for("function"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)r=e.preRun.shift(),Z.unshift(r);var r;fe(Z)}}(),te>0||(e.setStatus?(e.setStatus("Running..."),setTimeout((function(){setTimeout((function(){e.setStatus("")}),1),t()}),1)):t())}function t(){kr||(kr=!0,e.calledRun=!0,j||(re(),c(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),function(){if(!g){if(e.postRun)for("function"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;)r=e.postRun.shift(),ee.unshift(r);var r;fe(ee)}}()))}}if(e.PThread=pe,e.PThread=pe,e.wasmMemory=A,e.ExitStatus=Qr,ae=function e(){kr||Jr(),kr||(ae=e)},e.run=Jr,e.preInit)for("function"==typeof e.preInit&&(e.preInit=[e.preInit]);e.preInit.length>0;)e.preInit.pop()();return g&&(x=!1,pe.initWorker()),Jr(),e.ready})},883:(e,r,t)=>{e.exports=t.p+"9075246e2221426ac987.wasm"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,