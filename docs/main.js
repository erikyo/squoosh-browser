(()=>{"use strict";var r,n,e={723:(r,n,e)=>{function t(r,n){return new Promise((e=>{r.addEventListener("message",(function t({data:a}){null!=a&&a.type===n&&(r.removeEventListener("message",t),e(a))}))}))}async function a(r,n,a){const o={type:"wasm_bindgen_worker_init",module:r,memory:n,receiver:a.receiver()};try{await Promise.all(Array.from({length:a.numThreads()},(()=>{const r=new Worker(new URL(e.p+e.u(723),e.b),{type:void 0});return r.postMessage(o),t(r,"wasm_bindgen_worker_ready")}))),a.build()}finally{a.free()}}e.d(n,{Q:()=>a}),t(self,"wasm_bindgen_worker_init").then((async r=>{const n=await e.e(277).then(e.bind(e,277));await n.default(r.module,r.memory),postMessage({type:"wasm_bindgen_worker_ready"}),n.wbg_rayon_start_worker(r.receiver)}))},277:(r,n,e)=>{e.r(n),e.d(n,{default:()=>w,initThreadPool:()=>m,optimise:()=>h,wbg_rayon_PoolBuilder:()=>y,wbg_rayon_start_worker:()=>g});var t=e(723);let a,o=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0});o.decode();let i=null;function u(){return null!==i&&i.buffer===a.__wbindgen_export_0.buffer||(i=new Uint8Array(a.__wbindgen_export_0.buffer)),i}const c=new Array(32).fill(void 0);c.push(void 0,null,!0,!1);let s=c.length;function f(r){s===c.length&&c.push(c.length+1);const n=s;return s=c[n],c[n]=r,n}let l=0,d=null;function p(){return null!==d&&d.buffer===a.__wbindgen_export_0.buffer||(d=new Int32Array(a.__wbindgen_export_0.buffer)),d}function h(r,n,e){try{const h=a.__wbindgen_add_to_stack_pointer(-16);var t=function(r,n){const e=n(1*r.length);return u().set(r,e/1),l=r.length,e}(r,a.__wbindgen_malloc),o=l;a.optimise(h,t,o,n,e);var i=p()[h/4+0],c=p()[h/4+1],s=(f=i,d=c,u().subarray(f/1,f/1+d)).slice();return a.__wbindgen_free(i,1*c),s}finally{a.__wbindgen_add_to_stack_pointer(16)}var f,d}function v(r){const n=function(r){return c[r]}(r);return function(r){r<36||(c[r]=s,s=r)}(r),n}function m(r){return v(a.initThreadPool(r))}function g(r){a.wbg_rayon_start_worker(r)}class y{static __wrap(r){const n=Object.create(y.prototype);return n.ptr=r,n}__destroy_into_raw(){const r=this.ptr;return this.ptr=0,r}free(){const r=this.__destroy_into_raw();a.__wbg_wbg_rayon_poolbuilder_free(r)}numThreads(){return a.wbg_rayon_poolbuilder_numThreads(this.ptr)>>>0}receiver(){return a.wbg_rayon_poolbuilder_receiver(this.ptr)}build(){a.wbg_rayon_poolbuilder_build(this.ptr)}}const w=async function r(n,i){void 0===n&&(n=new URL(e(456),e.b));const c={wbg:{}};c.wbg.__wbindgen_throw=function(r,n){throw new Error((e=r,t=n,o.decode(u().slice(e,e+t))));var e,t},c.wbg.__wbindgen_module=function(){return f(r.__wbindgen_wasm_module)},c.wbg.__wbindgen_memory=function(){return f(a.__wbindgen_export_0)},c.wbg.__wbg_startWorkers_914655bb4d5bb5e1=function(r,n,e){return f((0,t.Q)(v(r),v(n),y.__wrap(e)))},("string"==typeof n||"function"==typeof Request&&n instanceof Request||"function"==typeof URL&&n instanceof URL)&&(n=fetch(n)),c.wbg.memory=i||new WebAssembly.Memory({initial:17,maximum:16384,shared:!0});const{instance:s,module:l}=await async function(r,n){if("function"==typeof Response&&r instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(r,n)}catch(n){if("application/wasm"==r.headers.get("Content-Type"))throw n;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",n)}const e=await r.arrayBuffer();return await WebAssembly.instantiate(e,n)}{const e=await WebAssembly.instantiate(r,n);return e instanceof WebAssembly.Instance?{instance:e,module:r}:e}}(await n,c);return a=s.exports,r.__wbindgen_wasm_module=l,a.__wbindgen_start(),a}},121:(r,n,e)=>{e.d(n,{Z:()=>u});var t=e(537),a=e.n(t),o=e(645),i=e.n(o)()(a());i.push([r.id,'*{box-sizing:border-box}input,select,textarea,button{font-family:inherit;font-size:inherit;line-height:inherit}body{font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji";font-size:16px;line-height:1.6;color:var(--color-fg-default);background-color:var(--color-canvas-default)}a{color:var(--color-accent-fg);text-decoration:none}a:hover{text-decoration:underline}b,strong{font-weight:bold}hr,.rule{height:0;margin:15px 0;overflow:hidden;background:transparent;border:0;border-bottom:1 solid var(--color-border-muted)}table{border-spacing:0;border-collapse:collapse}td,th{padding:0}button{cursor:pointer;border-radius:0}body,html{padding:0;margin:0;position:relative}.wrap{height:auto;width:100%;position:relative;top:0}.wrap{display:flex;justify-content:center}.wrap #squoosh-browser{width:360px;background:#fff;border:1px solid #f3f3f3;box-shadow:0 10px 30px -30px #000;text-align:center;border-radius:20px;margin:50px;align-self:center;z-index:1;padding:20px}.wrap #original{background:#f3f3f3}.wrap #encoded{clip-path:polygon(50% 0, 100% 0, 100% 100%, 50% 100%);background:#e9e9e9;right:0}#encoded,#original{width:100%;height:100vh;position:absolute;top:0;display:flex;align-items:center;justify-content:center}#encoded img,#original img{max-width:100%;height:auto;object-fit:contain;align-self:center}.ruler{height:100vh;border:1px solid #666;position:absolute}.file-input-wrap .file-input{display:inline-block;padding:6px 12px;margin-bottom:0;font-size:14px;font-weight:400;line-height:1.4;text-align:center;white-space:nowrap;vertical-align:middle;cursor:pointer;user-select:none;border:1px solid transparent;border-radius:5px;position:absolute;width:.1px;height:.1px;opacity:0;overflow:hidden;z-index:-1}.file-input-wrap .file-input__label{position:relative;display:block;width:100%;margin:10px 0;padding:0;background:#fff;border:1px solid #f3f3f3;color:#666;line-height:45px;text-align:center;text-transform:none;cursor:pointer;transition:all .3s}.file-input-wrap .file-input:valid~.file-input__label{border-color:green;background:#fff;color:#fff;border-radius:5px}.file-input-wrap .file-input:valid~.file-input__label:before{content:"âœ“ Success";position:absolute;top:0;right:0;bottom:0;left:0;margin:auto;color:green;line-height:45px}',"",{version:3,sources:["webpack://./src/style.scss","webpack://./src/style/reset.scss"],names:[],mappings:"AAAA,ECEA,qBACE,CAAA,6BAGF,mBAIE,CAAA,iBACA,CAAA,mBACA,CAAA,KAGF,uHAfY,CAAA,cAiBV,CAAA,eACA,CAAA,6BACA,CAAA,4CACA,CAAA,EAGF,4BACE,CAAA,oBACA,CAAA,QAEA,yBACE,CAAA,SAIJ,gBAEE,CAAA,SAKF,QAEE,CAAA,aAEA,CAAA,eACA,CAAA,sBACA,CAAA,QACA,CAAA,+CACA,CAAA,MAGF,gBACE,CAAA,wBACA,CAAA,MAGF,SAEE,CAAA,OAGF,cACE,CAAA,eAEA,CAAA,UDvDF,SACE,CAAA,QACA,CAAA,iBACA,CAAA,MAGF,WACE,CAAA,UACA,CAAA,iBACA,CAAA,KACA,CAAA,MAGF,YACE,CAAA,sBACA,CAAA,uBAEA,WACE,CAAA,eA1BI,CAAA,wBA4BJ,CAAA,iCACA,CAAA,iBACA,CAAA,kBACA,CAAA,WACA,CAAA,iBACA,CAAA,SACA,CAAA,YACA,CAAA,gBAGF,kBArCa,CAAA,eAyCb,qDACE,CAAA,kBAKA,CAAA,OACA,CAAA,mBAIJ,UAEE,CAAA,YACA,CAAA,iBACA,CAAA,KACA,CAAA,YACA,CAAA,kBACA,CAAA,sBACA,CAAA,2BAEA,cACE,CAAA,WACA,CAAA,kBACA,CAAA,iBACA,CAAA,OAIJ,YACE,CAAA,qBACA,CAAA,iBACA,CAAA,6BAKA,oBAEI,CAAA,gBACA,CAAA,eACA,CAAA,cACA,CAAA,eACA,CAAA,eACA,CAAA,iBACA,CAAA,kBACA,CAAA,qBACA,CAAA,cACA,CAAA,gBACA,CAAA,4BACA,CAAA,iBACA,CAAA,iBACA,CAAA,UAEA,CAAA,WACA,CAAA,SAEA,CAAA,eACA,CAAA,UACA,CAAA,oCAGF,iBACE,CAAA,aAEA,CAAA,UACA,CAAA,aAEA,CAAA,SACA,CAAA,eA/GE,CAAA,wBAkHF,CAAA,UAhHQ,CAAA,gBAmHR,CAAA,iBACA,CAAA,mBACA,CAAA,cAEA,CAAA,kBACA,CAAA,sDAGF,kBAzHI,CAAA,eAJA,CAAA,UAAA,CAAA,iBAiIF,CAAA,6DAEA,mBACE,CAAA,iBAEA,CAAA,KACA,CAAA,OACA,CAAA,QACA,CAAA,MACA,CAAA,WAEA,CAAA,WAxIA,CAAA,gBA2IA",sourcesContent:["$white: white;\r\n$gray-lighter: #f3f3f3;\r\n$gray-darker: #666;\r\n$black: #000;\r\n$green: green;\r\n\r\n@import \"style/reset\";\r\n\r\nbody, html {\r\n  padding: 0;\r\n  margin: 0;\r\n  position: relative;\r\n}\r\n\r\n.wrap {\r\n  height: auto;\r\n  width: 100%;\r\n  position: relative;\r\n  top:0;\r\n}\r\n\r\n.wrap {\r\n  display: flex;\r\n  justify-content: center;\r\n\r\n  #squoosh-browser {\r\n    width: 360px;\r\n    background: $white;\r\n    border: 1px solid $gray-lighter;\r\n    box-shadow: 0 10px 30px -30px $black;\r\n    text-align: center;\r\n    border-radius: 20px;\r\n    margin: 50px;\r\n    align-self: center;\r\n    z-index: 1;\r\n    padding: 20px;\r\n  }\r\n\r\n  #original {\r\n    background: $gray-lighter;\r\n  }\r\n\r\n  #encoded {\r\n    clip-path: polygon(\r\n            50% 0,\r\n            100% 0,\r\n            100% 100%,\r\n            50% 100%);\r\n    background: darken($gray-lighter, 4%);\r\n    right:0;\r\n  }\r\n}\r\n\r\n#encoded,\r\n#original {\r\n  width: 100%;\r\n  height: 100vh;\r\n  position: absolute;\r\n  top: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  img {\r\n    max-width: 100%;\r\n    height: auto;\r\n    object-fit: contain;\r\n    align-self: center;\r\n  }\r\n}\r\n\r\n.ruler {\r\n  height: 100vh;\r\n  border: 1px solid $gray-darker;\r\n  position: absolute;\r\n}\r\n\r\n// input button\r\n.file-input-wrap {\r\n  .file-input {\r\n\r\n      display: inline-block;\r\n      padding: 6px 12px;\r\n      margin-bottom: 0;\r\n      font-size: 14px;\r\n      font-weight: 400;\r\n      line-height: 1.4;\r\n      text-align: center;\r\n      white-space: nowrap;\r\n      vertical-align: middle;\r\n      cursor: pointer;\r\n      user-select: none;\r\n      border: 1px solid transparent;\r\n      border-radius: 5px;\r\n      position: absolute;\r\n\r\n      width: 0.1px;\r\n      height: 0.1px;\r\n\r\n      opacity: 0;\r\n      overflow: hidden;\r\n      z-index: -1;\r\n\r\n\r\n    &__label {\r\n      position: relative;\r\n\r\n      display: block;\r\n      width: 100%;\r\n\r\n      margin: 10px 0;\r\n      padding: 0;\r\n\r\n      background: $white;\r\n      border: 1px solid $gray-lighter;\r\n      color: $gray-darker;\r\n\r\n      line-height: 45px;\r\n      text-align: center;\r\n      text-transform: none;\r\n\r\n      cursor: pointer;\r\n      transition: all 0.3s;\r\n    }\r\n\r\n    &:valid ~ .file-input__label {\r\n      border-color: $green;\r\n      background: $white;\r\n      color: $white;\r\n      border-radius: 5px;\r\n\r\n      &:before {\r\n        content: 'âœ“ Success';\r\n\r\n        position: absolute;\r\n        top: 0;\r\n        right: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n\r\n        margin: auto;\r\n\r\n        color: $green;\r\n        line-height: 45px;\r\n      }\r\n    }\r\n  }\r\n}",'$body-font: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji";\r\n\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n\r\ninput,\r\nselect,\r\ntextarea,\r\nbutton {\r\n  font-family: inherit;\r\n  font-size: inherit;\r\n  line-height: inherit;\r\n}\r\n\r\nbody {\r\n  font-family: $body-font;\r\n  font-size: 16px;\r\n  line-height: 1.6;\r\n  color: var(--color-fg-default);\r\n  background-color: var(--color-canvas-default);\r\n}\r\n\r\na {\r\n  color: var(--color-accent-fg);\r\n  text-decoration: none;\r\n\r\n  &:hover {\r\n    text-decoration: underline;\r\n  }\r\n}\r\n\r\nb,\r\nstrong {\r\n  font-weight: bold;\r\n}\r\n\r\n// Horizontal lines\r\n//\r\nhr,\r\n.rule {\r\n  height: 0;\r\n  // stylelint-disable-next-line primer/spacing\r\n  margin: 15px 0;\r\n  overflow: hidden;\r\n  background: transparent;\r\n  border: 0;\r\n  border-bottom: 1 solid var(--color-border-muted);\r\n}\r\n\r\ntable {\r\n  border-spacing: 0;\r\n  border-collapse: collapse;\r\n}\r\n\r\ntd,\r\nth {\r\n  padding: 0;\r\n}\r\n\r\nbutton {\r\n  cursor: pointer;\r\n  // Remove border radius added by Chrome macOS\r\n  border-radius: 0;\r\n}'],sourceRoot:""}]);const u=i},645:r=>{r.exports=function(r){var n=[];return n.toString=function(){return this.map((function(n){var e="",t=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),t&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=r(n),t&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(r,e,t,a,o){"string"==typeof r&&(r=[[null,r,void 0]]);var i={};if(t)for(var u=0;u<this.length;u++){var c=this[u][0];null!=c&&(i[c]=!0)}for(var s=0;s<r.length;s++){var f=[].concat(r[s]);t&&i[f[0]]||(void 0!==o&&(void 0===f[5]||(f[1]="@layer".concat(f[5].length>0?" ".concat(f[5]):""," {").concat(f[1],"}")),f[5]=o),e&&(f[2]?(f[1]="@media ".concat(f[2]," {").concat(f[1],"}"),f[2]=e):f[2]=e),a&&(f[4]?(f[1]="@supports (".concat(f[4],") {").concat(f[1],"}"),f[4]=a):f[4]="".concat(a)),n.push(f))}},n}},537:r=>{r.exports=function(r){var n=r[1],e=r[3];if(!e)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),o="/*# ".concat(a," */"),i=e.sources.map((function(r){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(r," */")}));return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}},379:r=>{var n=[];function e(r){for(var e=-1,t=0;t<n.length;t++)if(n[t].identifier===r){e=t;break}return e}function t(r,t){for(var o={},i=[],u=0;u<r.length;u++){var c=r[u],s=t.base?c[0]+t.base:c[0],f=o[s]||0,l="".concat(s," ").concat(f);o[s]=f+1;var d=e(l),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)n[d].references++,n[d].updater(p);else{var h=a(p,t);t.byIndex=u,n.splice(u,0,{identifier:l,updater:h,references:1})}i.push(l)}return i}function a(r,n){var e=n.domAPI(n);return e.update(r),function(n){if(n){if(n.css===r.css&&n.media===r.media&&n.sourceMap===r.sourceMap&&n.supports===r.supports&&n.layer===r.layer)return;e.update(r=n)}else e.remove()}}r.exports=function(r,a){var o=t(r=r||[],a=a||{});return function(r){r=r||[];for(var i=0;i<o.length;i++){var u=e(o[i]);n[u].references--}for(var c=t(r,a),s=0;s<o.length;s++){var f=e(o[s]);0===n[f].references&&(n[f].updater(),n.splice(f,1))}o=c}}},569:r=>{var n={};r.exports=function(r,e){var t=function(r){if(void 0===n[r]){var e=document.querySelector(r);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(r){e=null}n[r]=e}return n[r]}(r);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},609:r=>{r.exports=function(r){var n=document.createElement("style");return r.setAttributes(n,r.attributes),r.insert(n,r.options),n}},565:(r,n,e)=>{r.exports=function(r){var n=e.nc;n&&r.setAttribute("nonce",n)}},795:r=>{r.exports=function(r){var n=r.insertStyleElement(r);return{update:function(e){!function(r,n,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var a=void 0!==e.layer;a&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,a&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(t,r,n.options)}(n,r,e)},remove:function(){!function(r){if(null===r.parentNode)return!1;r.parentNode.removeChild(r)}(n)}}}},589:r=>{r.exports=function(r,n){if(n.styleSheet)n.styleSheet.cssText=r;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(r))}}},585:(r,n,e)=>{r.exports=e.p+"596cd1933bdfd8e10d60.wasm"},199:(r,n,e)=>{r.exports=e.p+"3ec28528078454f2f671.wasm"},211:(r,n,e)=>{r.exports=e.p+"1ed09e1efa4c40c4d3a6.wasm"},91:(r,n,e)=>{r.exports=e.p+"5ce50a1776f99f0b3cd0.wasm"},388:(r,n,e)=>{r.exports=e.p+"7775ca90ae720a37cf35.wasm"},280:(r,n,e)=>{r.exports=e.p+"c048b75d1daf0fca2af2.wasm"},192:(r,n,e)=>{r.exports=e.p+"725a0bba8d1e5495b770.wasm"},883:(r,n,e)=>{r.exports=e.p+"9075246e2221426ac987.wasm"},130:(r,n,e)=>{r.exports=e.p+"a02d039fde215860b44f.wasm"},256:(r,n,e)=>{r.exports=e.p+"513ba6bb8bf8b2b607a2.wasm"},456:(r,n,e)=>{r.exports=e.p+"6ac3239376efce53600f.wasm"},706:(r,n,e)=>{r.exports=e.p+"c96242667dc8e630897a.wasm"},49:(r,n,e)=>{r.exports=e.p+"48548639c5627b995510.wasm"},505:(r,n,e)=>{r.exports=e.p+"e3757d80117da6ce5bf7.wasm"},949:(r,n,e)=>{r.exports=e.p+"7ceef6a888447d9bc61d.wasm"},114:(r,n,e)=>{r.exports=e.p+"9778a3d5644428c75971.wasm"},389:(r,n,e)=>{r.exports=e.p+"2b3cbe1189d0cc95bdf8.wasm"},917:(r,n,e)=>{r.exports=e.p+"cf89c3103f2ed3dd0236.wasm"},719:(r,n,e)=>{r.exports=e.p+"19c1c3c31fd4c5763fc5.wasm"},137:(r,n,e)=>{r.exports=e.p+"b43405dcb6a2a7e1b8cc.wasm"}},t={};function a(r){var n=t[r];if(void 0!==n)return n.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,a),o.exports}a.m=e,a.n=r=>{var n=r&&r.__esModule?()=>r.default:()=>r;return a.d(n,{a:n}),n},a.d=(r,n)=>{for(var e in n)a.o(n,e)&&!a.o(r,e)&&Object.defineProperty(r,e,{enumerable:!0,get:n[e]})},a.f={},a.e=r=>Promise.all(Object.keys(a.f).reduce(((n,e)=>(a.f[e](r,n),n)),[])),a.u=r=>r+".main.js",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(r){if("object"==typeof window)return window}}(),a.o=(r,n)=>Object.prototype.hasOwnProperty.call(r,n),r={},n="squoosh-browser-demo:",a.l=(e,t,o,i)=>{if(r[e])r[e].push(t);else{var u,c;if(void 0!==o)for(var s=document.getElementsByTagName("script"),f=0;f<s.length;f++){var l=s[f];if(l.getAttribute("src")==e||l.getAttribute("data-webpack")==n+o){u=l;break}}u||(c=!0,(u=document.createElement("script")).charset="utf-8",u.timeout=120,a.nc&&u.setAttribute("nonce",a.nc),u.setAttribute("data-webpack",n+o),u.src=e),r[e]=[t];var d=(n,t)=>{u.onerror=u.onload=null,clearTimeout(p);var a=r[e];if(delete r[e],u.parentNode&&u.parentNode.removeChild(u),a&&a.forEach((r=>r(t))),n)return n(t)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:u}),12e4);u.onerror=d.bind(null,u.onerror),u.onload=d.bind(null,u.onload),c&&document.head.appendChild(u)}},a.r=r=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},(()=>{var r;a.g.importScripts&&(r=a.g.location+"");var n=a.g.document;if(!r&&n&&(n.currentScript&&(r=n.currentScript.src),!r)){var e=n.getElementsByTagName("script");e.length&&(r=e[e.length-1].src)}if(!r)throw new Error("Automatic publicPath is not supported in this browser");r=r.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=r})(),(()=>{a.b=document.baseURI||self.location.href;var r={179:0,277:0,723:0};a.f.j=(n,e)=>{var t=a.o(r,n)?r[n]:void 0;if(0!==t)if(t)e.push(t[2]);else{var o=new Promise(((e,a)=>t=r[n]=[e,a]));e.push(t[2]=o);var i=a.p+a.u(n),u=new Error;a.l(i,(e=>{if(a.o(r,n)&&(0!==(t=r[n])&&(r[n]=void 0),t)){var o=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;u.message="Loading chunk "+n+" failed.\n("+o+": "+i+")",u.name="ChunkLoadError",u.type=o,u.request=i,t[1](u)}}),"chunk-"+n,n)}};var n=(n,e)=>{var t,o,[i,u,c]=e,s=0;if(i.some((n=>0!==r[n]))){for(t in u)a.o(u,t)&&(a.m[t]=u[t]);c&&c(a)}for(n&&n(e);s<i.length;s++)o=i[s],a.o(r,o)&&r[o]&&r[o][0](),r[o]=0},e=self.webpackChunksquoosh_browser_demo=self.webpackChunksquoosh_browser_demo||[];e.forEach(n.bind(null,0)),e.push=n.bind(null,e.push.bind(e))})(),(()=>{var r={};a.r(r),a.d(r,{defaultOptions:()=>F,extension:()=>S,label:()=>W,mimeType:()=>P});var n={};a.r(n),a.d(n,{defaultOptions:()=>M,extension:()=>j,label:()=>R,mimeType:()=>I});var e={};a.r(e),a.d(e,{defaultOptions:()=>B,extension:()=>U,label:()=>O,mimeType:()=>D});var t={};a.r(t),a.d(t,{defaultOptions:()=>N,extension:()=>q,label:()=>H,mimeType:()=>L});var o={};a.r(o),a.d(o,{defaultOptions:()=>Y,extension:()=>G,label:()=>V,mimeType:()=>z});var i={};a.r(i),a.d(i,{defaultOptions:()=>X,extension:()=>$,label:()=>Q,mimeType:()=>J});var u={};a.r(u),a.d(u,{defaultOptions:()=>nr,extension:()=>rr,label:()=>Z,mimeType:()=>K});var c={};a.r(c),a.d(c,{defaultOptions:()=>or,extension:()=>ar,label:()=>er,mimeType:()=>tr});var s={};a.r(s),a.d(s,{defaultOptions:()=>sr,extension:()=>cr,label:()=>ir,mimeType:()=>ur});var f={};a.r(f),a.d(f,{avifEncode:()=>gr});var l={};a.r(l),a.d(l,{browserGIFEncode:()=>wr,featureTest:()=>yr});var d={};a.r(d),a.d(d,{browserJPEGEncode:()=>_r});var p={};a.r(p),a.d(p,{browserPNGEncode:()=>br});var h={};a.r(h),a.d(h,{jxlEncode:()=>kr});var v={};a.r(v),a.d(v,{mozJPEGEncode:()=>Pr});var m={};a.r(m),a.d(m,{oxiPNGEncode:()=>qr});var g={};a.r(g),a.d(g,{webPEncode:()=>Gr});var y={};async function w(r,n,e){const t=document.createElement("canvas");t.width=r.width,t.height=r.height;const a=t.getContext("2d");if(!a)throw Error("Canvas not initialized");let o;if(a.putImageData(r,0,0),"toBlob"in t)o=await new Promise((r=>t.toBlob(r,n,e)));else{const r=t.toDataURL(n,e),a=/data:([^;]+);base64,(.*)$/.exec(r);if(!a)throw Error("Data URL reading failed");const i=a[1],u=atob(a[2]),c=new Uint8Array(u.length);for(let r=0;r<c.length;r+=1)c[r]=u.charCodeAt(r);o=new Blob([c],{type:i})}if(!o)throw Error("Encoding failed");return o}function _(r){return"displayWidth"in r?r.displayWidth:r.width}function b(r){return"displayHeight"in r?r.displayHeight:r.height}function A(r,n={}){const{width:e=_(r),height:t=b(r),sx:a=0,sy:o=0,sw:i=_(r),sh:u=b(r)}=n,c=document.createElement("canvas");c.width=e,c.height=t;const s=c.getContext("2d");if(!s)throw new Error("Could not create canvas context");return s.drawImage(r,a,o,i,u,0,0,e,t),s.getImageData(0,0,e,t)}a.r(y),a.d(y,{wp2Encode:()=>Xr});const T="undefined"!=typeof ImageDecoder,C=new Map;function E(r){return new Response(r).arrayBuffer()}const k=new Map([[/^%PDF-/,"application/pdf"],[/^GIF87a/,"image/gif"],[/^GIF89a/,"image/gif"],[/^\x89PNG\x0D\x0A\x1A\x0A/,"image/png"],[/^\xFF\xD8\xFF/,"image/jpeg"],[/^BM/,"image/bmp"],[/^I I/,"image/tiff"],[/^II*/,"image/tiff"],[/^MM\x00*/,"image/tiff"],[/^RIFF....WEBPVP8[LX ]/s,"image/webp"],[/^\xF4\xFF\x6F/,"image/webp2"],[/^\x00\x00\x00 ftypavif\x00\x00\x00\x00/,"image/avif"],[/^\xff\x0a/,"image/jxl"],[/^\x00\x00\x00\x0cJXL \x0d\x0a\x87\x0a/,"image/jxl"]]);async function x(r){const n=URL.createObjectURL(r);try{return await async function(r){const n=new Image;n.decoding="async",n.src=r;const e=new Promise(((r,e)=>{n.onload=()=>r(),n.onerror=()=>e(Error("Image loading error"))}));return n.decode&&await n.decode().catch((()=>null)),await e,n}(n)}finally{URL.revokeObjectURL(n)}}const W="AVIF",P="image/avif",S="avif",F={cqLevel:33,cqAlphaLevel:-1,denoiseLevel:0,tileColsLog2:0,tileRowsLog2:0,speed:6,subsample:1,chromaDeltaQ:!1,sharpness:0,tune:0},R="Browser GIF",I="image/gif",j="gif",M={},O="Browser JPEG",D="image/jpeg",U="jpg",B={quality:.75},H="Browser PNG",L="image/png",q="png",N={},V="JPEG XL (beta)",z="image/jxl",G="jxl",Y={speed:4,quality:75,progressive:!1,epf:-1,nearLossless:0,lossyPalette:!1,decodingSpeedTier:0},Q="MozJPEG",J="image/jpeg",$="jpg",X={quality:75,baseline:!1,arithmetic:!1,progressive:!0,optimize_coding:!0,smoothing:0,color_space:3,quant_table:3,trellis_multipass:!1,trellis_opt_zero:!1,trellis_opt_table:!1,trellis_loops:1,auto_subsample:!0,chroma_subsample:2,separate_chroma_quality:!1,chroma_quality:75},Z="OxiPNG",K="image/png",rr="png",nr={level:2,interlace:!1},er="WebP",tr="image/webp",ar="webp",or={quality:75,target_size:0,target_PSNR:0,method:4,sns_strength:50,filter_strength:60,filter_sharpness:0,filter_type:1,partitions:0,segments:4,pass:1,show_compressed:0,preprocessing:0,autofilter:0,partition_limit:0,alpha_compression:1,alpha_filtering:1,alpha_quality:100,lossless:0,exact:0,image_hint:0,emulate_jpeg_size:0,thread_level:0,low_memory:0,near_lossless:100,use_delta_palette:0,use_sharp_yuv:0},ir="WebP v2 (unstable)",ur="image/webp2",cr="wp2",sr={quality:75,alpha_quality:75,effort:5,pass:1,sns:50,uv_mode:3,csp_type:0,error_diffusion:0,use_random_matrix:!1};function fr(r){return r({noInitialRun:!0})}function lr(r){return new Response(r).arrayBuffer()}const dr=async()=>WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,10,1,8,0,65,0,253,15,253,98,11])),pr=()=>(async r=>{try{return"undefined"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(r)}catch(r){return!1}})(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]));const hr=("file:///D:/altri/squoosh-web/squoosh-browser/codecs/avif/enc/avif_enc_mt.js",function(r){function n(){return T.buffer!=k&&Y(T.buffer),x}function e(){return T.buffer!=k&&Y(T.buffer),W}function t(){return T.buffer!=k&&Y(T.buffer),P}function o(){return T.buffer!=k&&Y(T.buffer),S}function i(){return T.buffer!=k&&Y(T.buffer),F}function u(){return T.buffer!=k&&Y(T.buffer),R}function c(){return T.buffer!=k&&Y(T.buffer),j}var s,f;(r=void 0!==(r=r||{})?r:{}).ready=new Promise((function(r,n){s=r,f=n}));var l,d={};for(l in r)r.hasOwnProperty(l)&&(d[l]=r[l]);var p,h=[],v=function(r,n){throw n},m=r.ENVIRONMENT_IS_PTHREAD||!1,g="";function y(n){return r.locateFile?r.locateFile(n,g):g+n}g=self.location.href,g=0!==(g="file:///D:/altri/squoosh-web/squoosh-browser/codecs/avif/enc/avif_enc_mt.js").indexOf("blob:")?g.substr(0,g.lastIndexOf("/")+1):"",p=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)};var w=r.print||console.log.bind(console),_=r.printErr||console.warn.bind(console);for(l in d)d.hasOwnProperty(l)&&(r[l]=d[l]);d=null,r.arguments&&(h=r.arguments),r.thisProgram&&r.thisProgram,r.quit&&(v=r.quit);var b,A=0;Atomics.load,Atomics.store,Atomics.compareExchange,r.wasmBinary&&(b=r.wasmBinary);var T,C,E=r.noExitRuntime||!0;"object"!=typeof WebAssembly&&ar("no native wasm support detected");var k,x,W,P,S,F,R,I,j,M=!1;function O(r,n){r||ar("Assertion failed: "+n)}function D(r,n,e){for(var t=n+e,a="";!(n>=t);){var o=r[n++];if(!o)return a;if(128&o){var i=63&r[n++];if(192!=(224&o)){var u=63&r[n++];if((o=224==(240&o)?(15&o)<<12|i<<6|u:(7&o)<<18|i<<12|u<<6|63&r[n++])<65536)a+=String.fromCharCode(o);else{var c=o-65536;a+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else a+=String.fromCharCode((31&o)<<6|i)}else a+=String.fromCharCode(o)}return a}function U(r,n){return r?D(e(),r,n):""}function B(r,n,t){return function(r,n,e,t){if(!(t>0))return 0;for(var a=e,o=e+t-1,i=0;i<r.length;++i){var u=r.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&r.charCodeAt(++i)),u<=127){if(e>=o)break;n[e++]=u}else if(u<=2047){if(e+1>=o)break;n[e++]=192|u>>6,n[e++]=128|63&u}else if(u<=65535){if(e+2>=o)break;n[e++]=224|u>>12,n[e++]=128|u>>6&63,n[e++]=128|63&u}else{if(e+3>=o)break;n[e++]=240|u>>18,n[e++]=128|u>>12&63,n[e++]=128|u>>6&63,n[e++]=128|63&u}}return n[e]=0,e-a}(r,e(),n,t)}function H(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&r.charCodeAt(++e)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n}function L(r,n){for(var e="",a=0;!(a>=n/2);++a){var o=t()[r+2*a>>1];if(0==o)break;e+=String.fromCharCode(o)}return e}function q(r,n,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var a=n,o=(e-=2)<2*r.length?e/2:r.length,i=0;i<o;++i){var u=r.charCodeAt(i);t()[n>>1]=u,n+=2}return t()[n>>1]=0,n-a}function N(r){return 2*r.length}function V(r,n){for(var e=0,t="";!(e>=n/4);){var a=i()[r+4*e>>2];if(0==a)break;if(++e,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function z(r,n,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=n,a=t+e-4,o=0;o<r.length;++o){var u=r.charCodeAt(o);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&r.charCodeAt(++o)),i()[n>>2]=u,(n+=4)+4>a)break}return i()[n>>2]=0,n-t}function G(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&++e,n+=4}return n}function Y(n){k=n,r.HEAP8=x=new Int8Array(n),r.HEAP16=P=new Int16Array(n),r.HEAP32=F=new Int32Array(n),r.HEAPU8=W=new Uint8Array(n),r.HEAPU16=S=new Uint16Array(n),r.HEAPU32=R=new Uint32Array(n),r.HEAPF32=I=new Float32Array(n),r.HEAPF64=j=new Float64Array(n)}m&&(k=r.buffer);var Q,J=r.INITIAL_MEMORY||16777216;if(m)T=r.wasmMemory,k=r.buffer;else if(r.wasmMemory)T=r.wasmMemory;else if(!((T=new WebAssembly.Memory({initial:J/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw _("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");T&&(k=T.buffer),J=k.byteLength,Y(k);var $=[],X=[],Z=[],K=[];function rr(){m||sr(X)}var nr=0,er=null,tr=null;function ar(n){r.onAbort&&r.onAbort(n),m&&console.error("Pthread aborting at "+(new Error).stack),_(n+=""),M=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var e=new WebAssembly.RuntimeError(n);throw f(e),e}function or(r){return r.startsWith("data:application/octet-stream;base64,")}if(r.preloadedImages={},r.preloadedAudios={},r.locateFile)or(ir="avif_enc_mt.wasm")||(ir=y(ir));else var ir=new URL(a(211),a.b).toString();function ur(r){try{if(r==ir&&b)return new Uint8Array(b);if(p)return p(r);throw"both async and sync fetching of the wasm failed"}catch(r){ar(r)}}var cr={601124:function(){throw"Canceled!"},601142:function(r,n){setTimeout((function(){xn(r,n)}),0)}};function sr(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?Q.get(t)():Q.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(r)}}function fr(r,e){if(r<=0||r>n().length||!0&r||e<0)return-28;if(0==e)return 0;e>=2147483647&&(e=1/0);var t=Atomics.load(i(),Vn>>2),a=0;if(t==r&&Atomics.compareExchange(i(),Vn>>2,t,0)==t&&(a=1,--e<=0))return 1;var o=Atomics.notify(i(),r>>2,e);if(o>=0)return o+a;throw"Atomics.notify returned an unexpected value "+o}function lr(r){if(m)throw"Internal Error! cleanupThread() can only ever be called from main application thread!";if(!r)throw"Internal Error! Null pthread_ptr in cleanupThread!";var n=pr.pthreads[r];if(n){i()[r+12>>2]=0;var e=n.worker;pr.returnWorkerToPool(e)}}r._emscripten_futex_wake=fr;var dr,pr={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],initMainThreadBlock:function(){for(var r=navigator.hardwareConcurrency,n=0;n<r;++n)pr.allocateUnusedWorker()},initRuntime:function(){for(var r=An(228),n=0;n<57;++n)u()[r/4+n]=0;i()[r+12>>2]=r;var e=r+152;i()[e>>2]=e;var t=An(512);for(n=0;n<128;++n)u()[t/4+n]=0;Atomics.store(u(),r+100>>2,t),Atomics.store(u(),r+40>>2,r),Rn(r,!1,1),En(r)},initWorker:function(){},pthreads:{},threadExitHandlers:[],runExitHandlers:function(){for(;pr.threadExitHandlers.length>0;)pr.threadExitHandlers.pop()();m&&In()&&jn()},runExitHandlersAndDeinitThread:function(r,n){Atomics.store(u(),r+56>>2,1),Atomics.store(u(),r+60>>2,0),pr.runExitHandlers(),Atomics.store(u(),r+4>>2,n),Atomics.store(u(),r+0>>2,1),fr(r+0,2147483647),Rn(0,0,0)},setExitStatus:function(r){},threadExit:function(r){var n=In();n&&(pr.runExitHandlersAndDeinitThread(n,r),m&&postMessage({cmd:"exit"}))},threadCancel:function(){pr.runExitHandlersAndDeinitThread(In(),-1),postMessage({cmd:"cancelDone"})},terminateAllThreads:function(){for(var r in pr.pthreads)(t=pr.pthreads[r])&&t.worker&&pr.returnWorkerToPool(t.worker);pr.pthreads={};for(var n=0;n<pr.unusedWorkers.length;++n)(e=pr.unusedWorkers[n]).terminate();for(pr.unusedWorkers=[],n=0;n<pr.runningWorkers.length;++n){var e,t=(e=pr.runningWorkers[n]).pthread;pr.freeThreadData(t),e.terminate()}pr.runningWorkers=[]},freeThreadData:function(r){if(r){if(r.threadInfoStruct){var n=i()[r.threadInfoStruct+100>>2];i()[r.threadInfoStruct+100>>2]=0,Tn(n),Tn(r.threadInfoStruct)}r.threadInfoStruct=0,r.allocatedOwnStack&&r.stackBase&&Tn(r.stackBase),r.stackBase=0,r.worker&&(r.worker.pthread=null)}},returnWorkerToPool:function(r){pr.runWithoutMainThreadQueuedCalls((function(){delete pr.pthreads[r.pthread.threadInfoStruct],pr.unusedWorkers.push(r),pr.runningWorkers.splice(pr.runningWorkers.indexOf(r),1),pr.freeThreadData(r.pthread),r.pthread=void 0}))},runWithoutMainThreadQueuedCalls:function(r){i()[Nn>>2]=0;try{r()}finally{i()[Nn>>2]=1}},receiveObjectTransfer:function(r){},threadInit:function(){for(var r in pr.tlsInitFunctions)pr.tlsInitFunctions[r]()},loadWasmModuleToWorker:function(n,e){n.onmessage=function(t){var a=t.data,o=a.cmd;if(n.pthread&&(pr.currentProxiedOperationCallerThread=n.pthread.threadInfoStruct),a.targetThread&&a.targetThread!=In()){var c=pr.pthreads[a.targetThread];return c?c.worker.postMessage(t.data,a.transferList):console.error('Internal error! Worker sent a message "'+o+'" to target pthread '+a.targetThread+", but that thread no longer exists!"),void(pr.currentProxiedOperationCallerThread=void 0)}if("processQueuedMainThreadWork"===o)Pn();else if("spawnThread"===o)gn(t.data);else if("cleanupThread"===o)lr(a.thread);else if("killThread"===o)!function(r){if(m)throw"Internal Error! killThread() can only ever be called from main application thread!";if(!r)throw"Internal Error! Null pthread_ptr in killThread!";i()[r+12>>2]=0;var n=pr.pthreads[r];n.worker.terminate(),pr.freeThreadData(n),pr.runningWorkers.splice(pr.runningWorkers.indexOf(n.worker),1),n.worker.pthread=void 0}(a.thread);else if("cancelThread"===o)!function(r){if(m)throw"Internal Error! cancelThread() can only ever be called from main application thread!";if(!r)throw"Internal Error! Null pthread_ptr in cancelThread!";pr.pthreads[r].worker.postMessage({cmd:"cancel"})}(a.thread);else if("loaded"===o)n.loaded=!0,e&&e(n),n.runPthread&&(n.runPthread(),delete n.runPthread);else if("print"===o)w("Thread "+a.threadId+": "+a.text);else if("printErr"===o)_("Thread "+a.threadId+": "+a.text);else if("alert"===o)alert("Thread "+a.threadId+": "+a.text);else if("exit"===o)n.pthread&&Atomics.load(u(),n.pthread.threadInfoStruct+64>>2)&&pr.returnWorkerToPool(n);else if("exitProcess"===o)try{!function(n,e){if(m)throw postMessage({cmd:"exitProcess",returnCode:n}),new zn(n);hr()||(pr.terminateAllThreads(),r.onExit&&r.onExit(n),M=!0),v(n,new zn(n))}(a.returnCode)}catch(t){if(t instanceof zn)return;throw t}else"cancelDone"===o?pr.returnWorkerToPool(n):"objectTransfer"===o?pr.receiveObjectTransfer(t.data):"setimmediate"===t.data.target?n.postMessage(t.data):_("worker sent an unknown command "+o);pr.currentProxiedOperationCallerThread=void 0},n.onerror=function(r){_("pthread sent an error! "+r.filename+":"+r.lineno+": "+r.message)},n.postMessage({cmd:"load",urlOrBlob:r.mainScriptUrlOrBlob,wasmMemory:T,wasmModule:C})},allocateUnusedWorker:function(){if(r.locateFile){var n=y("avif_enc_mt.worker.js");pr.unusedWorkers.push(new Worker(n))}else pr.unusedWorkers.push(new Worker(new URL(a.p+a.u(389),a.b)))},getNewWorker:function(){return 0==pr.unusedWorkers.length&&(pr.allocateUnusedWorker(),pr.loadWasmModuleToWorker(pr.unusedWorkers[0])),pr.unusedWorkers.pop()},busySpinWait:function(r){for(var n=performance.now()+r;performance.now()<n;);}};function hr(){return E||!1}function vr(r,n){pr.threadExitHandlers.push((function(){Q.get(r)(n)}))}r.establishStackSpace=function(r,n){Bn(r,n),Dn(r)},r.invokeEntryPoint=function(r,n){return Q.get(r)(n)},r.keepRuntimeAlive=hr,dr=m?function(){return performance.now()-r.__performance_now_clock_drift}:function(){return performance.now()};var mr={mappings:{},buffers:[null,[],[]],printChar:function(r,n){var e=mr.buffers[r];0===n||10===n?((1===r?w:_)(D(e,0)),e.length=0):e.push(n)},varargs:void 0,get:function(){return mr.varargs+=4,i()[mr.varargs-4>>2]},getStr:function(r){return U(r)},get64:function(r,n){return r}};function gr(r,n,e){return m?nn(1,1,r,n,e):(mr.varargs=e,0)}function yr(r,n,e){return m?nn(2,1,r,n,e):(mr.varargs=e,0)}function wr(r,n,e){if(m)return nn(3,1,r,n,e);mr.varargs=e}var _r={};function br(r){for(;r.length;){var n=r.pop();r.pop()(n)}}function Ar(r){return this.fromWireType(u()[r>>2])}var Tr={},Cr={},Er={};function kr(r){if(void 0===r)return"_unknown";var n=(r=r.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return n>=48&&n<=57?"_"+r:r}function xr(r,n){return r=kr(r),new Function("body","return function "+r+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(n)}function Wr(r,n){var e=xr(n,(function(r){this.name=n,this.message=r;var e=new Error(r).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var Pr=void 0;function Sr(r){throw new Pr(r)}function Fr(r,n,e){function t(n){var t=e(n);t.length!==r.length&&Sr("Mismatched type converter count");for(var a=0;a<r.length;++a)Dr(r[a],t[a])}r.forEach((function(r){Er[r]=n}));var a=new Array(n.length),o=[],i=0;n.forEach((function(r,n){Cr.hasOwnProperty(r)?a[n]=Cr[r]:(o.push(r),Tr.hasOwnProperty(r)||(Tr[r]=[]),Tr[r].push((function(){a[n]=Cr[r],++i===o.length&&t(a)})))})),0===o.length&&t(a)}function Rr(r){switch(r){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+r)}}var Ir=void 0;function jr(r){for(var n="",t=r;e()[t];)n+=Ir[e()[t++]];return n}var Mr=void 0;function Or(r){throw new Mr(r)}function Dr(r,n,e){if(e=e||{},!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=n.name;if(r||Or('type "'+t+'" must have a positive integer typeid pointer'),Cr.hasOwnProperty(r)){if(e.ignoreDuplicateRegistrations)return;Or("Cannot register type '"+t+"' twice")}if(Cr[r]=n,delete Er[r],Tr.hasOwnProperty(r)){var a=Tr[r];delete Tr[r],a.forEach((function(r){r()}))}}var Ur=[],Br=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Hr(r){r>4&&0==--Br[r].refcount&&(Br[r]=void 0,Ur.push(r))}function Lr(r){switch(r){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=Ur.length?Ur.pop():Br.length;return Br[n]={refcount:1,value:r},n}}function qr(r){if(null===r)return"null";var n=typeof r;return"object"===n||"array"===n||"function"===n?r.toString():""+r}function Nr(r,n){switch(n){case 2:return function(r){return this.fromWireType((T.buffer!=k&&Y(T.buffer),I)[r>>2])};case 3:return function(r){return this.fromWireType(c()[r>>3])};default:throw new TypeError("Unknown float type: "+r)}}function Vr(n,e,t){return n.includes("j")?function(n,e,t){var a=r["dynCall_"+n];return t&&t.length?a.apply(null,[e].concat(t)):a.call(null,e)}(n,e,t):Q.get(e).apply(null,t)}function zr(r,n){var e,t,a,o=(r=jr(r)).includes("j")?(e=r,t=n,a=[],function(){a.length=arguments.length;for(var r=0;r<arguments.length;r++)a[r]=arguments[r];return Vr(e,t,a)}):Q.get(n);return"function"!=typeof o&&Or("unknown function pointer with signature "+r+": "+n),o}var Gr=void 0;function Yr(r){var n=Cn(r),e=jr(n);return Tn(n),e}function Qr(r,a,c){switch(a){case 0:return c?function(r){return n()[r]}:function(r){return e()[r]};case 1:return c?function(r){return t()[r>>1]}:function(r){return o()[r>>1]};case 2:return c?function(r){return i()[r>>2]}:function(r){return u()[r>>2]};default:throw new TypeError("Unknown integer type: "+r)}}var Jr={};function $r(){return"object"==typeof globalThis?globalThis:Function("return this")()}function Xr(r,n){var e=Cr[r];return void 0===e&&Or(n+" has unknown type "+Yr(r)),e}var Zr={},Kr=[];function rn(r,e,t){if(r<=0||r>n().length||!0&r)return-28;var a=Atomics.wait(i(),r>>2,e,t);if("timed-out"===a)return-73;if("not-equal"===a)return-6;if("ok"===a)return 0;throw"Atomics.wait returned an unexpected value "+a}function nn(r,n){for(var e=arguments.length-2,t=On(),a=e,o=Un(8*a),i=o>>3,u=0;u<e;u++){var s=arguments[2+u];c()[i+u]=s}var f=Sn(r,a,o,n);return Dn(t),f}var en=[];function tn(r){try{return T.grow(r-k.byteLength+65535>>>16),Y(T.buffer),1}catch(r){}}var an={inEventHandler:0,removeAllEventListeners:function(){for(var r=an.eventHandlers.length-1;r>=0;--r)an._removeHandler(r);an.eventHandlers=[],an.deferredCalls=[]},registerRemoveEventListeners:function(){an.removeEventListenersRegistered||(Z.push(an.removeAllEventListeners),an.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(r,n,e){function t(r,n){if(r.length!=n.length)return!1;for(var e in r)if(r[e]!=n[e])return!1;return!0}for(var a in an.deferredCalls){var o=an.deferredCalls[a];if(o.targetFunction==r&&t(o.argsList,e))return}an.deferredCalls.push({targetFunction:r,precedence:n,argsList:e}),an.deferredCalls.sort((function(r,n){return r.precedence<n.precedence}))},removeDeferredCalls:function(r){for(var n=0;n<an.deferredCalls.length;++n)an.deferredCalls[n].targetFunction==r&&(an.deferredCalls.splice(n,1),--n)},canPerformEventHandlerRequests:function(){return an.inEventHandler&&an.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(an.canPerformEventHandlerRequests())for(var r=0;r<an.deferredCalls.length;++r){var n=an.deferredCalls[r];an.deferredCalls.splice(r,1),--r,n.targetFunction.apply(null,n.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:function(r,n){for(var e=0;e<an.eventHandlers.length;++e)an.eventHandlers[e].target!=r||n&&n!=an.eventHandlers[e].eventTypeString||an._removeHandler(e--)},_removeHandler:function(r){var n=an.eventHandlers[r];n.target.removeEventListener(n.eventTypeString,n.eventListenerFunc,n.useCapture),an.eventHandlers.splice(r,1)},registerOrRemoveHandler:function(r){var n=function(n){++an.inEventHandler,an.currentEventHandler=r,an.runDeferredCalls(),r.handlerFunc(n),an.runDeferredCalls(),--an.inEventHandler};if(r.callbackfunc)r.eventListenerFunc=n,r.target.addEventListener(r.eventTypeString,n,r.useCapture),an.eventHandlers.push(r),an.registerRemoveEventListeners();else for(var e=0;e<an.eventHandlers.length;++e)an.eventHandlers[e].target==r.target&&an.eventHandlers[e].eventTypeString==r.eventTypeString&&an._removeHandler(e--)},queueEventHandlerOnThread_iiii:function(r,n,e,t,a){var o=On(),u=Un(12);i()[u>>2]=e,i()[u+4>>2]=t,i()[u+8>>2]=a,Fn(0,r,637534208,n,t,u),Dn(o)},getTargetThreadForEventCallback:function(r){switch(r){case 1:return 0;case 2:return pr.currentProxiedOperationCallerThread;default:return r}},getNodeNameForTarget:function(r){return r?r==window?"#window":r==screen?"#screen":r&&r.nodeName?r.nodeName:"":""},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}};var on=[0,"undefined"!=typeof document?document:0,"undefined"!=typeof window?window:0];function un(r){return function(r){var n;return r=(n=r)>2?U(n):n,on[r]||("undefined"!=typeof document?document.querySelector(r):void 0)}(r)}function cn(r,n,e){var t=un(r);if(!t)return-4;if(t.canvasSharedPtr&&(i()[t.canvasSharedPtr>>2]=n,i()[t.canvasSharedPtr+4>>2]=e),!t.offscreenCanvas&&t.controlTransferredOffscreen)return t.canvasSharedPtr?(function(r,n,e,t){!function(r,n,e,t){var a,o,u,c=On(),s=Un(12),f=0;n&&(o=H(a=n)+1,B(a,u=An(o),o),f=u),i()[s>>2]=f,i()[s+4>>2]=e,i()[s+8>>2]=t,Fn(0,r,657457152,0,f,s),Dn(c)}(r,n=n?U(n):"",e,t)}(i()[t.canvasSharedPtr+8>>2],r,n,e),1):-4;t.offscreenCanvas&&(t=t.offscreenCanvas);var a=!1;if(t.GLctxObject&&t.GLctxObject.GLctx){var o=t.GLctxObject.GLctx.getParameter(2978);a=0===o[0]&&0===o[1]&&o[2]===t.width&&o[3]===t.height}return t.width=n,t.height=e,a&&t.GLctxObject.GLctx.viewport(0,0,n,e),0}function sn(r,n,e){return m?nn(4,1,r,n,e):cn(r,n,e)}var fn,ln={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:{},offscreenCanvases:{},queries:[],stringCache:{},unpackAlignment:4,recordError:function(r){ln.lastError||(ln.lastError=r)},getNewId:function(r){for(var n=ln.counter++,e=r.length;e<n;e++)r[e]=null;return n},getSource:function(r,n,e,t){for(var a="",o=0;o<n;++o){var u=t?i()[t+4*o>>2]:-1;a+=U(i()[e+4*o>>2],u<0?void 0:u)}return a},createContext:function(r,n){r.getContextSafariWebGL2Fixed||(r.getContextSafariWebGL2Fixed=r.getContext,r.getContext=function(n,e){var t=r.getContextSafariWebGL2Fixed(n,e);return"webgl"==n==t instanceof WebGLRenderingContext?t:null});var e=r.getContext("webgl",n);return e?ln.registerContext(e,n):0},registerContext:function(r,n){var e=An(8);i()[e+4>>2]=In();var t={handle:e,attributes:n,version:n.majorVersion,GLctx:r};return r.canvas&&(r.canvas.GLctxObject=t),ln.contexts[e]=t,(void 0===n.enableExtensionsByDefault||n.enableExtensionsByDefault)&&ln.initExtensions(t),e},makeContextCurrent:function(n){return ln.currentContext=ln.contexts[n],r.ctx=fn=ln.currentContext&&ln.currentContext.GLctx,!(n&&!fn)},getContext:function(r){return ln.contexts[r]},deleteContext:function(r){ln.currentContext===ln.contexts[r]&&(ln.currentContext=null),"object"==typeof an&&an.removeAllHandlersOnTarget(ln.contexts[r].GLctx.canvas),ln.contexts[r]&&ln.contexts[r].GLctx.canvas&&(ln.contexts[r].GLctx.canvas.GLctxObject=void 0),Tn(ln.contexts[r].handle),ln.contexts[r]=null},initExtensions:function(r){if(r||(r=ln.currentContext),!r.initExtensionsDone){r.initExtensionsDone=!0;var n,e=r.GLctx;!function(r){var n=r.getExtension("ANGLE_instanced_arrays");n&&(r.vertexAttribDivisor=function(r,e){n.vertexAttribDivisorANGLE(r,e)},r.drawArraysInstanced=function(r,e,t,a){n.drawArraysInstancedANGLE(r,e,t,a)},r.drawElementsInstanced=function(r,e,t,a,o){n.drawElementsInstancedANGLE(r,e,t,a,o)})}(e),function(r){var n=r.getExtension("OES_vertex_array_object");n&&(r.createVertexArray=function(){return n.createVertexArrayOES()},r.deleteVertexArray=function(r){n.deleteVertexArrayOES(r)},r.bindVertexArray=function(r){n.bindVertexArrayOES(r)},r.isVertexArray=function(r){return n.isVertexArrayOES(r)})}(e),function(r){var n=r.getExtension("WEBGL_draw_buffers");n&&(r.drawBuffers=function(r,e){n.drawBuffersWEBGL(r,e)})}(e),e.disjointTimerQueryExt=e.getExtension("EXT_disjoint_timer_query"),(n=e).multiDrawWebgl=n.getExtension("WEBGL_multi_draw"),(e.getSupportedExtensions()||[]).forEach((function(r){r.includes("lose_context")||r.includes("debug")||e.getExtension(r)}))}}},dn=["default","low-power","high-performance"];function pn(r){return m?nn(5,1,r):0}function hn(r,n,e,t){if(m)return nn(6,1,r,n,e,t);var a=mr.getStreamFromFD(r),o=mr.doReadv(a,n,e);return i()[t>>2]=o,0}function vn(r,n,e,t,a){if(m)return nn(7,1,r,n,e,t,a)}function mn(r,n,t,a){if(m)return nn(8,1,r,n,t,a);for(var o=0,u=0;u<t;u++){for(var c=i()[n+8*u>>2],s=i()[n+(8*u+4)>>2],f=0;f<s;f++)mr.printChar(r,e()[c+f]);o+=s}return i()[a>>2]=o,0}function gn(r){if(m)throw"Internal Error! spawnThread() can only ever be called from main application thread!";var n=pr.getNewWorker();if(!n)return 6;if(void 0!==n.pthread)throw"Internal error!";if(!r.pthread_ptr)throw"Internal error, no pthread ptr!";pr.runningWorkers.push(n);for(var e=An(512),t=0;t<128;++t)i()[e+4*t>>2]=0;var a=r.stackBase+r.stackSize,o=pr.pthreads[r.pthread_ptr]={worker:n,stackBase:r.stackBase,stackSize:r.stackSize,allocatedOwnStack:r.allocatedOwnStack,threadInfoStruct:r.pthread_ptr},c=o.threadInfoStruct>>2;Atomics.store(u(),c+16,r.detached),Atomics.store(u(),c+25,e),Atomics.store(u(),c+10,o.threadInfoStruct),Atomics.store(u(),c+20,r.stackSize),Atomics.store(u(),c+19,a),Atomics.store(u(),c+26,r.stackSize),Atomics.store(u(),c+28,a),Atomics.store(u(),c+29,r.detached);var s=Mn()+40;Atomics.store(u(),c+43,s),n.pthread=o;var f={cmd:"run",start_routine:r.startRoutine,arg:r.arg,threadInfoStruct:r.pthread_ptr,stackBase:r.stackBase,stackSize:r.stackSize};return n.runPthread=function(){f.time=performance.now(),n.postMessage(f,r.transferList)},n.loaded&&(n.runPthread(),delete n.runPthread),0}function yn(){if(m){var r=In();if(r&&!Atomics.load(u(),r+56>>2)&&2==Atomics.load(u(),r+0>>2))throw"Canceled!"}}m||pr.initMainThreadBlock(),Pr=r.InternalError=Wr(Error,"InternalError"),function(){for(var r=new Array(256),n=0;n<256;++n)r[n]=String.fromCharCode(n);Ir=r}(),Mr=r.BindingError=Wr(Error,"BindingError"),r.count_emval_handles=function(){for(var r=0,n=5;n<Br.length;++n)void 0!==Br[n]&&++r;return r},r.get_first_emval=function(){for(var r=5;r<Br.length;++r)if(void 0!==Br[r])return Br[r];return null},Gr=r.UnboundTypeError=Wr(Error,"UnboundTypeError");var wn,_n=[null,gr,yr,wr,sn,pn,hn,vn,mn],bn={k:function(r,n,e,t){ar("Assertion failed: "+U(r)+", at: "+[n?U(n):"unknown filename",e,t?U(t):"unknown function"])},C:function(r,n){return vr(r,n)},u:gr,P:yr,R:wr,F:function(r){var n=_r[r];delete _r[r];var e=n.rawConstructor,t=n.rawDestructor,a=n.fields;Fr([r],a.map((function(r){return r.getterReturnType})).concat(a.map((function(r){return r.setterArgumentType}))),(function(r){var o={};return a.forEach((function(n,e){var t=n.fieldName,i=r[e],u=n.getter,c=n.getterContext,s=r[e+a.length],f=n.setter,l=n.setterContext;o[t]={read:function(r){return i.fromWireType(u(c,r))},write:function(r,n){var e=[];f(l,r,s.toWireType(e,n)),br(e)}}})),[{name:n.name,fromWireType:function(r){var n={};for(var e in o)n[e]=o[e].read(r);return t(r),n},toWireType:function(r,n){for(var a in o)if(!(a in n))throw new TypeError('Missing field:  "'+a+'"');var i=e();for(a in o)o[a].write(i,n[a]);return null!==r&&r.push(t,i),i},argPackAdvance:8,readValueFromPointer:Ar,destructorFunction:t}]}))},I:function(r,n,e,t,a){},aa:function(r,e,a,o,u){var c=Rr(a);Dr(r,{name:e=jr(e),fromWireType:function(r){return!!r},toWireType:function(r,n){return n?o:u},argPackAdvance:8,readValueFromPointer:function(r){var o;if(1===a)o=n();else if(2===a)o=t();else{if(4!==a)throw new TypeError("Unknown boolean type size: "+e);o=i()}return this.fromWireType(o[r>>c])},destructorFunction:null})},$:function(r,n){Dr(r,{name:n=jr(n),fromWireType:function(r){var n=Br[r].value;return Hr(r),n},toWireType:function(r,n){return Lr(n)},argPackAdvance:8,readValueFromPointer:Ar,destructorFunction:null})},z:function(r,n,e){var t=Rr(e);Dr(r,{name:n=jr(n),fromWireType:function(r){return r},toWireType:function(r,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+qr(n)+'" to '+this.name);return n},argPackAdvance:8,readValueFromPointer:Nr(n,t),destructorFunction:null})},E:function(n,e,t,a,o,u){var c=function(r,n){for(var e=[],t=0;t<r;t++)e.push(i()[(n>>2)+t]);return e}(e,t);n=jr(n),o=zr(a,o),function(n,e,t){r.hasOwnProperty(n)?((void 0===t||void 0!==r[n].overloadTable&&void 0!==r[n].overloadTable[t])&&Or("Cannot register public name '"+n+"' twice"),function(r,n,e){if(void 0===r[n].overloadTable){var t=r[n];r[n]=function(){return r[n].overloadTable.hasOwnProperty(arguments.length)||Or("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+r[n].overloadTable+")!"),r[n].overloadTable[arguments.length].apply(this,arguments)},r[n].overloadTable=[],r[n].overloadTable[t.argCount]=t}}(r,n,n),r.hasOwnProperty(t)&&Or("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),r[n].overloadTable[t]=e):(r[n]=e,void 0!==t&&(r[n].numArguments=t))}(n,(function(){!function(r,n){var e=[],t={};throw n.forEach((function r(n){t[n]||Cr[n]||(Er[n]?Er[n].forEach(r):(e.push(n),t[n]=!0))})),new Gr(r+": "+e.map(Yr).join([", "]))}("Cannot call "+n+" due to unbound types",c)}),e-1),Fr([],c,(function(t){var a=[t[0],null].concat(t.slice(1));return function(n,e,t){r.hasOwnProperty(n)||Sr("Replacing nonexistant public symbol"),void 0!==r[n].overloadTable&&void 0!==t?r[n].overloadTable[t]=e:(r[n]=e,r[n].argCount=t)}(n,function(r,n,e,t,a){var o=n.length;o<2&&Or("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==n[1]&&null!==e,u=!1,c=1;c<n.length;++c)if(null!==n[c]&&void 0===n[c].destructorFunction){u=!0;break}var s="void"!==n[0].name,f="",l="";for(c=0;c<o-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+kr(r)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+r+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[Or,t,a,br,n[0],n[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<o-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+n[c+2].name+"\n",h.push("argType"+c),v.push(n[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<n.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==n[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+n[c].name+"\n",h.push(m+"_dtor"),v.push(n[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(r,n){if(!(r instanceof Function))throw new TypeError("new_ called with constructor type "+typeof r+" which is not a function");var e=xr(r.name||"unknownFunctionName",(function(){}));e.prototype=r.prototype;var t=new e,a=r.apply(t,n);return a instanceof Object?a:t}(Function,h).apply(null,v)}(n,a,null,o,u),e-1),[]}))},j:function(r,n,e,t,a){n=jr(n),-1===a&&(a=4294967295);var o=Rr(e),i=function(r){return r};if(0===t){var u=32-8*e;i=function(r){return r<<u>>>u}}var c=n.includes("unsigned");Dr(r,{name:n,fromWireType:i,toWireType:function(r,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+qr(e)+'" to '+this.name);if(e<t||e>a)throw new TypeError('Passing a number "'+qr(e)+'" from JS side to C/C++ side to an argument of type "'+n+'", which is outside the valid range ['+t+", "+a+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:Qr(n,o,0!==t),destructorFunction:null})},g:function(r,n,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function a(r){r>>=2;var n=u(),e=n[r],a=n[r+1];return new t(k,a,e)}Dr(r,{name:e=jr(e),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},A:function(r,n){var t="std::string"===(n=jr(n));Dr(r,{name:n,fromWireType:function(r){var n,a=u()[r>>2];if(t)for(var o=r+4,i=0;i<=a;++i){var c=r+4+i;if(i==a||0==e()[c]){var s=U(o,c-o);void 0===n?n=s:(n+=String.fromCharCode(0),n+=s),o=c+1}}else{var f=new Array(a);for(i=0;i<a;++i)f[i]=String.fromCharCode(e()[r+4+i]);n=f.join("")}return Tn(r),n},toWireType:function(r,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var a="string"==typeof n;a||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||Or("Cannot pass non-string to std::string");var o=(t&&a?function(){return H(n)}:function(){return n.length})(),i=An(4+o+1);if(u()[i>>2]=o,t&&a)B(n,i+4,o+1);else if(a)for(var c=0;c<o;++c){var s=n.charCodeAt(c);s>255&&(Tn(i),Or("String has UTF-16 code units that do not fit in 8 bits")),e()[i+4+c]=s}else for(c=0;c<o;++c)e()[i+4+c]=n[c];return null!==r&&r.push(Tn,i),i},argPackAdvance:8,readValueFromPointer:Ar,destructorFunction:function(r){Tn(r)}})},r:function(r,n,e){var t,a,i,c,s;e=jr(e),2===n?(t=L,a=q,c=N,i=function(){return o()},s=1):4===n&&(t=V,a=z,c=G,i=function(){return u()},s=2),Dr(r,{name:e,fromWireType:function(r){for(var e,a=u()[r>>2],o=i(),c=r+4,f=0;f<=a;++f){var l=r+4+f*n;if(f==a||0==o[l>>s]){var d=t(c,l-c);void 0===e?e=d:(e+=String.fromCharCode(0),e+=d),c=l+n}}return Tn(r),e},toWireType:function(r,t){"string"!=typeof t&&Or("Cannot pass non-string to C++ string type "+e);var o=c(t),i=An(4+o+n);return u()[i>>2]=o>>s,a(t,i+4,o+n),null!==r&&r.push(Tn,i),i},argPackAdvance:8,readValueFromPointer:Ar,destructorFunction:function(r){Tn(r)}})},K:function(r,n,e,t,a,o){_r[r]={name:jr(n),rawConstructor:zr(e,t),rawDestructor:zr(a,o),fields:[]}},h:function(r,n,e,t,a,o,i,u,c,s){_r[r].fields.push({fieldName:jr(n),getterReturnType:e,getter:zr(t,a),getterContext:o,setterArgumentType:i,setter:zr(u,c),setterContext:s})},ba:function(r,n){Dr(r,{isVoid:!0,name:n=jr(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(r,n){}})},Z:function(r,n){if(r==n)postMessage({cmd:"processQueuedMainThreadWork"});else if(m)postMessage({targetThread:r,cmd:"processThreadQueue"});else{var e=pr.pthreads[r],t=e&&e.worker;if(!t)return;t.postMessage({cmd:"processThreadQueue"})}return 1},o:Hr,_:function(r){return 0===r?Lr($r()):(r=void 0===(e=Jr[n=r])?jr(n):e,Lr($r()[r]));var n,e},D:function(r){r>4&&(Br[r].refcount+=1)},Q:function(n,e,t,a){n=function(r){return r||Or("Cannot use deleted val. handle = "+r),Br[r].value}(n);var o=Zr[e];return o||(o=function(n){for(var e="",t=0;t<n;++t)e+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+n+"(constructor, argTypes, args) {\n";for(t=0;t<n;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(Xr,r,Lr)}(e),Zr[e]=o),o(n,t,a)},i:function(){ar()},y:function(r,n,t){var a=function(r,n){var t;for(Kr.length=0,n>>=2;t=e()[r++];){var a=t<105;a&&1&n&&n++,Kr.push(a?c()[n++>>1]:i()[n]),++n}return Kr}(n,t);return cr[r].apply(null,a)},V:function(){},x:function(r,n){},l:rn,m:fr,p:dr,e:function(r,n){return function(r,n){throw Hn(r,n||1),"longjmp"}(r,n)},M:function(r,n,t){e().copyWithin(r,n,n+t)},ea:function(){return navigator.hardwareConcurrency},W:function(r,n,e){en.length=n;for(var t=e>>3,a=0;a<n;a++)en[a]=c()[t+a];return(r<0?cr[-r-1]:_n[r]).apply(null,en)},N:function(r){var n=e().length;if((r>>>=0)<=n)return!1;var t,a=2147483648;if(r>a)return!1;for(var o=1;o<=4;o*=2){var i=n*(1+.2/o);if(i=Math.min(i,r+100663296),tn(Math.min(a,((t=Math.max(r,i))%65536>0&&(t+=65536-t%65536),t))))return!0}return!1},X:function(r,n,e){return un(r)?cn(r,n,e):sn(r,n,e)},w:function(r){},Y:function(r,n){return e=r,t=n>>2,a=i()[t+6],o={alpha:!!i()[t+0],depth:!!i()[t+1],stencil:!!i()[t+2],antialias:!!i()[t+3],premultipliedAlpha:!!i()[t+4],preserveDrawingBuffer:!!i()[t+5],powerPreference:dn[a],failIfMajorPerformanceCaveat:!!i()[t+7],majorVersion:i()[t+8],minorVersion:i()[t+9],enableExtensionsByDefault:i()[t+10],explicitSwapControl:i()[t+11],proxyContextToMainThread:i()[t+12],renderViaOffscreenBackBuffer:i()[t+13]},(u=un(e))?o.explicitSwapControl?0:ln.createContext(u,o):0;var e,t,a,o,u},v:pn,O:hn,H:vn,S:mn,c:function(){return A},L:function(){pr.initRuntime()},q:function(r,n,e,t,a){var o=On();try{return Q.get(r)(n,e,t,a)}catch(r){if(Dn(o),r!==r+0&&"longjmp"!==r)throw r;Hn(1,0)}},s:function(r,n,e,t,a,o,i,u,c){var s=On();try{return Q.get(r)(n,e,t,a,o,i,u,c)}catch(r){if(Dn(s),r!==r+0&&"longjmp"!==r)throw r;Hn(1,0)}},t:function(r,n,e,t,a,o,i,u,c,s){var f=On();try{return Q.get(r)(n,e,t,a,o,i,u,c,s)}catch(r){if(Dn(f),r!==r+0&&"longjmp"!==r)throw r;Hn(1,0)}},J:function(r,n,e,t,a,o,i,u,c,s,f,l){var d=On();try{return Q.get(r)(n,e,t,a,o,i,u,c,s,f,l)}catch(r){if(Dn(d),r!==r+0&&"longjmp"!==r)throw r;Hn(1,0)}},G:function(r,n,e,t,a,o){var i=On();try{return qn(r,n,e,t,a,o)}catch(r){if(Dn(i),r!==r+0&&"longjmp"!==r)throw r;Hn(1,0)}},n:function(r,n){var e=On();try{Q.get(r)(n)}catch(r){if(Dn(e),r!==r+0&&"longjmp"!==r)throw r;Hn(1,0)}},f:function(r,n,e){var t=On();try{Q.get(r)(n,e)}catch(r){if(Dn(t),r!==r+0&&"longjmp"!==r)throw r;Hn(1,0)}},d:function(r,n,e,t,a){var o=On();try{Q.get(r)(n,e,t,a)}catch(r){if(Dn(o),r!==r+0&&"longjmp"!==r)throw r;Hn(1,0)}},a:T||r.wasmMemory,T:function(r){var n=pr.threadExitHandlers.pop();r&&n()},U:vr,B:function(r,n,e,t){if("undefined"==typeof SharedArrayBuffer)return _("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;if(!r)return _("pthread_create called with a null thread pointer!"),28;var a=[];if(m&&0===a.length)return Wn(687865856,r,n,e,t);var o=0,c=0,s=0;n&&-1!=n?(o=i()[n>>2],o+=81920,c=i()[n+8>>2],s=0!==i()[n+12>>2]):o=2097152;var f=0==c;f?c=Ln(16,o):O((c-=o)>0);for(var l=An(228),d=0;d<57;++d)u()[(l>>2)+d]=0;i()[r>>2]=l,i()[l+12>>2]=l;var p=l+152;i()[p>>2]=p;var h={stackBase:c,stackSize:o,allocatedOwnStack:f,detached:s,startRoutine:e,pthread_ptr:l,arg:t,transferList:a};return m?(h.cmd="spawnThread",postMessage(h,a),0):gn(h)},ca:function(r,n){return function(r,n,e){if(!r)return _("pthread_join attempted on a null thread pointer!"),71;if(m&&In()==r)return _("PThread "+r+" is attempting to join to itself!"),16;if(!m&&kn()==r)return _("Main thread "+r+" is attempting to join to itself!"),16;if(i()[r+12>>2]!==r)return _("pthread_join attempted on thread "+r+", which does not point to a valid thread, or does not exist anymore!"),71;if(Atomics.load(u(),r+64>>2))return _("Attempted to join thread "+r+", which was already detached!"),28;for(;;){var t=Atomics.load(u(),r+0>>2);if(1==t){var a=Atomics.load(u(),r+4>>2);return n&&(i()[n>>2]=a),Atomics.store(u(),r+64>>2,1),m?postMessage({cmd:"cleanupThread",thread:r}):lr(r),0}0,yn(),m||Pn(),rn(r+0,t,m?100:1)}}(r,n)},b:function(r){A=r},da:function(r){var n=Date.now()/1e3|0;return r&&(i()[r>>2]=n),n}},An=(function(){var n={a:bn};function e(n,e){var t,a=n.exports;if(r.asm=a,Q=r.asm.ja,t=r.asm.fa,X.unshift(t),pr.tlsInitFunctions.push(r.asm.ia),C=e,!m){var o=pr.unusedWorkers.length;pr.unusedWorkers.forEach((function(n){pr.loadWasmModuleToWorker(n,(function(){--o||function(n){if(nr--,r.monitorRunDependencies&&r.monitorRunDependencies(nr),0==nr&&(null!==er&&(clearInterval(er),er=null),tr)){var e=tr;tr=null,e()}}()}))}))}}function t(r){e(r.instance,r.module)}function a(r){return(b||"function"!=typeof fetch?Promise.resolve().then((function(){return ur(ir)})):fetch(ir,{credentials:"same-origin"}).then((function(r){if(!r.ok)throw"failed to load wasm binary file at '"+ir+"'";return r.arrayBuffer()})).catch((function(){return ur(ir)}))).then((function(r){return WebAssembly.instantiate(r,n)})).then(r,(function(r){_("failed to asynchronously prepare wasm: "+r),ar(r)}))}if(m||(O(!m,"addRunDependency cannot be used in a pthread worker"),nr++,r.monitorRunDependencies&&r.monitorRunDependencies(nr)),r.instantiateWasm)try{return r.instantiateWasm(n,e)}catch(r){return _("Module.instantiateWasm callback failed with error: "+r),!1}(b||"function"!=typeof WebAssembly.instantiateStreaming||or(ir)||"function"!=typeof fetch?a(t):fetch(ir,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,n).then(t,(function(r){return _("wasm streaming compile failed: "+r),_("falling back to ArrayBuffer instantiation"),a(t)}))}))).catch(f)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.fa).apply(null,arguments)},r._malloc=function(){return(An=r._malloc=r.asm.ga).apply(null,arguments)}),Tn=r._free=function(){return(Tn=r._free=r.asm.ha).apply(null,arguments)},Cn=(r._emscripten_tls_init=function(){return(r._emscripten_tls_init=r.asm.ia).apply(null,arguments)},r.___getTypeName=function(){return(Cn=r.___getTypeName=r.asm.ka).apply(null,arguments)}),En=(r.___embind_register_native_and_builtin_types=function(){return(r.___embind_register_native_and_builtin_types=r.asm.la).apply(null,arguments)},r._emscripten_current_thread_process_queued_calls=function(){return(r._emscripten_current_thread_process_queued_calls=r.asm.ma).apply(null,arguments)},r._emscripten_register_main_browser_thread_id=function(){return(En=r._emscripten_register_main_browser_thread_id=r.asm.na).apply(null,arguments)}),kn=r._emscripten_main_browser_thread_id=function(){return(kn=r._emscripten_main_browser_thread_id=r.asm.oa).apply(null,arguments)},xn=r.__emscripten_do_dispatch_to_thread=function(){return(xn=r.__emscripten_do_dispatch_to_thread=r.asm.pa).apply(null,arguments)},Wn=r._emscripten_sync_run_in_main_thread_4=function(){return(Wn=r._emscripten_sync_run_in_main_thread_4=r.asm.qa).apply(null,arguments)},Pn=r._emscripten_main_thread_process_queued_calls=function(){return(Pn=r._emscripten_main_thread_process_queued_calls=r.asm.ra).apply(null,arguments)},Sn=r._emscripten_run_in_main_runtime_thread_js=function(){return(Sn=r._emscripten_run_in_main_runtime_thread_js=r.asm.sa).apply(null,arguments)},Fn=r.__emscripten_call_on_thread=function(){return(Fn=r.__emscripten_call_on_thread=r.asm.ta).apply(null,arguments)},Rn=r.__emscripten_thread_init=function(){return(Rn=r.__emscripten_thread_init=r.asm.ua).apply(null,arguments)},In=r._pthread_self=function(){return(In=r._pthread_self=r.asm.va).apply(null,arguments)},jn=r.___pthread_tsd_run_dtors=function(){return(jn=r.___pthread_tsd_run_dtors=r.asm.wa).apply(null,arguments)},Mn=r._emscripten_get_global_libc=function(){return(Mn=r._emscripten_get_global_libc=r.asm.xa).apply(null,arguments)},On=r.stackSave=function(){return(On=r.stackSave=r.asm.ya).apply(null,arguments)},Dn=r.stackRestore=function(){return(Dn=r.stackRestore=r.asm.za).apply(null,arguments)},Un=r.stackAlloc=function(){return(Un=r.stackAlloc=r.asm.Aa).apply(null,arguments)},Bn=r._emscripten_stack_set_limits=function(){return(Bn=r._emscripten_stack_set_limits=r.asm.Ba).apply(null,arguments)},Hn=r._setThrew=function(){return(Hn=r._setThrew=r.asm.Ca).apply(null,arguments)},Ln=r._memalign=function(){return(Ln=r._memalign=r.asm.Da).apply(null,arguments)},qn=(r.dynCall_jiiiiiiiii=function(){return(r.dynCall_jiiiiiiiii=r.asm.Ea).apply(null,arguments)},r.dynCall_ijiii=function(){return(qn=r.dynCall_ijiii=r.asm.Fa).apply(null,arguments)}),Nn=(r.dynCall_jiji=function(){return(r.dynCall_jiji=r.asm.Ga).apply(null,arguments)},r.dynCall_jiiiiiiii=function(){return(r.dynCall_jiiiiiiii=r.asm.Ha).apply(null,arguments)},r.dynCall_jiiiiii=function(){return(r.dynCall_jiiiiii=r.asm.Ia).apply(null,arguments)},r.dynCall_jiiiii=function(){return(r.dynCall_jiiiii=r.asm.Ja).apply(null,arguments)},r.dynCall_iiijii=function(){return(r.dynCall_iiijii=r.asm.Ka).apply(null,arguments)},r.__emscripten_allow_main_runtime_queued_calls=600816),Vn=r.__emscripten_main_thread_futex=897300;function zn(r){this.name="ExitStatus",this.message="Program terminated with exit("+r+")",this.status=r}function Gn(n){if(n=n||h,!(nr>0)){if(m)return s(r),rr(),void postMessage({cmd:"loaded"});!function(){if(!m){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)n=r.preRun.shift(),$.unshift(n);var n;sr($)}}(),nr>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),e()}),1)):e())}function e(){wn||(wn=!0,r.calledRun=!0,M||(rr(),s(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(!m){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)n=r.postRun.shift(),K.unshift(n);var n;sr(K)}}()))}}if(r.PThread=pr,r.PThread=pr,r.wasmMemory=T,r.ExitStatus=zn,tr=function r(){wn||Gn(),wn||(tr=r)},r.run=Gn,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return m&&(E=!1,pr.initWorker()),Gn(),r.ready}),vr=function(r){var n,e;(r=void 0!==(r=r||{})?r:{}).ready=new Promise((function(r,t){n=r,e=t}));var t,o={};for(t in r)r.hasOwnProperty(t)&&(o[t]=r[t]);var i,u=[],c="";c=self.location.href,c=0!==(c="file:///D:/altri/squoosh-web/squoosh-browser/codecs/avif/enc/avif_enc.js").indexOf("blob:")?c.substr(0,c.lastIndexOf("/")+1):"",i=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)};var s=r.print||console.log.bind(console),f=r.printErr||console.warn.bind(console);for(t in o)o.hasOwnProperty(t)&&(r[t]=o[t]);o=null,r.arguments&&(u=r.arguments),r.thisProgram&&r.thisProgram,r.quit&&r.quit;var l,d,p=0;r.wasmBinary&&(l=r.wasmBinary),r.noExitRuntime,"object"!=typeof WebAssembly&&q("no native wasm support detected");var h=!1,v=new TextDecoder("utf8");function m(r,n){if(!r)return"";for(var e=r+n,t=r;!(t>=e)&&w[t];)++t;return v.decode(w.subarray(r,t))}var g,y,w,_,b,A,T,C,E,k=new TextDecoder("utf-16le");function x(r,n){for(var e=r,t=e>>1,a=t+n/2;!(t>=a)&&b[t];)++t;return e=t<<1,k.decode(w.subarray(r,e))}function W(r,n,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=n,a=(e-=2)<2*r.length?e/2:r.length,o=0;o<a;++o){var i=r.charCodeAt(o);_[n>>1]=i,n+=2}return _[n>>1]=0,n-t}function P(r){return 2*r.length}function S(r,n){for(var e=0,t="";!(e>=n/4);){var a=A[r+4*e>>2];if(0==a)break;if(++e,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function F(r,n,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=n,a=t+e-4,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),A[n>>2]=i,(n+=4)+4>a)break}return A[n>>2]=0,n-t}function R(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&++e,n+=4}return n}function I(n){g=n,r.HEAP8=y=new Int8Array(n),r.HEAP16=_=new Int16Array(n),r.HEAP32=A=new Int32Array(n),r.HEAPU8=w=new Uint8Array(n),r.HEAPU16=b=new Uint16Array(n),r.HEAPU32=T=new Uint32Array(n),r.HEAPF32=C=new Float32Array(n),r.HEAPF64=E=new Float64Array(n)}r.INITIAL_MEMORY;var j,M,O=[],D=[],U=[],B=0,H=null,L=null;function q(n){r.onAbort&&r.onAbort(n),f(n+=""),h=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(n);throw e(t),t}function N(r){return r.startsWith("data:application/octet-stream;base64,")}if(r.preloadedImages={},r.preloadedAudios={},r.locateFile)N(V="avif_enc.wasm")||(M=V,V=r.locateFile?r.locateFile(M,c):c+M);else var V=new URL(a(199),a.b).toString();function z(r){try{if(r==V&&l)return new Uint8Array(l);if(i)return i(r);throw"both async and sync fetching of the wasm failed"}catch(r){q(r)}}function G(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?j.get(t)():j.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(r)}}var Y={mappings:{},buffers:[null,[],[]],printChar:function(r,n){var e=Y.buffers[r];0===n||10===n?((1===r?s:f)(function(r,n,e){for(var t=0;r[t]&&!(t>=NaN);)++t;return v.decode(r.subarray?r.subarray(0,t):new Uint8Array(r.slice(0,t)))}(e)),e.length=0):e.push(n)},varargs:void 0,get:function(){return Y.varargs+=4,A[Y.varargs-4>>2]},getStr:function(r){return m(r)},get64:function(r,n){return r}},Q={};function J(r){for(;r.length;){var n=r.pop();r.pop()(n)}}function $(r){return this.fromWireType(T[r>>2])}var X={},Z={},K={};function rr(r){if(void 0===r)return"_unknown";var n=(r=r.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return n>=48&&n<=57?"_"+r:r}function nr(r,n){return r=rr(r),new Function("body","return function "+r+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(n)}function er(r,n){var e=nr(n,(function(r){this.name=n,this.message=r;var e=new Error(r).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var tr=void 0;function ar(r){throw new tr(r)}function or(r,n,e){function t(n){var t=e(n);t.length!==r.length&&ar("Mismatched type converter count");for(var a=0;a<r.length;++a)lr(r[a],t[a])}r.forEach((function(r){K[r]=n}));var a=new Array(n.length),o=[],i=0;n.forEach((function(r,n){Z.hasOwnProperty(r)?a[n]=Z[r]:(o.push(r),X.hasOwnProperty(r)||(X[r]=[]),X[r].push((function(){a[n]=Z[r],++i===o.length&&t(a)})))})),0===o.length&&t(a)}function ir(r){switch(r){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+r)}}var ur=void 0;function cr(r){for(var n="",e=r;w[e];)n+=ur[w[e++]];return n}var sr=void 0;function fr(r){throw new sr(r)}function lr(r,n,e){if(e=e||{},!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=n.name;if(r||fr('type "'+t+'" must have a positive integer typeid pointer'),Z.hasOwnProperty(r)){if(e.ignoreDuplicateRegistrations)return;fr("Cannot register type '"+t+"' twice")}if(Z[r]=n,delete K[r],X.hasOwnProperty(r)){var a=X[r];delete X[r],a.forEach((function(r){r()}))}}var dr=[],pr=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function hr(r){r>4&&0==--pr[r].refcount&&(pr[r]=void 0,dr.push(r))}function vr(r){switch(r){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=dr.length?dr.pop():pr.length;return pr[n]={refcount:1,value:r},n}}function mr(r){if(null===r)return"null";var n=typeof r;return"object"===n||"array"===n||"function"===n?r.toString():""+r}function gr(r,n){switch(n){case 2:return function(r){return this.fromWireType(C[r>>2])};case 3:return function(r){return this.fromWireType(E[r>>3])};default:throw new TypeError("Unknown float type: "+r)}}function yr(n,e,t){return n.includes("j")?function(n,e,t){var a=r["dynCall_"+n];return t&&t.length?a.apply(null,[e].concat(t)):a.call(null,e)}(n,e,t):j.get(e).apply(null,t)}function wr(r,n){var e,t,a,o=(r=cr(r)).includes("j")?(e=r,t=n,a=[],function(){a.length=arguments.length;for(var r=0;r<arguments.length;r++)a[r]=arguments[r];return yr(e,t,a)}):j.get(n);return"function"!=typeof o&&fr("unknown function pointer with signature "+r+": "+n),o}var _r=void 0;function br(r){var n=Rr(r),e=cr(n);return Fr(n),e}function Ar(r,n,e){switch(n){case 0:return e?function(r){return y[r]}:function(r){return w[r]};case 1:return e?function(r){return _[r>>1]}:function(r){return b[r>>1]};case 2:return e?function(r){return A[r>>2]}:function(r){return T[r>>2]};default:throw new TypeError("Unknown integer type: "+r)}}var Tr={};function Cr(){return"object"==typeof globalThis?globalThis:Function("return this")()}function Er(r,n){var e=Z[r];return void 0===e&&fr(n+" has unknown type "+br(r)),e}var kr={};function xr(r){try{return d.grow(r-g.byteLength+65535>>>16),I(d.buffer),1}catch(r){}}tr=r.InternalError=er(Error,"InternalError"),function(){for(var r=new Array(256),n=0;n<256;++n)r[n]=String.fromCharCode(n);ur=r}(),sr=r.BindingError=er(Error,"BindingError"),r.count_emval_handles=function(){for(var r=0,n=5;n<pr.length;++n)void 0!==pr[n]&&++r;return r},r.get_first_emval=function(){for(var r=5;r<pr.length;++r)if(void 0!==pr[r])return pr[r];return null},_r=r.UnboundTypeError=er(Error,"UnboundTypeError");var Wr,Pr={O:function(r,n){},r:function(r,n,e){return Y.varargs=e,0},G:function(r,n,e){return Y.varargs=e,0},H:function(r,n,e){Y.varargs=e},x:function(r){var n=Q[r];delete Q[r];var e=n.rawConstructor,t=n.rawDestructor,a=n.fields;or([r],a.map((function(r){return r.getterReturnType})).concat(a.map((function(r){return r.setterArgumentType}))),(function(r){var o={};return a.forEach((function(n,e){var t=n.fieldName,i=r[e],u=n.getter,c=n.getterContext,s=r[e+a.length],f=n.setter,l=n.setterContext;o[t]={read:function(r){return i.fromWireType(u(c,r))},write:function(r,n){var e=[];f(l,r,s.toWireType(e,n)),J(e)}}})),[{name:n.name,fromWireType:function(r){var n={};for(var e in o)n[e]=o[e].read(r);return t(r),n},toWireType:function(r,n){for(var a in o)if(!(a in n))throw new TypeError('Missing field:  "'+a+'"');var i=e();for(a in o)o[a].write(i,n[a]);return null!==r&&r.push(t,i),i},argPackAdvance:8,readValueFromPointer:$,destructorFunction:t}]}))},B:function(r,n,e,t,a){},K:function(r,n,e,t,a){var o=ir(e);lr(r,{name:n=cr(n),fromWireType:function(r){return!!r},toWireType:function(r,n){return n?t:a},argPackAdvance:8,readValueFromPointer:function(r){var t;if(1===e)t=y;else if(2===e)t=_;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+n);t=A}return this.fromWireType(t[r>>o])},destructorFunction:null})},J:function(r,n){lr(r,{name:n=cr(n),fromWireType:function(r){var n=pr[r].value;return hr(r),n},toWireType:function(r,n){return vr(n)},argPackAdvance:8,readValueFromPointer:$,destructorFunction:null})},t:function(r,n,e){var t=ir(e);lr(r,{name:n=cr(n),fromWireType:function(r){return r},toWireType:function(r,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+mr(n)+'" to '+this.name);return n},argPackAdvance:8,readValueFromPointer:gr(n,t),destructorFunction:null})},w:function(n,e,t,a,o,i){var u=function(r,n){for(var e=[],t=0;t<r;t++)e.push(A[(n>>2)+t]);return e}(e,t);n=cr(n),o=wr(a,o),function(n,e,t){r.hasOwnProperty(n)?((void 0===t||void 0!==r[n].overloadTable&&void 0!==r[n].overloadTable[t])&&fr("Cannot register public name '"+n+"' twice"),function(r,n,e){if(void 0===r[n].overloadTable){var t=r[n];r[n]=function(){return r[n].overloadTable.hasOwnProperty(arguments.length)||fr("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+r[n].overloadTable+")!"),r[n].overloadTable[arguments.length].apply(this,arguments)},r[n].overloadTable=[],r[n].overloadTable[t.argCount]=t}}(r,n,n),r.hasOwnProperty(t)&&fr("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),r[n].overloadTable[t]=e):(r[n]=e,void 0!==t&&(r[n].numArguments=t))}(n,(function(){!function(r,n){var e=[],t={};throw n.forEach((function r(n){t[n]||Z[n]||(K[n]?K[n].forEach(r):(e.push(n),t[n]=!0))})),new _r(r+": "+e.map(br).join([", "]))}("Cannot call "+n+" due to unbound types",u)}),e-1),or([],u,(function(t){var a=[t[0],null].concat(t.slice(1));return function(n,e,t){r.hasOwnProperty(n)||ar("Replacing nonexistant public symbol"),void 0!==r[n].overloadTable&&void 0!==t?r[n].overloadTable[t]=e:(r[n]=e,r[n].argCount=t)}(n,function(r,n,e,t,a){var o=n.length;o<2&&fr("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==n[1]&&null!==e,u=!1,c=1;c<n.length;++c)if(null!==n[c]&&void 0===n[c].destructorFunction){u=!0;break}var s="void"!==n[0].name,f="",l="";for(c=0;c<o-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+rr(r)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+r+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[fr,t,a,J,n[0],n[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<o-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+n[c+2].name+"\n",h.push("argType"+c),v.push(n[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<n.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==n[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+n[c].name+"\n",h.push(m+"_dtor"),v.push(n[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(r,n){if(!(r instanceof Function))throw new TypeError("new_ called with constructor type "+typeof r+" which is not a function");var e=nr(r.name||"unknownFunctionName",(function(){}));e.prototype=r.prototype;var t=new e,a=r.apply(t,n);return a instanceof Object?a:t}(Function,h).apply(null,v)}(n,a,null,o,i),e-1),[]}))},i:function(r,n,e,t,a){n=cr(n),-1===a&&(a=4294967295);var o=ir(e),i=function(r){return r};if(0===t){var u=32-8*e;i=function(r){return r<<u>>>u}}var c=n.includes("unsigned");lr(r,{name:n,fromWireType:i,toWireType:function(r,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+mr(e)+'" to '+this.name);if(e<t||e>a)throw new TypeError('Passing a number "'+mr(e)+'" from JS side to C/C++ side to an argument of type "'+n+'", which is outside the valid range ['+t+", "+a+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:Ar(n,o,0!==t),destructorFunction:null})},e:function(r,n,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function a(r){var n=T,e=n[r>>=2],a=n[r+1];return new t(g,a,e)}lr(r,{name:e=cr(e),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},u:function(r,n){var e="std::string"===(n=cr(n));lr(r,{name:n,fromWireType:function(r){var n,t=T[r>>2];if(e)for(var a=r+4,o=0;o<=t;++o){var i=r+4+o;if(o==t||0==w[i]){var u=m(a,i-a);void 0===n?n=u:(n+=String.fromCharCode(0),n+=u),a=i+1}}else{var c=new Array(t);for(o=0;o<t;++o)c[o]=String.fromCharCode(w[r+4+o]);n=c.join("")}return Fr(r),n},toWireType:function(r,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var t="string"==typeof n;t||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||fr("Cannot pass non-string to std::string");var a=(e&&t?function(){return function(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&r.charCodeAt(++e)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n}(n)}:function(){return n.length})(),o=Sr(4+a+1);if(T[o>>2]=a,e&&t)!function(r,n,e,t){if(!(t>0))return 0;for(var a=e+t-1,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),i<=127){if(e>=a)break;n[e++]=i}else if(i<=2047){if(e+1>=a)break;n[e++]=192|i>>6,n[e++]=128|63&i}else if(i<=65535){if(e+2>=a)break;n[e++]=224|i>>12,n[e++]=128|i>>6&63,n[e++]=128|63&i}else{if(e+3>=a)break;n[e++]=240|i>>18,n[e++]=128|i>>12&63,n[e++]=128|i>>6&63,n[e++]=128|63&i}}n[e]=0}(n,w,o+4,a+1);else if(t)for(var i=0;i<a;++i){var u=n.charCodeAt(i);u>255&&(Fr(o),fr("String has UTF-16 code units that do not fit in 8 bits")),w[o+4+i]=u}else for(i=0;i<a;++i)w[o+4+i]=n[i];return null!==r&&r.push(Fr,o),o},argPackAdvance:8,readValueFromPointer:$,destructorFunction:function(r){Fr(r)}})},o:function(r,n,e){var t,a,o,i,u;e=cr(e),2===n?(t=x,a=W,i=P,o=function(){return b},u=1):4===n&&(t=S,a=F,i=R,o=function(){return T},u=2),lr(r,{name:e,fromWireType:function(r){for(var e,a=T[r>>2],i=o(),c=r+4,s=0;s<=a;++s){var f=r+4+s*n;if(s==a||0==i[f>>u]){var l=t(c,f-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=f+n}}return Fr(r),e},toWireType:function(r,t){"string"!=typeof t&&fr("Cannot pass non-string to C++ string type "+e);var o=i(t),c=Sr(4+o+n);return T[c>>2]=o>>u,a(t,c+4,o+n),null!==r&&r.push(Fr,c),c},argPackAdvance:8,readValueFromPointer:$,destructorFunction:function(r){Fr(r)}})},z:function(r,n,e,t,a,o){Q[r]={name:cr(n),rawConstructor:wr(e,t),rawDestructor:wr(a,o),fields:[]}},g:function(r,n,e,t,a,o,i,u,c,s){Q[r].fields.push({fieldName:cr(n),getterReturnType:e,getter:wr(t,a),getterContext:o,setterArgumentType:i,setter:wr(u,c),setterContext:s})},L:function(r,n){lr(r,{isVoid:!0,name:n=cr(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(r,n){}})},j:hr,N:function(r){return 0===r?vr(Cr()):(r=void 0===(e=Tr[n=r])?cr(n):e,vr(Cr()[r]));var n,e},v:function(r){r>4&&(pr[r].refcount+=1)},D:function(n,e,t,a){n=function(r){return r||fr("Cannot use deleted val. handle = "+r),pr[r].value}(n);var o=kr[e];return o||(o=function(n){for(var e="",t=0;t<n;++t)e+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+n+"(constructor, argTypes, args) {\n";for(t=0;t<n;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(Er,r,vr)}(e),kr[e]=o),o(n,t,a)},f:function(){q()},d:function(r,n){return function(r,n){throw Mr(r,n||1),"longjmp"}(r,n)},E:function(r,n,e){w.copyWithin(r,n,n+e)},n:function(r){var n,e=w.length,t=2147483648;if((r>>>=0)>t)return!1;for(var a=1;a<=4;a*=2){var o=e*(1+.2/a);if(o=Math.min(o,r+100663296),xr(Math.min(t,((n=Math.max(r,o))%65536>0&&(n+=65536-n%65536),n))))return!0}return!1},s:function(r){return 0},F:function(r,n,e,t){var a=Y.getStreamFromFD(r),o=Y.doReadv(a,n,e);return A[t>>2]=o,0},A:function(r,n,e,t,a){},I:function(r,n,e,t){for(var a=0,o=0;o<e;o++){for(var i=A[n+8*o>>2],u=A[n+(8*o+4)>>2],c=0;c<u;c++)Y.printChar(r,w[i+c]);a+=u}return A[t>>2]=a,0},b:function(){return p},l:function(r,n,e,t,a){var o=Ir();try{return j.get(r)(n,e,t,a)}catch(r){if(jr(o),r!==r+0&&"longjmp"!==r)throw r;Mr(1,0)}},p:function(r,n,e,t,a,o,i,u,c){var s=Ir();try{return j.get(r)(n,e,t,a,o,i,u,c)}catch(r){if(jr(s),r!==r+0&&"longjmp"!==r)throw r;Mr(1,0)}},q:function(r,n,e,t,a,o,i,u,c,s){var f=Ir();try{return j.get(r)(n,e,t,a,o,i,u,c,s)}catch(r){if(jr(f),r!==r+0&&"longjmp"!==r)throw r;Mr(1,0)}},C:function(r,n,e,t,a,o,i,u,c,s,f,l){var d=Ir();try{return j.get(r)(n,e,t,a,o,i,u,c,s,f,l)}catch(r){if(jr(d),r!==r+0&&"longjmp"!==r)throw r;Mr(1,0)}},y:function(r,n,e,t,a,o){var i=Ir();try{return Or(r,n,e,t,a,o)}catch(r){if(jr(i),r!==r+0&&"longjmp"!==r)throw r;Mr(1,0)}},m:function(r,n){var e=Ir();try{j.get(r)(n)}catch(r){if(jr(e),r!==r+0&&"longjmp"!==r)throw r;Mr(1,0)}},h:function(r,n,e){var t=Ir();try{j.get(r)(n,e)}catch(r){if(jr(t),r!==r+0&&"longjmp"!==r)throw r;Mr(1,0)}},c:function(r,n,e,t,a){var o=Ir();try{j.get(r)(n,e,t,a)}catch(r){if(jr(o),r!==r+0&&"longjmp"!==r)throw r;Mr(1,0)}},k:function(r,n,e,t,a,o,i,u,c,s,f){var l=Ir();try{j.get(r)(n,e,t,a,o,i,u,c,s,f)}catch(r){if(jr(l),r!==r+0&&"longjmp"!==r)throw r;Mr(1,0)}},a:function(r){p=r},M:function(r){var n=Date.now()/1e3|0;return r&&(A[r>>2]=n),n}},Sr=(function(){var n={a:Pr};function t(n,e){var t,a=n.exports;r.asm=a,I((d=r.asm.P).buffer),j=r.asm.Y,t=r.asm.Q,D.unshift(t),function(n){if(B--,r.monitorRunDependencies&&r.monitorRunDependencies(B),0==B&&(null!==H&&(clearInterval(H),H=null),L)){var e=L;L=null,e()}}()}function a(r){t(r.instance)}function o(r){return(l||"function"!=typeof fetch?Promise.resolve().then((function(){return z(V)})):fetch(V,{credentials:"same-origin"}).then((function(r){if(!r.ok)throw"failed to load wasm binary file at '"+V+"'";return r.arrayBuffer()})).catch((function(){return z(V)}))).then((function(r){return WebAssembly.instantiate(r,n)})).then(r,(function(r){f("failed to asynchronously prepare wasm: "+r),q(r)}))}if(B++,r.monitorRunDependencies&&r.monitorRunDependencies(B),r.instantiateWasm)try{return r.instantiateWasm(n,t)}catch(r){return f("Module.instantiateWasm callback failed with error: "+r),!1}(l||"function"!=typeof WebAssembly.instantiateStreaming||N(V)||"function"!=typeof fetch?o(a):fetch(V,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,n).then(a,(function(r){return f("wasm streaming compile failed: "+r),f("falling back to ArrayBuffer instantiation"),o(a)}))}))).catch(e)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.Q).apply(null,arguments)},r._malloc=function(){return(Sr=r._malloc=r.asm.R).apply(null,arguments)}),Fr=r._free=function(){return(Fr=r._free=r.asm.S).apply(null,arguments)},Rr=r.___getTypeName=function(){return(Rr=r.___getTypeName=r.asm.T).apply(null,arguments)},Ir=(r.___embind_register_native_and_builtin_types=function(){return(r.___embind_register_native_and_builtin_types=r.asm.U).apply(null,arguments)},r.stackSave=function(){return(Ir=r.stackSave=r.asm.V).apply(null,arguments)}),jr=r.stackRestore=function(){return(jr=r.stackRestore=r.asm.W).apply(null,arguments)},Mr=r._setThrew=function(){return(Mr=r._setThrew=r.asm.X).apply(null,arguments)},Or=(r.dynCall_jiiiiiiiii=function(){return(r.dynCall_jiiiiiiiii=r.asm.Z).apply(null,arguments)},r.dynCall_ijiii=function(){return(Or=r.dynCall_ijiii=r.asm._).apply(null,arguments)});function Dr(e){function t(){Wr||(Wr=!0,r.calledRun=!0,h||(G(D),n(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)n=r.postRun.shift(),U.unshift(n);var n;G(U)}()))}e=e||u,B>0||(function(){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)n=r.preRun.shift(),O.unshift(n);var n;G(O)}(),B>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),t()}),1)):t()))}if(r.dynCall_jiji=function(){return(r.dynCall_jiji=r.asm.$).apply(null,arguments)},r.dynCall_jiiiiiiii=function(){return(r.dynCall_jiiiiiiii=r.asm.aa).apply(null,arguments)},r.dynCall_jiiiiii=function(){return(r.dynCall_jiiiiii=r.asm.ba).apply(null,arguments)},r.dynCall_jiiiii=function(){return(r.dynCall_jiiiii=r.asm.ca).apply(null,arguments)},r.dynCall_iiijii=function(){return(r.dynCall_iiijii=r.asm.da).apply(null,arguments)},L=function r(){Wr||Dr(),Wr||(L=r)},r.run=Dr,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return Dr(),r.ready};let mr;const gr=(r,n)=>async function(r,n){mr||(mr=async function(){return await pr()?fr(hr):fr(vr)}());const e=(await mr).encode(r.data,r.width,r.height,n);if(!e)throw new Error("Encoding error");return e.buffer}(r,n),yr=()=>async function(r){try{const n=await w(new ImageData(1,1),r);return!!n&&n.type===r}catch(r){return!1}}(I),wr=(r,n)=>w(r,I),_r=(r,n)=>w(r,D,n.quality),br=(r,n)=>w(r,L),Ar=function(r){function n(){return T.buffer!=k&&Q(T.buffer),x}function e(){return T.buffer!=k&&Q(T.buffer),W}function t(){return T.buffer!=k&&Q(T.buffer),P}function o(){return T.buffer!=k&&Q(T.buffer),S}function i(){return T.buffer!=k&&Q(T.buffer),F}function u(){return T.buffer!=k&&Q(T.buffer),R}function c(){return T.buffer!=k&&Q(T.buffer),j}var s,f;(r=void 0!==(r=r||{})?r:{}).ready=new Promise((function(r,n){s=r,f=n}));var l,d={};for(l in r)r.hasOwnProperty(l)&&(d[l]=r[l]);var p,h=[],v="./this.program",m=function(r,n){throw n},g=r.ENVIRONMENT_IS_PTHREAD||!1,y="";function w(n){return r.locateFile?r.locateFile(n,y):y+n}y=self.location.href,y=0!==(y="file:///D:/altri/squoosh-web/squoosh-browser/codecs/jxl/enc/jxl_enc_mt_simd.js").indexOf("blob:")?y.substr(0,y.lastIndexOf("/")+1):"",p=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)};var _,b=r.print||console.log.bind(console),A=r.printErr||console.warn.bind(console);for(l in d)d.hasOwnProperty(l)&&(r[l]=d[l]);d=null,r.arguments&&(h=r.arguments),r.thisProgram&&(v=r.thisProgram),r.quit&&(m=r.quit),Atomics.load,Atomics.store,Atomics.compareExchange,r.wasmBinary&&(_=r.wasmBinary);var T,C,E=r.noExitRuntime||!0;"object"!=typeof WebAssembly&&or("no native wasm support detected");var k,x,W,P,S,F,R,I,j,M=!1;function O(r,n){r||or("Assertion failed: "+n)}function D(r,n,e){for(var t=n+e,a="";!(n>=t);){var o=r[n++];if(!o)return a;if(128&o){var i=63&r[n++];if(192!=(224&o)){var u=63&r[n++];if((o=224==(240&o)?(15&o)<<12|i<<6|u:(7&o)<<18|i<<12|u<<6|63&r[n++])<65536)a+=String.fromCharCode(o);else{var c=o-65536;a+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else a+=String.fromCharCode((31&o)<<6|i)}else a+=String.fromCharCode(o)}return a}function U(r,n){return r?D(e(),r,n):""}function B(r,n,e,t){if(!(t>0))return 0;for(var a=e,o=e+t-1,i=0;i<r.length;++i){var u=r.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&r.charCodeAt(++i)),u<=127){if(e>=o)break;n[e++]=u}else if(u<=2047){if(e+1>=o)break;n[e++]=192|u>>6,n[e++]=128|63&u}else if(u<=65535){if(e+2>=o)break;n[e++]=224|u>>12,n[e++]=128|u>>6&63,n[e++]=128|63&u}else{if(e+3>=o)break;n[e++]=240|u>>18,n[e++]=128|u>>12&63,n[e++]=128|u>>6&63,n[e++]=128|63&u}}return n[e]=0,e-a}function H(r,n,t){return B(r,e(),n,t)}function L(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&r.charCodeAt(++e)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n}function q(r,n){for(var e="",a=0;!(a>=n/2);++a){var o=t()[r+2*a>>1];if(0==o)break;e+=String.fromCharCode(o)}return e}function N(r,n,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var a=n,o=(e-=2)<2*r.length?e/2:r.length,i=0;i<o;++i){var u=r.charCodeAt(i);t()[n>>1]=u,n+=2}return t()[n>>1]=0,n-a}function V(r){return 2*r.length}function z(r,n){for(var e=0,t="";!(e>=n/4);){var a=i()[r+4*e>>2];if(0==a)break;if(++e,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function G(r,n,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=n,a=t+e-4,o=0;o<r.length;++o){var u=r.charCodeAt(o);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&r.charCodeAt(++o)),i()[n>>2]=u,(n+=4)+4>a)break}return i()[n>>2]=0,n-t}function Y(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&++e,n+=4}return n}function Q(n){k=n,r.HEAP8=x=new Int8Array(n),r.HEAP16=P=new Int16Array(n),r.HEAP32=F=new Int32Array(n),r.HEAPU8=W=new Uint8Array(n),r.HEAPU16=S=new Uint16Array(n),r.HEAPU32=R=new Uint32Array(n),r.HEAPF32=I=new Float32Array(n),r.HEAPF64=j=new Float64Array(n)}g&&(k=r.buffer);var J,$=r.INITIAL_MEMORY||16777216;if(g)T=r.wasmMemory,k=r.buffer;else if(r.wasmMemory)T=r.wasmMemory;else if(!((T=new WebAssembly.Memory({initial:$/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw A("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");T&&(k=T.buffer),$=k.byteLength,Q(k);var X=[],Z=[],K=[],rr=[];function nr(){g||fr(Z)}var er=0,tr=null,ar=null;function or(n){r.onAbort&&r.onAbort(n),g&&console.error("Pthread aborting at "+(new Error).stack),A(n+=""),M=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var e=new WebAssembly.RuntimeError(n);throw f(e),e}function ir(r){return r.startsWith("data:application/octet-stream;base64,")}if(r.preloadedImages={},r.preloadedAudios={},r.locateFile)ir(ur="jxl_enc_mt_simd.wasm")||(ur=w(ur));else var ur=new URL(a(130),a.b).toString();function cr(r){try{if(r==ur&&_)return new Uint8Array(_);if(p)return p(r);throw"both async and sync fetching of the wasm failed"}catch(r){or(r)}}var sr={60540:function(){throw"Canceled!"},60558:function(r,n){setTimeout((function(){In(r,n)}),0)}};function fr(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?J.get(t)():J.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(r)}}function lr(r,e){if(r<=0||r>n().length||!0&r||e<0)return-28;if(0==e)return 0;e>=2147483647&&(e=1/0);var t=Atomics.load(i(),Qn>>2),a=0;if(t==r&&Atomics.compareExchange(i(),Qn>>2,t,0)==t&&(a=1,--e<=0))return 1;var o=Atomics.notify(i(),r>>2,e);if(o>=0)return o+a;throw"Atomics.notify returned an unexpected value "+o}function dr(r){if(g)throw"Internal Error! cleanupThread() can only ever be called from main application thread!";if(!r)throw"Internal Error! Null pthread_ptr in cleanupThread!";var n=hr.pthreads[r];if(n){i()[r+12>>2]=0;var e=n.worker;hr.returnWorkerToPool(e)}}r._emscripten_futex_wake=lr;var pr,hr={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],initMainThreadBlock:function(){for(var r=navigator.hardwareConcurrency,n=0;n<r;++n)hr.allocateUnusedWorker()},initRuntime:function(){for(var r=Wn(228),n=0;n<57;++n)u()[r/4+n]=0;i()[r+12>>2]=r;var e=r+152;i()[e>>2]=e;var t=Wn(512);for(n=0;n<128;++n)u()[t/4+n]=0;Atomics.store(u(),r+100>>2,t),Atomics.store(u(),r+40>>2,r),Un(r,!1,1),Fn(r)},initWorker:function(){},pthreads:{},threadExitHandlers:[],runExitHandlers:function(){for(;hr.threadExitHandlers.length>0;)hr.threadExitHandlers.pop()();g&&Ln()&&Hn()},runExitHandlersAndDeinitThread:function(r,n){Atomics.store(u(),r+56>>2,1),Atomics.store(u(),r+60>>2,0),hr.runExitHandlers(),Atomics.store(u(),r+4>>2,n),Atomics.store(u(),r+0>>2,1),lr(r+0,2147483647),Un(0,0,0)},setExitStatus:function(r){},threadExit:function(r){var n=Ln();n&&(hr.runExitHandlersAndDeinitThread(n,r),g&&postMessage({cmd:"exit"}))},threadCancel:function(){hr.runExitHandlersAndDeinitThread(Ln(),-1),postMessage({cmd:"cancelDone"})},terminateAllThreads:function(){for(var r in hr.pthreads)(t=hr.pthreads[r])&&t.worker&&hr.returnWorkerToPool(t.worker);hr.pthreads={};for(var n=0;n<hr.unusedWorkers.length;++n)(e=hr.unusedWorkers[n]).terminate();for(hr.unusedWorkers=[],n=0;n<hr.runningWorkers.length;++n){var e,t=(e=hr.runningWorkers[n]).pthread;hr.freeThreadData(t),e.terminate()}hr.runningWorkers=[]},freeThreadData:function(r){if(r){if(r.threadInfoStruct){var n=i()[r.threadInfoStruct+100>>2];i()[r.threadInfoStruct+100>>2]=0,Pn(n),Pn(r.threadInfoStruct)}r.threadInfoStruct=0,r.allocatedOwnStack&&r.stackBase&&Pn(r.stackBase),r.stackBase=0,r.worker&&(r.worker.pthread=null)}},returnWorkerToPool:function(r){hr.runWithoutMainThreadQueuedCalls((function(){delete hr.pthreads[r.pthread.threadInfoStruct],hr.unusedWorkers.push(r),hr.runningWorkers.splice(hr.runningWorkers.indexOf(r),1),hr.freeThreadData(r.pthread),r.pthread=void 0}))},runWithoutMainThreadQueuedCalls:function(r){i()[Yn>>2]=0;try{r()}finally{i()[Yn>>2]=1}},receiveObjectTransfer:function(r){},threadInit:function(){for(var r in hr.tlsInitFunctions)hr.tlsInitFunctions[r]()},loadWasmModuleToWorker:function(n,e){n.onmessage=function(t){var a=t.data,o=a.cmd;if(n.pthread&&(hr.currentProxiedOperationCallerThread=n.pthread.threadInfoStruct),a.targetThread&&a.targetThread!=Ln()){var c=hr.pthreads[a.targetThread];return c?c.worker.postMessage(t.data,a.transferList):console.error('Internal error! Worker sent a message "'+o+'" to target pthread '+a.targetThread+", but that thread no longer exists!"),void(hr.currentProxiedOperationCallerThread=void 0)}if("processQueuedMainThreadWork"===o)Mn();else if("spawnThread"===o)gn(t.data);else if("cleanupThread"===o)dr(a.thread);else if("killThread"===o)!function(r){if(g)throw"Internal Error! killThread() can only ever be called from main application thread!";if(!r)throw"Internal Error! Null pthread_ptr in killThread!";i()[r+12>>2]=0;var n=hr.pthreads[r];n.worker.terminate(),hr.freeThreadData(n),hr.runningWorkers.splice(hr.runningWorkers.indexOf(n.worker),1),n.worker.pthread=void 0}(a.thread);else if("cancelThread"===o)!function(r){if(g)throw"Internal Error! cancelThread() can only ever be called from main application thread!";if(!r)throw"Internal Error! Null pthread_ptr in cancelThread!";hr.pthreads[r].worker.postMessage({cmd:"cancel"})}(a.thread);else if("loaded"===o)n.loaded=!0,e&&e(n),n.runPthread&&(n.runPthread(),delete n.runPthread);else if("print"===o)b("Thread "+a.threadId+": "+a.text);else if("printErr"===o)A("Thread "+a.threadId+": "+a.text);else if("alert"===o)alert("Thread "+a.threadId+": "+a.text);else if("exit"===o)n.pthread&&Atomics.load(u(),n.pthread.threadInfoStruct+64>>2)&&hr.returnWorkerToPool(n);else if("exitProcess"===o)try{!function(n,e){if(g)throw postMessage({cmd:"exitProcess",returnCode:n}),new Jn(n);vr()||(hr.terminateAllThreads(),r.onExit&&r.onExit(n),M=!0),m(n,new Jn(n))}(a.returnCode)}catch(t){if(t instanceof Jn)return;throw t}else"cancelDone"===o?hr.returnWorkerToPool(n):"objectTransfer"===o?hr.receiveObjectTransfer(t.data):"setimmediate"===t.data.target?n.postMessage(t.data):A("worker sent an unknown command "+o);hr.currentProxiedOperationCallerThread=void 0},n.onerror=function(r){A("pthread sent an error! "+r.filename+":"+r.lineno+": "+r.message)},n.postMessage({cmd:"load",urlOrBlob:r.mainScriptUrlOrBlob,wasmMemory:T,wasmModule:C})},allocateUnusedWorker:function(){if(r.locateFile){var n=w("jxl_enc_mt_simd.worker.js");hr.unusedWorkers.push(new Worker(n))}else hr.unusedWorkers.push(new Worker(new URL(a.p+a.u(765),a.b)))},getNewWorker:function(){return 0==hr.unusedWorkers.length&&(hr.allocateUnusedWorker(),hr.loadWasmModuleToWorker(hr.unusedWorkers[0])),hr.unusedWorkers.pop()},busySpinWait:function(r){for(var n=performance.now()+r;performance.now()<n;);}};function vr(){return E||!1}function mr(r){this.excPtr=r,this.ptr=r-16,this.set_type=function(r){i()[this.ptr+8>>2]=r},this.get_type=function(){return i()[this.ptr+8>>2]},this.set_destructor=function(r){i()[this.ptr+0>>2]=r},this.get_destructor=function(){return i()[this.ptr+0>>2]},this.set_refcount=function(r){i()[this.ptr+4>>2]=r},this.set_caught=function(r){r=r?1:0,n()[this.ptr+12>>0]=r},this.get_caught=function(){return 0!=n()[this.ptr+12>>0]},this.set_rethrown=function(r){r=r?1:0,n()[this.ptr+13>>0]=r},this.get_rethrown=function(){return 0!=n()[this.ptr+13>>0]},this.init=function(r,n){this.set_type(r),this.set_destructor(n),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){Atomics.add(i(),this.ptr+4>>2,1)},this.release_ref=function(){return 1===Atomics.sub(i(),this.ptr+4>>2,1)}}r.establishStackSpace=function(r,n){zn(r,n),Nn(r)},r.invokeEntryPoint=function(r,n){return J.get(r)(n)},r.keepRuntimeAlive=vr,pr=g?function(){return performance.now()-r.__performance_now_clock_drift}:function(){return performance.now()};var gr={};function yr(r){for(;r.length;){var n=r.pop();r.pop()(n)}}function wr(r){return this.fromWireType(u()[r>>2])}var _r={},br={},Ar={};function Tr(r){if(void 0===r)return"_unknown";var n=(r=r.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return n>=48&&n<=57?"_"+r:r}function Cr(r,n){return r=Tr(r),new Function("body","return function "+r+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(n)}function Er(r,n){var e=Cr(n,(function(r){this.name=n,this.message=r;var e=new Error(r).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var kr=void 0;function xr(r){throw new kr(r)}function Wr(r,n,e){function t(n){var t=e(n);t.length!==r.length&&xr("Mismatched type converter count");for(var a=0;a<r.length;++a)jr(r[a],t[a])}r.forEach((function(r){Ar[r]=n}));var a=new Array(n.length),o=[],i=0;n.forEach((function(r,n){br.hasOwnProperty(r)?a[n]=br[r]:(o.push(r),_r.hasOwnProperty(r)||(_r[r]=[]),_r[r].push((function(){a[n]=br[r],++i===o.length&&t(a)})))})),0===o.length&&t(a)}function Pr(r){switch(r){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+r)}}var Sr=void 0;function Fr(r){for(var n="",t=r;e()[t];)n+=Sr[e()[t++]];return n}var Rr=void 0;function Ir(r){throw new Rr(r)}function jr(r,n,e){if(e=e||{},!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=n.name;if(r||Ir('type "'+t+'" must have a positive integer typeid pointer'),br.hasOwnProperty(r)){if(e.ignoreDuplicateRegistrations)return;Ir("Cannot register type '"+t+"' twice")}if(br[r]=n,delete Ar[r],_r.hasOwnProperty(r)){var a=_r[r];delete _r[r],a.forEach((function(r){r()}))}}var Mr=[],Or=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Dr(r){r>4&&0==--Or[r].refcount&&(Or[r]=void 0,Mr.push(r))}function Ur(r){switch(r){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=Mr.length?Mr.pop():Or.length;return Or[n]={refcount:1,value:r},n}}function Br(r){if(null===r)return"null";var n=typeof r;return"object"===n||"array"===n||"function"===n?r.toString():""+r}function Hr(r,n){switch(n){case 2:return function(r){return this.fromWireType((T.buffer!=k&&Q(T.buffer),I)[r>>2])};case 3:return function(r){return this.fromWireType(c()[r>>3])};default:throw new TypeError("Unknown float type: "+r)}}function Lr(n,e,t){return n.includes("j")?function(n,e,t){var a=r["dynCall_"+n];return t&&t.length?a.apply(null,[e].concat(t)):a.call(null,e)}(n,e,t):J.get(e).apply(null,t)}function qr(r,n){var e,t,a,o=(r=Fr(r)).includes("j")?(e=r,t=n,a=[],function(){a.length=arguments.length;for(var r=0;r<arguments.length;r++)a[r]=arguments[r];return Lr(e,t,a)}):J.get(n);return"function"!=typeof o&&Ir("unknown function pointer with signature "+r+": "+n),o}var Nr=void 0;function Vr(r){var n=Sn(r),e=Fr(n);return Pn(n),e}function zr(r,a,c){switch(a){case 0:return c?function(r){return n()[r]}:function(r){return e()[r]};case 1:return c?function(r){return t()[r>>1]}:function(r){return o()[r>>1]};case 2:return c?function(r){return i()[r>>2]}:function(r){return u()[r>>2]};default:throw new TypeError("Unknown integer type: "+r)}}var Gr={};function Yr(){return"object"==typeof globalThis?globalThis:Function("return this")()}function Qr(r,n){var e=br[r];return void 0===e&&Ir(n+" has unknown type "+Vr(r)),e}var Jr={},$r=[];function Xr(r,e,t){if(r<=0||r>n().length||!0&r)return-28;var a=Atomics.wait(i(),r>>2,e,t);if("timed-out"===a)return-73;if("not-equal"===a)return-6;if("ok"===a)return 0;throw"Atomics.wait returned an unexpected value "+a}function Zr(r,n){for(var e=arguments.length-2,t=qn(),a=e,o=Vn(8*a),i=o>>3,u=0;u<e;u++){var s=arguments[2+u];c()[i+u]=s}var f=On(r,a,o,n);return Nn(t),f}var Kr=[];function rn(r){try{return T.grow(r-k.byteLength+65535>>>16),Q(T.buffer),1}catch(r){}}var nn={inEventHandler:0,removeAllEventListeners:function(){for(var r=nn.eventHandlers.length-1;r>=0;--r)nn._removeHandler(r);nn.eventHandlers=[],nn.deferredCalls=[]},registerRemoveEventListeners:function(){nn.removeEventListenersRegistered||(K.push(nn.removeAllEventListeners),nn.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(r,n,e){function t(r,n){if(r.length!=n.length)return!1;for(var e in r)if(r[e]!=n[e])return!1;return!0}for(var a in nn.deferredCalls){var o=nn.deferredCalls[a];if(o.targetFunction==r&&t(o.argsList,e))return}nn.deferredCalls.push({targetFunction:r,precedence:n,argsList:e}),nn.deferredCalls.sort((function(r,n){return r.precedence<n.precedence}))},removeDeferredCalls:function(r){for(var n=0;n<nn.deferredCalls.length;++n)nn.deferredCalls[n].targetFunction==r&&(nn.deferredCalls.splice(n,1),--n)},canPerformEventHandlerRequests:function(){return nn.inEventHandler&&nn.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(nn.canPerformEventHandlerRequests())for(var r=0;r<nn.deferredCalls.length;++r){var n=nn.deferredCalls[r];nn.deferredCalls.splice(r,1),--r,n.targetFunction.apply(null,n.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:function(r,n){for(var e=0;e<nn.eventHandlers.length;++e)nn.eventHandlers[e].target!=r||n&&n!=nn.eventHandlers[e].eventTypeString||nn._removeHandler(e--)},_removeHandler:function(r){var n=nn.eventHandlers[r];n.target.removeEventListener(n.eventTypeString,n.eventListenerFunc,n.useCapture),nn.eventHandlers.splice(r,1)},registerOrRemoveHandler:function(r){var n=function(n){++nn.inEventHandler,nn.currentEventHandler=r,nn.runDeferredCalls(),r.handlerFunc(n),nn.runDeferredCalls(),--nn.inEventHandler};if(r.callbackfunc)r.eventListenerFunc=n,r.target.addEventListener(r.eventTypeString,n,r.useCapture),nn.eventHandlers.push(r),nn.registerRemoveEventListeners();else for(var e=0;e<nn.eventHandlers.length;++e)nn.eventHandlers[e].target==r.target&&nn.eventHandlers[e].eventTypeString==r.eventTypeString&&nn._removeHandler(e--)},queueEventHandlerOnThread_iiii:function(r,n,e,t,a){var o=qn(),u=Vn(12);i()[u>>2]=e,i()[u+4>>2]=t,i()[u+8>>2]=a,Dn(0,r,637534208,n,t,u),Nn(o)},getTargetThreadForEventCallback:function(r){switch(r){case 1:return 0;case 2:return hr.currentProxiedOperationCallerThread;default:return r}},getNodeNameForTarget:function(r){return r?r==window?"#window":r==screen?"#screen":r&&r.nodeName?r.nodeName:"":""},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}},en=[0,"undefined"!=typeof document?document:0,"undefined"!=typeof window?window:0];function tn(r){return function(r){var n;return r=(n=r)>2?U(n):n,en[r]||("undefined"!=typeof document?document.querySelector(r):void 0)}(r)}function an(r,n,e){var t=tn(r);if(!t)return-4;if(t.canvasSharedPtr&&(i()[t.canvasSharedPtr>>2]=n,i()[t.canvasSharedPtr+4>>2]=e),!t.offscreenCanvas&&t.controlTransferredOffscreen)return t.canvasSharedPtr?(function(r,n,e,t){!function(r,n,e,t){var a,o,u,c=qn(),s=Vn(12),f=0;n&&(o=L(a=n)+1,H(a,u=Wn(o),o),f=u),i()[s>>2]=f,i()[s+4>>2]=e,i()[s+8>>2]=t,Dn(0,r,657457152,0,f,s),Nn(c)}(r,n=n?U(n):"",e,t)}(i()[t.canvasSharedPtr+8>>2],r,n,e),1):-4;t.offscreenCanvas&&(t=t.offscreenCanvas);var a=!1;if(t.GLctxObject&&t.GLctxObject.GLctx){var o=t.GLctxObject.GLctx.getParameter(2978);a=0===o[0]&&0===o[1]&&o[2]===t.width&&o[3]===t.height}return t.width=n,t.height=e,a&&t.GLctxObject.GLctx.viewport(0,0,n,e),0}function on(r,n,e){return g?Zr(2,1,r,n,e):an(r,n,e)}var un={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:{},offscreenCanvases:{},queries:[],stringCache:{},unpackAlignment:4,recordError:function(r){un.lastError||(un.lastError=r)},getNewId:function(r){for(var n=un.counter++,e=r.length;e<n;e++)r[e]=null;return n},getSource:function(r,n,e,t){for(var a="",o=0;o<n;++o){var u=t?i()[t+4*o>>2]:-1;a+=U(i()[e+4*o>>2],u<0?void 0:u)}return a},createContext:function(r,n){r.getContextSafariWebGL2Fixed||(r.getContextSafariWebGL2Fixed=r.getContext,r.getContext=function(n,e){var t=r.getContextSafariWebGL2Fixed(n,e);return"webgl"==n==t instanceof WebGLRenderingContext?t:null});var e=r.getContext("webgl",n);return e?un.registerContext(e,n):0},registerContext:function(r,n){var e=Wn(8);i()[e+4>>2]=Ln();var t={handle:e,attributes:n,version:n.majorVersion,GLctx:r};return r.canvas&&(r.canvas.GLctxObject=t),un.contexts[e]=t,(void 0===n.enableExtensionsByDefault||n.enableExtensionsByDefault)&&un.initExtensions(t),e},makeContextCurrent:function(n){return un.currentContext=un.contexts[n],r.ctx=bn=un.currentContext&&un.currentContext.GLctx,!(n&&!bn)},getContext:function(r){return un.contexts[r]},deleteContext:function(r){un.currentContext===un.contexts[r]&&(un.currentContext=null),"object"==typeof nn&&nn.removeAllHandlersOnTarget(un.contexts[r].GLctx.canvas),un.contexts[r]&&un.contexts[r].GLctx.canvas&&(un.contexts[r].GLctx.canvas.GLctxObject=void 0),Pn(un.contexts[r].handle),un.contexts[r]=null},initExtensions:function(r){if(r||(r=un.currentContext),!r.initExtensionsDone){r.initExtensionsDone=!0;var n,e=r.GLctx;!function(r){var n=r.getExtension("ANGLE_instanced_arrays");n&&(r.vertexAttribDivisor=function(r,e){n.vertexAttribDivisorANGLE(r,e)},r.drawArraysInstanced=function(r,e,t,a){n.drawArraysInstancedANGLE(r,e,t,a)},r.drawElementsInstanced=function(r,e,t,a,o){n.drawElementsInstancedANGLE(r,e,t,a,o)})}(e),function(r){var n=r.getExtension("OES_vertex_array_object");n&&(r.createVertexArray=function(){return n.createVertexArrayOES()},r.deleteVertexArray=function(r){n.deleteVertexArrayOES(r)},r.bindVertexArray=function(r){n.bindVertexArrayOES(r)},r.isVertexArray=function(r){return n.isVertexArrayOES(r)})}(e),function(r){var n=r.getExtension("WEBGL_draw_buffers");n&&(r.drawBuffers=function(r,e){n.drawBuffersWEBGL(r,e)})}(e),e.disjointTimerQueryExt=e.getExtension("EXT_disjoint_timer_query"),(n=e).multiDrawWebgl=n.getExtension("WEBGL_multi_draw"),(e.getSupportedExtensions()||[]).forEach((function(r){r.includes("lose_context")||r.includes("debug")||e.getExtension(r)}))}}},cn=["default","low-power","high-performance"],sn={};function fn(){if(!fn.strings){var r={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:v||"./this.program"};for(var n in sn)r[n]=sn[n];var e=[];for(var n in r)e.push(n+"="+r[n]);fn.strings=e}return fn.strings}var ln={mappings:{},buffers:[null,[],[]],printChar:function(r,n){var e=ln.buffers[r];0===n||10===n?((1===r?b:A)(D(e,0)),e.length=0):e.push(n)},varargs:void 0,get:function(){return ln.varargs+=4,i()[ln.varargs-4>>2]},getStr:function(r){return U(r)},get64:function(r,n){return r}};function dn(r,e){if(g)return Zr(3,1,r,e);var t=0;return fn().forEach((function(a,o){var u=e+t;i()[r+4*o>>2]=u,function(r,e,t){for(var a=0;a<r.length;++a)n()[e++>>0]=r.charCodeAt(a);n()[e>>0]=0}(a,u),t+=a.length+1})),0}function pn(r,n){if(g)return Zr(4,1,r,n);var e=fn();i()[r>>2]=e.length;var t=0;return e.forEach((function(r){t+=r.length+1})),i()[n>>2]=t,0}function hn(r){return g?Zr(5,1,r):0}function vn(r,n,e,t,a){if(g)return Zr(6,1,r,n,e,t,a)}function mn(r,n,t,a){if(g)return Zr(7,1,r,n,t,a);for(var o=0,u=0;u<t;u++){for(var c=i()[n+8*u>>2],s=i()[n+(8*u+4)>>2],f=0;f<s;f++)ln.printChar(r,e()[c+f]);o+=s}return i()[a>>2]=o,0}function gn(r){if(g)throw"Internal Error! spawnThread() can only ever be called from main application thread!";var n=hr.getNewWorker();if(!n)return 6;if(void 0!==n.pthread)throw"Internal error!";if(!r.pthread_ptr)throw"Internal error, no pthread ptr!";hr.runningWorkers.push(n);for(var e=Wn(512),t=0;t<128;++t)i()[e+4*t>>2]=0;var a=r.stackBase+r.stackSize,o=hr.pthreads[r.pthread_ptr]={worker:n,stackBase:r.stackBase,stackSize:r.stackSize,allocatedOwnStack:r.allocatedOwnStack,threadInfoStruct:r.pthread_ptr},c=o.threadInfoStruct>>2;Atomics.store(u(),c+16,r.detached),Atomics.store(u(),c+25,e),Atomics.store(u(),c+10,o.threadInfoStruct),Atomics.store(u(),c+20,r.stackSize),Atomics.store(u(),c+19,a),Atomics.store(u(),c+26,r.stackSize),Atomics.store(u(),c+28,a),Atomics.store(u(),c+29,r.detached);var s=Bn()+40;Atomics.store(u(),c+43,s),n.pthread=o;var f={cmd:"run",start_routine:r.startRoutine,arg:r.arg,threadInfoStruct:r.pthread_ptr,stackBase:r.stackBase,stackSize:r.stackSize};return n.runPthread=function(){f.time=performance.now(),n.postMessage(f,r.transferList)},n.loaded&&(n.runPthread(),delete n.runPthread),0}function yn(){if(g){var r=Ln();if(r&&!Atomics.load(u(),r+56>>2)&&2==Atomics.load(u(),r+0>>2))throw"Canceled!"}}function wn(r){return r%4==0&&(r%100!=0||r%400==0)}function _n(r,n){for(var e=0,t=0;t<=n;e+=r[t++]);return e}var bn,An=[31,29,31,30,31,30,31,31,30,31,30,31],Tn=[31,28,31,30,31,30,31,31,30,31,30,31];function Cn(r,n){for(var e=new Date(r.getTime());n>0;){var t=wn(e.getFullYear()),a=e.getMonth(),o=(t?An:Tn)[a];if(!(n>o-e.getDate()))return e.setDate(e.getDate()+n),e;n-=o-e.getDate()+1,e.setDate(1),a<11?e.setMonth(a+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}g||hr.initMainThreadBlock(),kr=r.InternalError=Er(Error,"InternalError"),function(){for(var r=new Array(256),n=0;n<256;++n)r[n]=String.fromCharCode(n);Sr=r}(),Rr=r.BindingError=Er(Error,"BindingError"),r.count_emval_handles=function(){for(var r=0,n=5;n<Or.length;++n)void 0!==Or[n]&&++r;return r},r.get_first_emval=function(){for(var r=5;r<Or.length;++r)if(void 0!==Or[r])return Or[r];return null},Nr=r.UnboundTypeError=Er(Error,"UnboundTypeError");var En,kn=[null,function(r,n){if(g)return Zr(1,1,r,n)},on,dn,pn,hn,vn,mn],xn={e:function(r,n,e,t){or("Assertion failed: "+U(r)+", at: "+[n?U(n):"unknown filename",e,t?U(t):"unknown function"])},M:function(r){return Wn(r+16)+16},q:function(r,n){return e=r,t=n,void hr.threadExitHandlers.push((function(){J.get(e)(t)}));var e,t},B:function(r,n,e){throw new mr(r).init(n,e),r},s:function(r){var n=gr[r];delete gr[r];var e=n.rawConstructor,t=n.rawDestructor,a=n.fields;Wr([r],a.map((function(r){return r.getterReturnType})).concat(a.map((function(r){return r.setterArgumentType}))),(function(r){var o={};return a.forEach((function(n,e){var t=n.fieldName,i=r[e],u=n.getter,c=n.getterContext,s=r[e+a.length],f=n.setter,l=n.setterContext;o[t]={read:function(r){return i.fromWireType(u(c,r))},write:function(r,n){var e=[];f(l,r,s.toWireType(e,n)),yr(e)}}})),[{name:n.name,fromWireType:function(r){var n={};for(var e in o)n[e]=o[e].read(r);return t(r),n},toWireType:function(r,n){for(var a in o)if(!(a in n))throw new TypeError('Missing field:  "'+a+'"');var i=e();for(a in o)o[a].write(i,n[a]);return null!==r&&r.push(t,i),i},argPackAdvance:8,readValueFromPointer:wr,destructorFunction:t}]}))},w:function(r,n,e,t,a){},Q:function(r,e,a,o,u){var c=Pr(a);jr(r,{name:e=Fr(e),fromWireType:function(r){return!!r},toWireType:function(r,n){return n?o:u},argPackAdvance:8,readValueFromPointer:function(r){var o;if(1===a)o=n();else if(2===a)o=t();else{if(4!==a)throw new TypeError("Unknown boolean type size: "+e);o=i()}return this.fromWireType(o[r>>c])},destructorFunction:null})},P:function(r,n){jr(r,{name:n=Fr(n),fromWireType:function(r){var n=Or[r].value;return Dr(r),n},toWireType:function(r,n){return Ur(n)},argPackAdvance:8,readValueFromPointer:wr,destructorFunction:null})},o:function(r,n,e){var t=Pr(e);jr(r,{name:n=Fr(n),fromWireType:function(r){return r},toWireType:function(r,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+Br(n)+'" to '+this.name);return n},argPackAdvance:8,readValueFromPointer:Hr(n,t),destructorFunction:null})},r:function(n,e,t,a,o,u){var c=function(r,n){for(var e=[],t=0;t<r;t++)e.push(i()[(n>>2)+t]);return e}(e,t);n=Fr(n),o=qr(a,o),function(n,e,t){r.hasOwnProperty(n)?((void 0===t||void 0!==r[n].overloadTable&&void 0!==r[n].overloadTable[t])&&Ir("Cannot register public name '"+n+"' twice"),function(r,n,e){if(void 0===r[n].overloadTable){var t=r[n];r[n]=function(){return r[n].overloadTable.hasOwnProperty(arguments.length)||Ir("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+r[n].overloadTable+")!"),r[n].overloadTable[arguments.length].apply(this,arguments)},r[n].overloadTable=[],r[n].overloadTable[t.argCount]=t}}(r,n,n),r.hasOwnProperty(t)&&Ir("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),r[n].overloadTable[t]=e):(r[n]=e,void 0!==t&&(r[n].numArguments=t))}(n,(function(){!function(r,n){var e=[],t={};throw n.forEach((function r(n){t[n]||br[n]||(Ar[n]?Ar[n].forEach(r):(e.push(n),t[n]=!0))})),new Nr(r+": "+e.map(Vr).join([", "]))}("Cannot call "+n+" due to unbound types",c)}),e-1),Wr([],c,(function(t){var a=[t[0],null].concat(t.slice(1));return function(n,e,t){r.hasOwnProperty(n)||xr("Replacing nonexistant public symbol"),void 0!==r[n].overloadTable&&void 0!==t?r[n].overloadTable[t]=e:(r[n]=e,r[n].argCount=t)}(n,function(r,n,e,t,a){var o=n.length;o<2&&Ir("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==n[1]&&null!==e,u=!1,c=1;c<n.length;++c)if(null!==n[c]&&void 0===n[c].destructorFunction){u=!0;break}var s="void"!==n[0].name,f="",l="";for(c=0;c<o-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+Tr(r)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+r+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[Ir,t,a,yr,n[0],n[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<o-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+n[c+2].name+"\n",h.push("argType"+c),v.push(n[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<n.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==n[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+n[c].name+"\n",h.push(m+"_dtor"),v.push(n[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(r,n){if(!(r instanceof Function))throw new TypeError("new_ called with constructor type "+typeof r+" which is not a function");var e=Cr(r.name||"unknownFunctionName",(function(){}));e.prototype=r.prototype;var t=new e,a=r.apply(t,n);return a instanceof Object?a:t}(Function,h).apply(null,v)}(n,a,null,o,u),e-1),[]}))},d:function(r,n,e,t,a){n=Fr(n),-1===a&&(a=4294967295);var o=Pr(e),i=function(r){return r};if(0===t){var u=32-8*e;i=function(r){return r<<u>>>u}}var c=n.includes("unsigned");jr(r,{name:n,fromWireType:i,toWireType:function(r,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+Br(e)+'" to '+this.name);if(e<t||e>a)throw new TypeError('Passing a number "'+Br(e)+'" from JS side to C/C++ side to an argument of type "'+n+'", which is outside the valid range ['+t+", "+a+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:zr(n,o,0!==t),destructorFunction:null})},c:function(r,n,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function a(r){r>>=2;var n=u(),e=n[r],a=n[r+1];return new t(k,a,e)}jr(r,{name:e=Fr(e),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},p:function(r,n){var t="std::string"===(n=Fr(n));jr(r,{name:n,fromWireType:function(r){var n,a=u()[r>>2];if(t)for(var o=r+4,i=0;i<=a;++i){var c=r+4+i;if(i==a||0==e()[c]){var s=U(o,c-o);void 0===n?n=s:(n+=String.fromCharCode(0),n+=s),o=c+1}}else{var f=new Array(a);for(i=0;i<a;++i)f[i]=String.fromCharCode(e()[r+4+i]);n=f.join("")}return Pn(r),n},toWireType:function(r,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var a="string"==typeof n;a||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||Ir("Cannot pass non-string to std::string");var o=(t&&a?function(){return L(n)}:function(){return n.length})(),i=Wn(4+o+1);if(u()[i>>2]=o,t&&a)H(n,i+4,o+1);else if(a)for(var c=0;c<o;++c){var s=n.charCodeAt(c);s>255&&(Pn(i),Ir("String has UTF-16 code units that do not fit in 8 bits")),e()[i+4+c]=s}else for(c=0;c<o;++c)e()[i+4+c]=n[c];return null!==r&&r.push(Pn,i),i},argPackAdvance:8,readValueFromPointer:wr,destructorFunction:function(r){Pn(r)}})},k:function(r,n,e){var t,a,i,c,s;e=Fr(e),2===n?(t=q,a=N,c=V,i=function(){return o()},s=1):4===n&&(t=z,a=G,c=Y,i=function(){return u()},s=2),jr(r,{name:e,fromWireType:function(r){for(var e,a=u()[r>>2],o=i(),c=r+4,f=0;f<=a;++f){var l=r+4+f*n;if(f==a||0==o[l>>s]){var d=t(c,l-c);void 0===e?e=d:(e+=String.fromCharCode(0),e+=d),c=l+n}}return Pn(r),e},toWireType:function(r,t){"string"!=typeof t&&Ir("Cannot pass non-string to C++ string type "+e);var o=c(t),i=Wn(4+o+n);return u()[i>>2]=o>>s,a(t,i+4,o+n),null!==r&&r.push(Pn,i),i},argPackAdvance:8,readValueFromPointer:wr,destructorFunction:function(r){Pn(r)}})},t:function(r,n,e,t,a,o){gr[r]={name:Fr(n),rawConstructor:qr(e,t),rawDestructor:qr(a,o),fields:[]}},f:function(r,n,e,t,a,o,i,u,c,s){gr[r].fields.push({fieldName:Fr(n),getterReturnType:e,getter:qr(t,a),getterContext:o,setterArgumentType:i,setter:qr(u,c),setterContext:s})},R:function(r,n){jr(r,{isVoid:!0,name:n=Fr(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(r,n){}})},L:function(r,n){if(r==n)postMessage({cmd:"processQueuedMainThreadWork"});else if(g)postMessage({targetThread:r,cmd:"processThreadQueue"});else{var e=hr.pthreads[r],t=e&&e.worker;if(!t)return;t.postMessage({cmd:"processThreadQueue"})}return 1},i:Dr,U:function(r){return 0===r?Ur(Yr()):(r=void 0===(e=Gr[n=r])?Fr(n):e,Ur(Yr()[r]));var n,e},T:function(r){r>4&&(Or[r].refcount+=1)},u:function(n,e,t,a){n=function(r){return r||Ir("Cannot use deleted val. handle = "+r),Or[r].value}(n);var o=Jr[e];return o||(o=function(n){for(var e="",t=0;t<n;++t)e+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+n+"(constructor, argTypes, args) {\n";for(t=0;t<n;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(Qr,r,Ur)}(e),Jr[e]=o),o(n,t,a)},b:function(){or()},n:function(r,n,t){var a=function(r,n){var t;for($r.length=0,n>>=2;t=e()[r++];){var a=t<105;a&&1&n&&n++,$r.push(a?c()[n++>>1]:i()[n]),++n}return $r}(n,t);return sr[r].apply(null,a)},H:function(){},m:function(r,n){},h:Xr,g:lr,j:pr,z:function(r,n,t){e().copyWithin(r,n,n+t)},G:function(){return navigator.hardwareConcurrency},I:function(r,n,e){Kr.length=n;for(var t=e>>3,a=0;a<n;a++)Kr[a]=c()[t+a];return(r<0?sr[-r-1]:kn[r]).apply(null,Kr)},A:function(r){var n=e().length;if((r>>>=0)<=n)return!1;var t,a=2147483648;if(r>a)return!1;for(var o=1;o<=4;o*=2){var i=n*(1+.2/o);if(i=Math.min(i,r+100663296),rn(Math.min(a,((t=Math.max(r,i))%65536>0&&(t+=65536-t%65536),t))))return!0}return!1},J:function(r,n,e){return tn(r)?an(r,n,e):on(r,n,e)},l:function(r){},K:function(r,n){return e=r,t=n>>2,a=i()[t+6],o={alpha:!!i()[t+0],depth:!!i()[t+1],stencil:!!i()[t+2],antialias:!!i()[t+3],premultipliedAlpha:!!i()[t+4],preserveDrawingBuffer:!!i()[t+5],powerPreference:cn[a],failIfMajorPerformanceCaveat:!!i()[t+7],majorVersion:i()[t+8],minorVersion:i()[t+9],enableExtensionsByDefault:i()[t+10],explicitSwapControl:i()[t+11],proxyContextToMainThread:i()[t+12],renderViaOffscreenBackBuffer:i()[t+13]},(u=tn(e))?o.explicitSwapControl?0:un.createContext(u,o):0;var e,t,a,o,u},D:dn,E:pn,O:hn,v:vn,N:mn,y:function(){hr.initRuntime()},a:T||r.wasmMemory,S:function(r,n,e,t){if("undefined"==typeof SharedArrayBuffer)return A("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;if(!r)return A("pthread_create called with a null thread pointer!"),28;var a=[];if(g&&0===a.length)return jn(687865856,r,n,e,t);var o=0,c=0,s=0;n&&-1!=n?(o=i()[n>>2],o+=81920,c=i()[n+8>>2],s=0!==i()[n+12>>2]):o=2097152;var f=0==c;f?c=Gn(16,o):O((c-=o)>0);for(var l=Wn(228),d=0;d<57;++d)u()[(l>>2)+d]=0;i()[r>>2]=l,i()[l+12>>2]=l;var p=l+152;i()[p>>2]=p;var h={stackBase:c,stackSize:o,allocatedOwnStack:f,detached:s,startRoutine:e,pthread_ptr:l,arg:t,transferList:a};return g?(h.cmd="spawnThread",postMessage(h,a),0):gn(h)},F:function(r,n){return function(r,n,e){if(!r)return A("pthread_join attempted on a null thread pointer!"),71;if(g&&Ln()==r)return A("PThread "+r+" is attempting to join to itself!"),16;if(!g&&Rn()==r)return A("Main thread "+r+" is attempting to join to itself!"),16;if(i()[r+12>>2]!==r)return A("pthread_join attempted on thread "+r+", which does not point to a valid thread, or does not exist anymore!"),71;if(Atomics.load(u(),r+64>>2))return A("Attempted to join thread "+r+", which was already detached!"),28;for(;;){var t=Atomics.load(u(),r+0>>2);if(1==t){var a=Atomics.load(u(),r+4>>2);return n&&(i()[n>>2]=a),Atomics.store(u(),r+64>>2,1),g?postMessage({cmd:"cleanupThread",thread:r}):dr(r),0}yn(),g||Mn(),Xr(r+0,t,g?100:1)}}(r,n)},x:function(r){},C:function(r,e,t,a){return function(r,e,t,a){var o=i()[a+40>>2],u={tm_sec:i()[a>>2],tm_min:i()[a+4>>2],tm_hour:i()[a+8>>2],tm_mday:i()[a+12>>2],tm_mon:i()[a+16>>2],tm_year:i()[a+20>>2],tm_wday:i()[a+24>>2],tm_yday:i()[a+28>>2],tm_isdst:i()[a+32>>2],tm_gmtoff:i()[a+36>>2],tm_zone:o?U(o):""},c=U(t),s={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var f in s)c=c.replace(new RegExp(f,"g"),s[f]);var l=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],d=["January","February","March","April","May","June","July","August","September","October","November","December"];function p(r,n,e){for(var t="number"==typeof r?r.toString():r||"";t.length<n;)t=e[0]+t;return t}function h(r,n){return p(r,n,"0")}function v(r,n){function e(r){return r<0?-1:r>0?1:0}var t;return 0===(t=e(r.getFullYear()-n.getFullYear()))&&0===(t=e(r.getMonth()-n.getMonth()))&&(t=e(r.getDate()-n.getDate())),t}function m(r){switch(r.getDay()){case 0:return new Date(r.getFullYear()-1,11,29);case 1:return r;case 2:return new Date(r.getFullYear(),0,3);case 3:return new Date(r.getFullYear(),0,2);case 4:return new Date(r.getFullYear(),0,1);case 5:return new Date(r.getFullYear()-1,11,31);case 6:return new Date(r.getFullYear()-1,11,30)}}function g(r){var n=Cn(new Date(r.tm_year+1900,0,1),r.tm_yday),e=new Date(n.getFullYear(),0,4),t=new Date(n.getFullYear()+1,0,4),a=m(e),o=m(t);return v(a,n)<=0?v(o,n)<=0?n.getFullYear()+1:n.getFullYear():n.getFullYear()-1}var y={"%a":function(r){return l[r.tm_wday].substring(0,3)},"%A":function(r){return l[r.tm_wday]},"%b":function(r){return d[r.tm_mon].substring(0,3)},"%B":function(r){return d[r.tm_mon]},"%C":function(r){return h((r.tm_year+1900)/100|0,2)},"%d":function(r){return h(r.tm_mday,2)},"%e":function(r){return p(r.tm_mday,2," ")},"%g":function(r){return g(r).toString().substring(2)},"%G":function(r){return g(r)},"%H":function(r){return h(r.tm_hour,2)},"%I":function(r){var n=r.tm_hour;return 0==n?n=12:n>12&&(n-=12),h(n,2)},"%j":function(r){return h(r.tm_mday+_n(wn(r.tm_year+1900)?An:Tn,r.tm_mon-1),3)},"%m":function(r){return h(r.tm_mon+1,2)},"%M":function(r){return h(r.tm_min,2)},"%n":function(){return"\n"},"%p":function(r){return r.tm_hour>=0&&r.tm_hour<12?"AM":"PM"},"%S":function(r){return h(r.tm_sec,2)},"%t":function(){return"\t"},"%u":function(r){return r.tm_wday||7},"%U":function(r){var n=new Date(r.tm_year+1900,0,1),e=0===n.getDay()?n:Cn(n,7-n.getDay()),t=new Date(r.tm_year+1900,r.tm_mon,r.tm_mday);if(v(e,t)<0){var a=_n(wn(t.getFullYear())?An:Tn,t.getMonth()-1)-31,o=31-e.getDate()+a+t.getDate();return h(Math.ceil(o/7),2)}return 0===v(e,n)?"01":"00"},"%V":function(r){var n,e=new Date(r.tm_year+1900,0,4),t=new Date(r.tm_year+1901,0,4),a=m(e),o=m(t),i=Cn(new Date(r.tm_year+1900,0,1),r.tm_yday);return v(i,a)<0?"53":v(o,i)<=0?"01":(n=a.getFullYear()<r.tm_year+1900?r.tm_yday+32-a.getDate():r.tm_yday+1-a.getDate(),h(Math.ceil(n/7),2))},"%w":function(r){return r.tm_wday},"%W":function(r){var n=new Date(r.tm_year,0,1),e=1===n.getDay()?n:Cn(n,0===n.getDay()?1:7-n.getDay()+1),t=new Date(r.tm_year+1900,r.tm_mon,r.tm_mday);if(v(e,t)<0){var a=_n(wn(t.getFullYear())?An:Tn,t.getMonth()-1)-31,o=31-e.getDate()+a+t.getDate();return h(Math.ceil(o/7),2)}return 0===v(e,n)?"01":"00"},"%y":function(r){return(r.tm_year+1900).toString().substring(2)},"%Y":function(r){return r.tm_year+1900},"%z":function(r){var n=r.tm_gmtoff,e=n>=0;return n=(n=Math.abs(n)/60)/60*100+n%60,(e?"+":"-")+String("0000"+n).slice(-4)},"%Z":function(r){return r.tm_zone},"%%":function(){return"%"}};for(var f in y)c.includes(f)&&(c=c.replace(new RegExp(f,"g"),y[f](u)));var w,_,b,A=(_=L(w=c)+1,b=new Array(_),B(w,b,0,b.length),b);return A.length>e?0:(function(r,e){n().set(r,e)}(A,r),A.length-1)}(r,e,t,a)}},Wn=(function(){var n={a:xn};function e(n,e){var t,a=n.exports;if(r.asm=a,J=r.asm.Z,t=r.asm.V,Z.unshift(t),hr.tlsInitFunctions.push(r.asm.Y),C=e,!g){var o=hr.unusedWorkers.length;hr.unusedWorkers.forEach((function(n){hr.loadWasmModuleToWorker(n,(function(){--o||function(n){if(er--,r.monitorRunDependencies&&r.monitorRunDependencies(er),0==er&&(null!==tr&&(clearInterval(tr),tr=null),ar)){var e=ar;ar=null,e()}}()}))}))}}function t(r){e(r.instance,r.module)}function a(r){return(_||"function"!=typeof fetch?Promise.resolve().then((function(){return cr(ur)})):fetch(ur,{credentials:"same-origin"}).then((function(r){if(!r.ok)throw"failed to load wasm binary file at '"+ur+"'";return r.arrayBuffer()})).catch((function(){return cr(ur)}))).then((function(r){return WebAssembly.instantiate(r,n)})).then(r,(function(r){A("failed to asynchronously prepare wasm: "+r),or(r)}))}if(g||(O(!g,"addRunDependency cannot be used in a pthread worker"),er++,r.monitorRunDependencies&&r.monitorRunDependencies(er)),r.instantiateWasm)try{return r.instantiateWasm(n,e)}catch(r){return A("Module.instantiateWasm callback failed with error: "+r),!1}(_||"function"!=typeof WebAssembly.instantiateStreaming||ir(ur)||"function"!=typeof fetch?a(t):fetch(ur,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,n).then(t,(function(r){return A("wasm streaming compile failed: "+r),A("falling back to ArrayBuffer instantiation"),a(t)}))}))).catch(f)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.V).apply(null,arguments)},r._malloc=function(){return(Wn=r._malloc=r.asm.W).apply(null,arguments)}),Pn=r._free=function(){return(Pn=r._free=r.asm.X).apply(null,arguments)},Sn=(r._emscripten_tls_init=function(){return(r._emscripten_tls_init=r.asm.Y).apply(null,arguments)},r.___getTypeName=function(){return(Sn=r.___getTypeName=r.asm._).apply(null,arguments)}),Fn=(r.___embind_register_native_and_builtin_types=function(){return(r.___embind_register_native_and_builtin_types=r.asm.$).apply(null,arguments)},r._emscripten_current_thread_process_queued_calls=function(){return(r._emscripten_current_thread_process_queued_calls=r.asm.aa).apply(null,arguments)},r._emscripten_register_main_browser_thread_id=function(){return(Fn=r._emscripten_register_main_browser_thread_id=r.asm.ba).apply(null,arguments)}),Rn=r._emscripten_main_browser_thread_id=function(){return(Rn=r._emscripten_main_browser_thread_id=r.asm.ca).apply(null,arguments)},In=r.__emscripten_do_dispatch_to_thread=function(){return(In=r.__emscripten_do_dispatch_to_thread=r.asm.da).apply(null,arguments)},jn=r._emscripten_sync_run_in_main_thread_4=function(){return(jn=r._emscripten_sync_run_in_main_thread_4=r.asm.ea).apply(null,arguments)},Mn=r._emscripten_main_thread_process_queued_calls=function(){return(Mn=r._emscripten_main_thread_process_queued_calls=r.asm.fa).apply(null,arguments)},On=r._emscripten_run_in_main_runtime_thread_js=function(){return(On=r._emscripten_run_in_main_runtime_thread_js=r.asm.ga).apply(null,arguments)},Dn=r.__emscripten_call_on_thread=function(){return(Dn=r.__emscripten_call_on_thread=r.asm.ha).apply(null,arguments)},Un=r.__emscripten_thread_init=function(){return(Un=r.__emscripten_thread_init=r.asm.ia).apply(null,arguments)},Bn=r._emscripten_get_global_libc=function(){return(Bn=r._emscripten_get_global_libc=r.asm.ja).apply(null,arguments)},Hn=r.___pthread_tsd_run_dtors=function(){return(Hn=r.___pthread_tsd_run_dtors=r.asm.ka).apply(null,arguments)},Ln=r._pthread_self=function(){return(Ln=r._pthread_self=r.asm.la).apply(null,arguments)},qn=r.stackSave=function(){return(qn=r.stackSave=r.asm.ma).apply(null,arguments)},Nn=r.stackRestore=function(){return(Nn=r.stackRestore=r.asm.na).apply(null,arguments)},Vn=r.stackAlloc=function(){return(Vn=r.stackAlloc=r.asm.oa).apply(null,arguments)},zn=r._emscripten_stack_set_limits=function(){return(zn=r._emscripten_stack_set_limits=r.asm.pa).apply(null,arguments)},Gn=r._memalign=function(){return(Gn=r._memalign=r.asm.qa).apply(null,arguments)},Yn=(r.dynCall_iiji=function(){return(r.dynCall_iiji=r.asm.ra).apply(null,arguments)},r.dynCall_jiji=function(){return(r.dynCall_jiji=r.asm.sa).apply(null,arguments)},r.dynCall_iiiiij=function(){return(r.dynCall_iiiiij=r.asm.ta).apply(null,arguments)},r.dynCall_iiiiijj=function(){return(r.dynCall_iiiiijj=r.asm.ua).apply(null,arguments)},r.dynCall_iiiiiijj=function(){return(r.dynCall_iiiiiijj=r.asm.va).apply(null,arguments)},r.dynCall_viijii=function(){return(r.dynCall_viijii=r.asm.wa).apply(null,arguments)},r.__emscripten_allow_main_runtime_queued_calls=60528),Qn=r.__emscripten_main_thread_futex=71380;function Jn(r){this.name="ExitStatus",this.message="Program terminated with exit("+r+")",this.status=r}function $n(n){if(n=n||h,!(er>0)){if(g)return s(r),nr(),void postMessage({cmd:"loaded"});!function(){if(!g){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)n=r.preRun.shift(),X.unshift(n);var n;fr(X)}}(),er>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),e()}),1)):e())}function e(){En||(En=!0,r.calledRun=!0,M||(nr(),s(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(!g){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)n=r.postRun.shift(),rr.unshift(n);var n;fr(rr)}}()))}}if(r.PThread=hr,r.PThread=hr,r.wasmMemory=T,r.ExitStatus=Jn,ar=function r(){En||$n(),En||(ar=r)},r.run=$n,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return g&&(E=!1,hr.initWorker()),$n(),r.ready},Tr=function(r){function n(){return T.buffer!=k&&Q(T.buffer),x}function e(){return T.buffer!=k&&Q(T.buffer),W}function t(){return T.buffer!=k&&Q(T.buffer),P}function o(){return T.buffer!=k&&Q(T.buffer),S}function i(){return T.buffer!=k&&Q(T.buffer),F}function u(){return T.buffer!=k&&Q(T.buffer),R}function c(){return T.buffer!=k&&Q(T.buffer),j}var s,f;(r=void 0!==(r=r||{})?r:{}).ready=new Promise((function(r,n){s=r,f=n}));var l,d={};for(l in r)r.hasOwnProperty(l)&&(d[l]=r[l]);var p,h=[],v="./this.program",m=function(r,n){throw n},g=r.ENVIRONMENT_IS_PTHREAD||!1,y="";function w(n){return r.locateFile?r.locateFile(n,y):y+n}y=self.location.href,y=0!==(y="file:///D:/altri/squoosh-web/squoosh-browser/codecs/jxl/enc/jxl_enc_mt.js").indexOf("blob:")?y.substr(0,y.lastIndexOf("/")+1):"",p=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)};var _,b=r.print||console.log.bind(console),A=r.printErr||console.warn.bind(console);for(l in d)d.hasOwnProperty(l)&&(r[l]=d[l]);d=null,r.arguments&&(h=r.arguments),r.thisProgram&&(v=r.thisProgram),r.quit&&(m=r.quit),Atomics.load,Atomics.store,Atomics.compareExchange,r.wasmBinary&&(_=r.wasmBinary);var T,C,E=r.noExitRuntime||!0;"object"!=typeof WebAssembly&&or("no native wasm support detected");var k,x,W,P,S,F,R,I,j,M=!1;function O(r,n){r||or("Assertion failed: "+n)}function D(r,n,e){for(var t=n+e,a="";!(n>=t);){var o=r[n++];if(!o)return a;if(128&o){var i=63&r[n++];if(192!=(224&o)){var u=63&r[n++];if((o=224==(240&o)?(15&o)<<12|i<<6|u:(7&o)<<18|i<<12|u<<6|63&r[n++])<65536)a+=String.fromCharCode(o);else{var c=o-65536;a+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else a+=String.fromCharCode((31&o)<<6|i)}else a+=String.fromCharCode(o)}return a}function U(r,n){return r?D(e(),r,n):""}function B(r,n,e,t){if(!(t>0))return 0;for(var a=e,o=e+t-1,i=0;i<r.length;++i){var u=r.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&r.charCodeAt(++i)),u<=127){if(e>=o)break;n[e++]=u}else if(u<=2047){if(e+1>=o)break;n[e++]=192|u>>6,n[e++]=128|63&u}else if(u<=65535){if(e+2>=o)break;n[e++]=224|u>>12,n[e++]=128|u>>6&63,n[e++]=128|63&u}else{if(e+3>=o)break;n[e++]=240|u>>18,n[e++]=128|u>>12&63,n[e++]=128|u>>6&63,n[e++]=128|63&u}}return n[e]=0,e-a}function H(r,n,t){return B(r,e(),n,t)}function L(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&r.charCodeAt(++e)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n}function q(r,n){for(var e="",a=0;!(a>=n/2);++a){var o=t()[r+2*a>>1];if(0==o)break;e+=String.fromCharCode(o)}return e}function N(r,n,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var a=n,o=(e-=2)<2*r.length?e/2:r.length,i=0;i<o;++i){var u=r.charCodeAt(i);t()[n>>1]=u,n+=2}return t()[n>>1]=0,n-a}function V(r){return 2*r.length}function z(r,n){for(var e=0,t="";!(e>=n/4);){var a=i()[r+4*e>>2];if(0==a)break;if(++e,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function G(r,n,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=n,a=t+e-4,o=0;o<r.length;++o){var u=r.charCodeAt(o);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&r.charCodeAt(++o)),i()[n>>2]=u,(n+=4)+4>a)break}return i()[n>>2]=0,n-t}function Y(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&++e,n+=4}return n}function Q(n){k=n,r.HEAP8=x=new Int8Array(n),r.HEAP16=P=new Int16Array(n),r.HEAP32=F=new Int32Array(n),r.HEAPU8=W=new Uint8Array(n),r.HEAPU16=S=new Uint16Array(n),r.HEAPU32=R=new Uint32Array(n),r.HEAPF32=I=new Float32Array(n),r.HEAPF64=j=new Float64Array(n)}g&&(k=r.buffer);var J,$=r.INITIAL_MEMORY||16777216;if(g)T=r.wasmMemory,k=r.buffer;else if(r.wasmMemory)T=r.wasmMemory;else if(!((T=new WebAssembly.Memory({initial:$/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw A("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");T&&(k=T.buffer),$=k.byteLength,Q(k);var X=[],Z=[],K=[],rr=[];function nr(){g||fr(Z)}var er=0,tr=null,ar=null;function or(n){r.onAbort&&r.onAbort(n),g&&console.error("Pthread aborting at "+(new Error).stack),A(n+=""),M=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var e=new WebAssembly.RuntimeError(n);throw f(e),e}function ir(r){return r.startsWith("data:application/octet-stream;base64,")}if(r.preloadedImages={},r.preloadedAudios={},r.locateFile)ir(ur="jxl_enc_mt.wasm")||(ur=w(ur));else var ur=new URL(a(883),a.b).toString();function cr(r){try{if(r==ur&&_)return new Uint8Array(_);if(p)return p(r);throw"both async and sync fetching of the wasm failed"}catch(r){or(r)}}var sr={61452:function(){throw"Canceled!"},61470:function(r,n){setTimeout((function(){In(r,n)}),0)}};function fr(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?J.get(t)():J.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(r)}}function lr(r,e){if(r<=0||r>n().length||!0&r||e<0)return-28;if(0==e)return 0;e>=2147483647&&(e=1/0);var t=Atomics.load(i(),Qn>>2),a=0;if(t==r&&Atomics.compareExchange(i(),Qn>>2,t,0)==t&&(a=1,--e<=0))return 1;var o=Atomics.notify(i(),r>>2,e);if(o>=0)return o+a;throw"Atomics.notify returned an unexpected value "+o}function dr(r){if(g)throw"Internal Error! cleanupThread() can only ever be called from main application thread!";if(!r)throw"Internal Error! Null pthread_ptr in cleanupThread!";var n=hr.pthreads[r];if(n){i()[r+12>>2]=0;var e=n.worker;hr.returnWorkerToPool(e)}}r._emscripten_futex_wake=lr;var pr,hr={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],initMainThreadBlock:function(){for(var r=navigator.hardwareConcurrency,n=0;n<r;++n)hr.allocateUnusedWorker()},initRuntime:function(){for(var r=Wn(228),n=0;n<57;++n)u()[r/4+n]=0;i()[r+12>>2]=r;var e=r+152;i()[e>>2]=e;var t=Wn(512);for(n=0;n<128;++n)u()[t/4+n]=0;Atomics.store(u(),r+100>>2,t),Atomics.store(u(),r+40>>2,r),Un(r,!1,1),Fn(r)},initWorker:function(){},pthreads:{},threadExitHandlers:[],runExitHandlers:function(){for(;hr.threadExitHandlers.length>0;)hr.threadExitHandlers.pop()();g&&Ln()&&Hn()},runExitHandlersAndDeinitThread:function(r,n){Atomics.store(u(),r+56>>2,1),Atomics.store(u(),r+60>>2,0),hr.runExitHandlers(),Atomics.store(u(),r+4>>2,n),Atomics.store(u(),r+0>>2,1),lr(r+0,2147483647),Un(0,0,0)},setExitStatus:function(r){},threadExit:function(r){var n=Ln();n&&(hr.runExitHandlersAndDeinitThread(n,r),g&&postMessage({cmd:"exit"}))},threadCancel:function(){hr.runExitHandlersAndDeinitThread(Ln(),-1),postMessage({cmd:"cancelDone"})},terminateAllThreads:function(){for(var r in hr.pthreads)(t=hr.pthreads[r])&&t.worker&&hr.returnWorkerToPool(t.worker);hr.pthreads={};for(var n=0;n<hr.unusedWorkers.length;++n)(e=hr.unusedWorkers[n]).terminate();for(hr.unusedWorkers=[],n=0;n<hr.runningWorkers.length;++n){var e,t=(e=hr.runningWorkers[n]).pthread;hr.freeThreadData(t),e.terminate()}hr.runningWorkers=[]},freeThreadData:function(r){if(r){if(r.threadInfoStruct){var n=i()[r.threadInfoStruct+100>>2];i()[r.threadInfoStruct+100>>2]=0,Pn(n),Pn(r.threadInfoStruct)}r.threadInfoStruct=0,r.allocatedOwnStack&&r.stackBase&&Pn(r.stackBase),r.stackBase=0,r.worker&&(r.worker.pthread=null)}},returnWorkerToPool:function(r){hr.runWithoutMainThreadQueuedCalls((function(){delete hr.pthreads[r.pthread.threadInfoStruct],hr.unusedWorkers.push(r),hr.runningWorkers.splice(hr.runningWorkers.indexOf(r),1),hr.freeThreadData(r.pthread),r.pthread=void 0}))},runWithoutMainThreadQueuedCalls:function(r){i()[Yn>>2]=0;try{r()}finally{i()[Yn>>2]=1}},receiveObjectTransfer:function(r){},threadInit:function(){for(var r in hr.tlsInitFunctions)hr.tlsInitFunctions[r]()},loadWasmModuleToWorker:function(n,e){n.onmessage=function(t){var a=t.data,o=a.cmd;if(n.pthread&&(hr.currentProxiedOperationCallerThread=n.pthread.threadInfoStruct),a.targetThread&&a.targetThread!=Ln()){var c=hr.pthreads[a.targetThread];return c?c.worker.postMessage(t.data,a.transferList):console.error('Internal error! Worker sent a message "'+o+'" to target pthread '+a.targetThread+", but that thread no longer exists!"),void(hr.currentProxiedOperationCallerThread=void 0)}if("processQueuedMainThreadWork"===o)Mn();else if("spawnThread"===o)gn(t.data);else if("cleanupThread"===o)dr(a.thread);else if("killThread"===o)!function(r){if(g)throw"Internal Error! killThread() can only ever be called from main application thread!";if(!r)throw"Internal Error! Null pthread_ptr in killThread!";i()[r+12>>2]=0;var n=hr.pthreads[r];n.worker.terminate(),hr.freeThreadData(n),hr.runningWorkers.splice(hr.runningWorkers.indexOf(n.worker),1),n.worker.pthread=void 0}(a.thread);else if("cancelThread"===o)!function(r){if(g)throw"Internal Error! cancelThread() can only ever be called from main application thread!";if(!r)throw"Internal Error! Null pthread_ptr in cancelThread!";hr.pthreads[r].worker.postMessage({cmd:"cancel"})}(a.thread);else if("loaded"===o)n.loaded=!0,e&&e(n),n.runPthread&&(n.runPthread(),delete n.runPthread);else if("print"===o)b("Thread "+a.threadId+": "+a.text);else if("printErr"===o)A("Thread "+a.threadId+": "+a.text);else if("alert"===o)alert("Thread "+a.threadId+": "+a.text);else if("exit"===o)n.pthread&&Atomics.load(u(),n.pthread.threadInfoStruct+64>>2)&&hr.returnWorkerToPool(n);else if("exitProcess"===o)try{!function(n,e){if(g)throw postMessage({cmd:"exitProcess",returnCode:n}),new Jn(n);vr()||(hr.terminateAllThreads(),r.onExit&&r.onExit(n),M=!0),m(n,new Jn(n))}(a.returnCode)}catch(t){if(t instanceof Jn)return;throw t}else"cancelDone"===o?hr.returnWorkerToPool(n):"objectTransfer"===o?hr.receiveObjectTransfer(t.data):"setimmediate"===t.data.target?n.postMessage(t.data):A("worker sent an unknown command "+o);hr.currentProxiedOperationCallerThread=void 0},n.onerror=function(r){A("pthread sent an error! "+r.filename+":"+r.lineno+": "+r.message)},n.postMessage({cmd:"load",urlOrBlob:r.mainScriptUrlOrBlob,wasmMemory:T,wasmModule:C})},allocateUnusedWorker:function(){if(r.locateFile){var n=w("jxl_enc_mt.worker.js");hr.unusedWorkers.push(new Worker(n))}else hr.unusedWorkers.push(new Worker(new URL(a.p+a.u(991),a.b)))},getNewWorker:function(){return 0==hr.unusedWorkers.length&&(hr.allocateUnusedWorker(),hr.loadWasmModuleToWorker(hr.unusedWorkers[0])),hr.unusedWorkers.pop()},busySpinWait:function(r){for(var n=performance.now()+r;performance.now()<n;);}};function vr(){return E||!1}function mr(r){this.excPtr=r,this.ptr=r-16,this.set_type=function(r){i()[this.ptr+8>>2]=r},this.get_type=function(){return i()[this.ptr+8>>2]},this.set_destructor=function(r){i()[this.ptr+0>>2]=r},this.get_destructor=function(){return i()[this.ptr+0>>2]},this.set_refcount=function(r){i()[this.ptr+4>>2]=r},this.set_caught=function(r){r=r?1:0,n()[this.ptr+12>>0]=r},this.get_caught=function(){return 0!=n()[this.ptr+12>>0]},this.set_rethrown=function(r){r=r?1:0,n()[this.ptr+13>>0]=r},this.get_rethrown=function(){return 0!=n()[this.ptr+13>>0]},this.init=function(r,n){this.set_type(r),this.set_destructor(n),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){Atomics.add(i(),this.ptr+4>>2,1)},this.release_ref=function(){return 1===Atomics.sub(i(),this.ptr+4>>2,1)}}r.establishStackSpace=function(r,n){zn(r,n),Nn(r)},r.invokeEntryPoint=function(r,n){return J.get(r)(n)},r.keepRuntimeAlive=vr,pr=g?function(){return performance.now()-r.__performance_now_clock_drift}:function(){return performance.now()};var gr={};function yr(r){for(;r.length;){var n=r.pop();r.pop()(n)}}function wr(r){return this.fromWireType(u()[r>>2])}var _r={},br={},Ar={};function Tr(r){if(void 0===r)return"_unknown";var n=(r=r.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return n>=48&&n<=57?"_"+r:r}function Cr(r,n){return r=Tr(r),new Function("body","return function "+r+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(n)}function Er(r,n){var e=Cr(n,(function(r){this.name=n,this.message=r;var e=new Error(r).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var kr=void 0;function xr(r){throw new kr(r)}function Wr(r,n,e){function t(n){var t=e(n);t.length!==r.length&&xr("Mismatched type converter count");for(var a=0;a<r.length;++a)jr(r[a],t[a])}r.forEach((function(r){Ar[r]=n}));var a=new Array(n.length),o=[],i=0;n.forEach((function(r,n){br.hasOwnProperty(r)?a[n]=br[r]:(o.push(r),_r.hasOwnProperty(r)||(_r[r]=[]),_r[r].push((function(){a[n]=br[r],++i===o.length&&t(a)})))})),0===o.length&&t(a)}function Pr(r){switch(r){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+r)}}var Sr=void 0;function Fr(r){for(var n="",t=r;e()[t];)n+=Sr[e()[t++]];return n}var Rr=void 0;function Ir(r){throw new Rr(r)}function jr(r,n,e){if(e=e||{},!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=n.name;if(r||Ir('type "'+t+'" must have a positive integer typeid pointer'),br.hasOwnProperty(r)){if(e.ignoreDuplicateRegistrations)return;Ir("Cannot register type '"+t+"' twice")}if(br[r]=n,delete Ar[r],_r.hasOwnProperty(r)){var a=_r[r];delete _r[r],a.forEach((function(r){r()}))}}var Mr=[],Or=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Dr(r){r>4&&0==--Or[r].refcount&&(Or[r]=void 0,Mr.push(r))}function Ur(r){switch(r){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=Mr.length?Mr.pop():Or.length;return Or[n]={refcount:1,value:r},n}}function Br(r){if(null===r)return"null";var n=typeof r;return"object"===n||"array"===n||"function"===n?r.toString():""+r}function Hr(r,n){switch(n){case 2:return function(r){return this.fromWireType((T.buffer!=k&&Q(T.buffer),I)[r>>2])};case 3:return function(r){return this.fromWireType(c()[r>>3])};default:throw new TypeError("Unknown float type: "+r)}}function Lr(n,e,t){return n.includes("j")?function(n,e,t){var a=r["dynCall_"+n];return t&&t.length?a.apply(null,[e].concat(t)):a.call(null,e)}(n,e,t):J.get(e).apply(null,t)}function qr(r,n){var e,t,a,o=(r=Fr(r)).includes("j")?(e=r,t=n,a=[],function(){a.length=arguments.length;for(var r=0;r<arguments.length;r++)a[r]=arguments[r];return Lr(e,t,a)}):J.get(n);return"function"!=typeof o&&Ir("unknown function pointer with signature "+r+": "+n),o}var Nr=void 0;function Vr(r){var n=Sn(r),e=Fr(n);return Pn(n),e}function zr(r,a,c){switch(a){case 0:return c?function(r){return n()[r]}:function(r){return e()[r]};case 1:return c?function(r){return t()[r>>1]}:function(r){return o()[r>>1]};case 2:return c?function(r){return i()[r>>2]}:function(r){return u()[r>>2]};default:throw new TypeError("Unknown integer type: "+r)}}var Gr={};function Yr(){return"object"==typeof globalThis?globalThis:Function("return this")()}function Qr(r,n){var e=br[r];return void 0===e&&Ir(n+" has unknown type "+Vr(r)),e}var Jr={},$r=[];function Xr(r,e,t){if(r<=0||r>n().length||!0&r)return-28;var a=Atomics.wait(i(),r>>2,e,t);if("timed-out"===a)return-73;if("not-equal"===a)return-6;if("ok"===a)return 0;throw"Atomics.wait returned an unexpected value "+a}function Zr(r,n){for(var e=arguments.length-2,t=qn(),a=e,o=Vn(8*a),i=o>>3,u=0;u<e;u++){var s=arguments[2+u];c()[i+u]=s}var f=On(r,a,o,n);return Nn(t),f}var Kr=[];function rn(r){try{return T.grow(r-k.byteLength+65535>>>16),Q(T.buffer),1}catch(r){}}var nn={inEventHandler:0,removeAllEventListeners:function(){for(var r=nn.eventHandlers.length-1;r>=0;--r)nn._removeHandler(r);nn.eventHandlers=[],nn.deferredCalls=[]},registerRemoveEventListeners:function(){nn.removeEventListenersRegistered||(K.push(nn.removeAllEventListeners),nn.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(r,n,e){function t(r,n){if(r.length!=n.length)return!1;for(var e in r)if(r[e]!=n[e])return!1;return!0}for(var a in nn.deferredCalls){var o=nn.deferredCalls[a];if(o.targetFunction==r&&t(o.argsList,e))return}nn.deferredCalls.push({targetFunction:r,precedence:n,argsList:e}),nn.deferredCalls.sort((function(r,n){return r.precedence<n.precedence}))},removeDeferredCalls:function(r){for(var n=0;n<nn.deferredCalls.length;++n)nn.deferredCalls[n].targetFunction==r&&(nn.deferredCalls.splice(n,1),--n)},canPerformEventHandlerRequests:function(){return nn.inEventHandler&&nn.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(nn.canPerformEventHandlerRequests())for(var r=0;r<nn.deferredCalls.length;++r){var n=nn.deferredCalls[r];nn.deferredCalls.splice(r,1),--r,n.targetFunction.apply(null,n.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:function(r,n){for(var e=0;e<nn.eventHandlers.length;++e)nn.eventHandlers[e].target!=r||n&&n!=nn.eventHandlers[e].eventTypeString||nn._removeHandler(e--)},_removeHandler:function(r){var n=nn.eventHandlers[r];n.target.removeEventListener(n.eventTypeString,n.eventListenerFunc,n.useCapture),nn.eventHandlers.splice(r,1)},registerOrRemoveHandler:function(r){var n=function(n){++nn.inEventHandler,nn.currentEventHandler=r,nn.runDeferredCalls(),r.handlerFunc(n),nn.runDeferredCalls(),--nn.inEventHandler};if(r.callbackfunc)r.eventListenerFunc=n,r.target.addEventListener(r.eventTypeString,n,r.useCapture),nn.eventHandlers.push(r),nn.registerRemoveEventListeners();else for(var e=0;e<nn.eventHandlers.length;++e)nn.eventHandlers[e].target==r.target&&nn.eventHandlers[e].eventTypeString==r.eventTypeString&&nn._removeHandler(e--)},queueEventHandlerOnThread_iiii:function(r,n,e,t,a){var o=qn(),u=Vn(12);i()[u>>2]=e,i()[u+4>>2]=t,i()[u+8>>2]=a,Dn(0,r,637534208,n,t,u),Nn(o)},getTargetThreadForEventCallback:function(r){switch(r){case 1:return 0;case 2:return hr.currentProxiedOperationCallerThread;default:return r}},getNodeNameForTarget:function(r){return r?r==window?"#window":r==screen?"#screen":r&&r.nodeName?r.nodeName:"":""},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}},en=[0,"undefined"!=typeof document?document:0,"undefined"!=typeof window?window:0];function tn(r){return function(r){var n;return r=(n=r)>2?U(n):n,en[r]||("undefined"!=typeof document?document.querySelector(r):void 0)}(r)}function an(r,n,e){var t=tn(r);if(!t)return-4;if(t.canvasSharedPtr&&(i()[t.canvasSharedPtr>>2]=n,i()[t.canvasSharedPtr+4>>2]=e),!t.offscreenCanvas&&t.controlTransferredOffscreen)return t.canvasSharedPtr?(function(r,n,e,t){!function(r,n,e,t){var a,o,u,c=qn(),s=Vn(12),f=0;n&&(o=L(a=n)+1,H(a,u=Wn(o),o),f=u),i()[s>>2]=f,i()[s+4>>2]=e,i()[s+8>>2]=t,Dn(0,r,657457152,0,f,s),Nn(c)}(r,n=n?U(n):"",e,t)}(i()[t.canvasSharedPtr+8>>2],r,n,e),1):-4;t.offscreenCanvas&&(t=t.offscreenCanvas);var a=!1;if(t.GLctxObject&&t.GLctxObject.GLctx){var o=t.GLctxObject.GLctx.getParameter(2978);a=0===o[0]&&0===o[1]&&o[2]===t.width&&o[3]===t.height}return t.width=n,t.height=e,a&&t.GLctxObject.GLctx.viewport(0,0,n,e),0}function on(r,n,e){return g?Zr(2,1,r,n,e):an(r,n,e)}var un={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:{},offscreenCanvases:{},queries:[],stringCache:{},unpackAlignment:4,recordError:function(r){un.lastError||(un.lastError=r)},getNewId:function(r){for(var n=un.counter++,e=r.length;e<n;e++)r[e]=null;return n},getSource:function(r,n,e,t){for(var a="",o=0;o<n;++o){var u=t?i()[t+4*o>>2]:-1;a+=U(i()[e+4*o>>2],u<0?void 0:u)}return a},createContext:function(r,n){r.getContextSafariWebGL2Fixed||(r.getContextSafariWebGL2Fixed=r.getContext,r.getContext=function(n,e){var t=r.getContextSafariWebGL2Fixed(n,e);return"webgl"==n==t instanceof WebGLRenderingContext?t:null});var e=r.getContext("webgl",n);return e?un.registerContext(e,n):0},registerContext:function(r,n){var e=Wn(8);i()[e+4>>2]=Ln();var t={handle:e,attributes:n,version:n.majorVersion,GLctx:r};return r.canvas&&(r.canvas.GLctxObject=t),un.contexts[e]=t,(void 0===n.enableExtensionsByDefault||n.enableExtensionsByDefault)&&un.initExtensions(t),e},makeContextCurrent:function(n){return un.currentContext=un.contexts[n],r.ctx=bn=un.currentContext&&un.currentContext.GLctx,!(n&&!bn)},getContext:function(r){return un.contexts[r]},deleteContext:function(r){un.currentContext===un.contexts[r]&&(un.currentContext=null),"object"==typeof nn&&nn.removeAllHandlersOnTarget(un.contexts[r].GLctx.canvas),un.contexts[r]&&un.contexts[r].GLctx.canvas&&(un.contexts[r].GLctx.canvas.GLctxObject=void 0),Pn(un.contexts[r].handle),un.contexts[r]=null},initExtensions:function(r){if(r||(r=un.currentContext),!r.initExtensionsDone){r.initExtensionsDone=!0;var n,e=r.GLctx;!function(r){var n=r.getExtension("ANGLE_instanced_arrays");n&&(r.vertexAttribDivisor=function(r,e){n.vertexAttribDivisorANGLE(r,e)},r.drawArraysInstanced=function(r,e,t,a){n.drawArraysInstancedANGLE(r,e,t,a)},r.drawElementsInstanced=function(r,e,t,a,o){n.drawElementsInstancedANGLE(r,e,t,a,o)})}(e),function(r){var n=r.getExtension("OES_vertex_array_object");n&&(r.createVertexArray=function(){return n.createVertexArrayOES()},r.deleteVertexArray=function(r){n.deleteVertexArrayOES(r)},r.bindVertexArray=function(r){n.bindVertexArrayOES(r)},r.isVertexArray=function(r){return n.isVertexArrayOES(r)})}(e),function(r){var n=r.getExtension("WEBGL_draw_buffers");n&&(r.drawBuffers=function(r,e){n.drawBuffersWEBGL(r,e)})}(e),e.disjointTimerQueryExt=e.getExtension("EXT_disjoint_timer_query"),(n=e).multiDrawWebgl=n.getExtension("WEBGL_multi_draw"),(e.getSupportedExtensions()||[]).forEach((function(r){r.includes("lose_context")||r.includes("debug")||e.getExtension(r)}))}}},cn=["default","low-power","high-performance"],sn={};function fn(){if(!fn.strings){var r={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:v||"./this.program"};for(var n in sn)r[n]=sn[n];var e=[];for(var n in r)e.push(n+"="+r[n]);fn.strings=e}return fn.strings}var ln={mappings:{},buffers:[null,[],[]],printChar:function(r,n){var e=ln.buffers[r];0===n||10===n?((1===r?b:A)(D(e,0)),e.length=0):e.push(n)},varargs:void 0,get:function(){return ln.varargs+=4,i()[ln.varargs-4>>2]},getStr:function(r){return U(r)},get64:function(r,n){return r}};function dn(r,e){if(g)return Zr(3,1,r,e);var t=0;return fn().forEach((function(a,o){var u=e+t;i()[r+4*o>>2]=u,function(r,e,t){for(var a=0;a<r.length;++a)n()[e++>>0]=r.charCodeAt(a);n()[e>>0]=0}(a,u),t+=a.length+1})),0}function pn(r,n){if(g)return Zr(4,1,r,n);var e=fn();i()[r>>2]=e.length;var t=0;return e.forEach((function(r){t+=r.length+1})),i()[n>>2]=t,0}function hn(r){return g?Zr(5,1,r):0}function vn(r,n,e,t,a){if(g)return Zr(6,1,r,n,e,t,a)}function mn(r,n,t,a){if(g)return Zr(7,1,r,n,t,a);for(var o=0,u=0;u<t;u++){for(var c=i()[n+8*u>>2],s=i()[n+(8*u+4)>>2],f=0;f<s;f++)ln.printChar(r,e()[c+f]);o+=s}return i()[a>>2]=o,0}function gn(r){if(g)throw"Internal Error! spawnThread() can only ever be called from main application thread!";var n=hr.getNewWorker();if(!n)return 6;if(void 0!==n.pthread)throw"Internal error!";if(!r.pthread_ptr)throw"Internal error, no pthread ptr!";hr.runningWorkers.push(n);for(var e=Wn(512),t=0;t<128;++t)i()[e+4*t>>2]=0;var a=r.stackBase+r.stackSize,o=hr.pthreads[r.pthread_ptr]={worker:n,stackBase:r.stackBase,stackSize:r.stackSize,allocatedOwnStack:r.allocatedOwnStack,threadInfoStruct:r.pthread_ptr},c=o.threadInfoStruct>>2;Atomics.store(u(),c+16,r.detached),Atomics.store(u(),c+25,e),Atomics.store(u(),c+10,o.threadInfoStruct),Atomics.store(u(),c+20,r.stackSize),Atomics.store(u(),c+19,a),Atomics.store(u(),c+26,r.stackSize),Atomics.store(u(),c+28,a),Atomics.store(u(),c+29,r.detached);var s=Bn()+40;Atomics.store(u(),c+43,s),n.pthread=o;var f={cmd:"run",start_routine:r.startRoutine,arg:r.arg,threadInfoStruct:r.pthread_ptr,stackBase:r.stackBase,stackSize:r.stackSize};return n.runPthread=function(){f.time=performance.now(),n.postMessage(f,r.transferList)},n.loaded&&(n.runPthread(),delete n.runPthread),0}function yn(){if(g){var r=Ln();if(r&&!Atomics.load(u(),r+56>>2)&&2==Atomics.load(u(),r+0>>2))throw"Canceled!"}}function wn(r){return r%4==0&&(r%100!=0||r%400==0)}function _n(r,n){for(var e=0,t=0;t<=n;e+=r[t++]);return e}var bn,An=[31,29,31,30,31,30,31,31,30,31,30,31],Tn=[31,28,31,30,31,30,31,31,30,31,30,31];function Cn(r,n){for(var e=new Date(r.getTime());n>0;){var t=wn(e.getFullYear()),a=e.getMonth(),o=(t?An:Tn)[a];if(!(n>o-e.getDate()))return e.setDate(e.getDate()+n),e;n-=o-e.getDate()+1,e.setDate(1),a<11?e.setMonth(a+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}g||hr.initMainThreadBlock(),kr=r.InternalError=Er(Error,"InternalError"),function(){for(var r=new Array(256),n=0;n<256;++n)r[n]=String.fromCharCode(n);Sr=r}(),Rr=r.BindingError=Er(Error,"BindingError"),r.count_emval_handles=function(){for(var r=0,n=5;n<Or.length;++n)void 0!==Or[n]&&++r;return r},r.get_first_emval=function(){for(var r=5;r<Or.length;++r)if(void 0!==Or[r])return Or[r];return null},Nr=r.UnboundTypeError=Er(Error,"UnboundTypeError");var En,kn=[null,function(r,n){if(g)return Zr(1,1,r,n)},on,dn,pn,hn,vn,mn],xn={e:function(r,n,e,t){or("Assertion failed: "+U(r)+", at: "+[n?U(n):"unknown filename",e,t?U(t):"unknown function"])},M:function(r){return Wn(r+16)+16},q:function(r,n){return e=r,t=n,void hr.threadExitHandlers.push((function(){J.get(e)(t)}));var e,t},B:function(r,n,e){throw new mr(r).init(n,e),r},s:function(r){var n=gr[r];delete gr[r];var e=n.rawConstructor,t=n.rawDestructor,a=n.fields;Wr([r],a.map((function(r){return r.getterReturnType})).concat(a.map((function(r){return r.setterArgumentType}))),(function(r){var o={};return a.forEach((function(n,e){var t=n.fieldName,i=r[e],u=n.getter,c=n.getterContext,s=r[e+a.length],f=n.setter,l=n.setterContext;o[t]={read:function(r){return i.fromWireType(u(c,r))},write:function(r,n){var e=[];f(l,r,s.toWireType(e,n)),yr(e)}}})),[{name:n.name,fromWireType:function(r){var n={};for(var e in o)n[e]=o[e].read(r);return t(r),n},toWireType:function(r,n){for(var a in o)if(!(a in n))throw new TypeError('Missing field:  "'+a+'"');var i=e();for(a in o)o[a].write(i,n[a]);return null!==r&&r.push(t,i),i},argPackAdvance:8,readValueFromPointer:wr,destructorFunction:t}]}))},w:function(r,n,e,t,a){},Q:function(r,e,a,o,u){var c=Pr(a);jr(r,{name:e=Fr(e),fromWireType:function(r){return!!r},toWireType:function(r,n){return n?o:u},argPackAdvance:8,readValueFromPointer:function(r){var o;if(1===a)o=n();else if(2===a)o=t();else{if(4!==a)throw new TypeError("Unknown boolean type size: "+e);o=i()}return this.fromWireType(o[r>>c])},destructorFunction:null})},P:function(r,n){jr(r,{name:n=Fr(n),fromWireType:function(r){var n=Or[r].value;return Dr(r),n},toWireType:function(r,n){return Ur(n)},argPackAdvance:8,readValueFromPointer:wr,destructorFunction:null})},o:function(r,n,e){var t=Pr(e);jr(r,{name:n=Fr(n),fromWireType:function(r){return r},toWireType:function(r,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+Br(n)+'" to '+this.name);return n},argPackAdvance:8,readValueFromPointer:Hr(n,t),destructorFunction:null})},r:function(n,e,t,a,o,u){var c=function(r,n){for(var e=[],t=0;t<r;t++)e.push(i()[(n>>2)+t]);return e}(e,t);n=Fr(n),o=qr(a,o),function(n,e,t){r.hasOwnProperty(n)?((void 0===t||void 0!==r[n].overloadTable&&void 0!==r[n].overloadTable[t])&&Ir("Cannot register public name '"+n+"' twice"),function(r,n,e){if(void 0===r[n].overloadTable){var t=r[n];r[n]=function(){return r[n].overloadTable.hasOwnProperty(arguments.length)||Ir("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+r[n].overloadTable+")!"),r[n].overloadTable[arguments.length].apply(this,arguments)},r[n].overloadTable=[],r[n].overloadTable[t.argCount]=t}}(r,n,n),r.hasOwnProperty(t)&&Ir("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),r[n].overloadTable[t]=e):(r[n]=e,void 0!==t&&(r[n].numArguments=t))}(n,(function(){!function(r,n){var e=[],t={};throw n.forEach((function r(n){t[n]||br[n]||(Ar[n]?Ar[n].forEach(r):(e.push(n),t[n]=!0))})),new Nr(r+": "+e.map(Vr).join([", "]))}("Cannot call "+n+" due to unbound types",c)}),e-1),Wr([],c,(function(t){var a=[t[0],null].concat(t.slice(1));return function(n,e,t){r.hasOwnProperty(n)||xr("Replacing nonexistant public symbol"),void 0!==r[n].overloadTable&&void 0!==t?r[n].overloadTable[t]=e:(r[n]=e,r[n].argCount=t)}(n,function(r,n,e,t,a){var o=n.length;o<2&&Ir("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==n[1]&&null!==e,u=!1,c=1;c<n.length;++c)if(null!==n[c]&&void 0===n[c].destructorFunction){u=!0;break}var s="void"!==n[0].name,f="",l="";for(c=0;c<o-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+Tr(r)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+r+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[Ir,t,a,yr,n[0],n[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<o-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+n[c+2].name+"\n",h.push("argType"+c),v.push(n[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<n.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==n[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+n[c].name+"\n",h.push(m+"_dtor"),v.push(n[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(r,n){if(!(r instanceof Function))throw new TypeError("new_ called with constructor type "+typeof r+" which is not a function");var e=Cr(r.name||"unknownFunctionName",(function(){}));e.prototype=r.prototype;var t=new e,a=r.apply(t,n);return a instanceof Object?a:t}(Function,h).apply(null,v)}(n,a,null,o,u),e-1),[]}))},d:function(r,n,e,t,a){n=Fr(n),-1===a&&(a=4294967295);var o=Pr(e),i=function(r){return r};if(0===t){var u=32-8*e;i=function(r){return r<<u>>>u}}var c=n.includes("unsigned");jr(r,{name:n,fromWireType:i,toWireType:function(r,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+Br(e)+'" to '+this.name);if(e<t||e>a)throw new TypeError('Passing a number "'+Br(e)+'" from JS side to C/C++ side to an argument of type "'+n+'", which is outside the valid range ['+t+", "+a+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:zr(n,o,0!==t),destructorFunction:null})},c:function(r,n,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function a(r){r>>=2;var n=u(),e=n[r],a=n[r+1];return new t(k,a,e)}jr(r,{name:e=Fr(e),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},p:function(r,n){var t="std::string"===(n=Fr(n));jr(r,{name:n,fromWireType:function(r){var n,a=u()[r>>2];if(t)for(var o=r+4,i=0;i<=a;++i){var c=r+4+i;if(i==a||0==e()[c]){var s=U(o,c-o);void 0===n?n=s:(n+=String.fromCharCode(0),n+=s),o=c+1}}else{var f=new Array(a);for(i=0;i<a;++i)f[i]=String.fromCharCode(e()[r+4+i]);n=f.join("")}return Pn(r),n},toWireType:function(r,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var a="string"==typeof n;a||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||Ir("Cannot pass non-string to std::string");var o=(t&&a?function(){return L(n)}:function(){return n.length})(),i=Wn(4+o+1);if(u()[i>>2]=o,t&&a)H(n,i+4,o+1);else if(a)for(var c=0;c<o;++c){var s=n.charCodeAt(c);s>255&&(Pn(i),Ir("String has UTF-16 code units that do not fit in 8 bits")),e()[i+4+c]=s}else for(c=0;c<o;++c)e()[i+4+c]=n[c];return null!==r&&r.push(Pn,i),i},argPackAdvance:8,readValueFromPointer:wr,destructorFunction:function(r){Pn(r)}})},k:function(r,n,e){var t,a,i,c,s;e=Fr(e),2===n?(t=q,a=N,c=V,i=function(){return o()},s=1):4===n&&(t=z,a=G,c=Y,i=function(){return u()},s=2),jr(r,{name:e,fromWireType:function(r){for(var e,a=u()[r>>2],o=i(),c=r+4,f=0;f<=a;++f){var l=r+4+f*n;if(f==a||0==o[l>>s]){var d=t(c,l-c);void 0===e?e=d:(e+=String.fromCharCode(0),e+=d),c=l+n}}return Pn(r),e},toWireType:function(r,t){"string"!=typeof t&&Ir("Cannot pass non-string to C++ string type "+e);var o=c(t),i=Wn(4+o+n);return u()[i>>2]=o>>s,a(t,i+4,o+n),null!==r&&r.push(Pn,i),i},argPackAdvance:8,readValueFromPointer:wr,destructorFunction:function(r){Pn(r)}})},t:function(r,n,e,t,a,o){gr[r]={name:Fr(n),rawConstructor:qr(e,t),rawDestructor:qr(a,o),fields:[]}},f:function(r,n,e,t,a,o,i,u,c,s){gr[r].fields.push({fieldName:Fr(n),getterReturnType:e,getter:qr(t,a),getterContext:o,setterArgumentType:i,setter:qr(u,c),setterContext:s})},R:function(r,n){jr(r,{isVoid:!0,name:n=Fr(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(r,n){}})},L:function(r,n){if(r==n)postMessage({cmd:"processQueuedMainThreadWork"});else if(g)postMessage({targetThread:r,cmd:"processThreadQueue"});else{var e=hr.pthreads[r],t=e&&e.worker;if(!t)return;t.postMessage({cmd:"processThreadQueue"})}return 1},i:Dr,U:function(r){return 0===r?Ur(Yr()):(r=void 0===(e=Gr[n=r])?Fr(n):e,Ur(Yr()[r]));var n,e},T:function(r){r>4&&(Or[r].refcount+=1)},u:function(n,e,t,a){n=function(r){return r||Ir("Cannot use deleted val. handle = "+r),Or[r].value}(n);var o=Jr[e];return o||(o=function(n){for(var e="",t=0;t<n;++t)e+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+n+"(constructor, argTypes, args) {\n";for(t=0;t<n;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(Qr,r,Ur)}(e),Jr[e]=o),o(n,t,a)},b:function(){or()},n:function(r,n,t){var a=function(r,n){var t;for($r.length=0,n>>=2;t=e()[r++];){var a=t<105;a&&1&n&&n++,$r.push(a?c()[n++>>1]:i()[n]),++n}return $r}(n,t);return sr[r].apply(null,a)},H:function(){},m:function(r,n){},h:Xr,g:lr,j:pr,z:function(r,n,t){e().copyWithin(r,n,n+t)},G:function(){return navigator.hardwareConcurrency},I:function(r,n,e){Kr.length=n;for(var t=e>>3,a=0;a<n;a++)Kr[a]=c()[t+a];return(r<0?sr[-r-1]:kn[r]).apply(null,Kr)},A:function(r){var n=e().length;if((r>>>=0)<=n)return!1;var t,a=2147483648;if(r>a)return!1;for(var o=1;o<=4;o*=2){var i=n*(1+.2/o);if(i=Math.min(i,r+100663296),rn(Math.min(a,((t=Math.max(r,i))%65536>0&&(t+=65536-t%65536),t))))return!0}return!1},J:function(r,n,e){return tn(r)?an(r,n,e):on(r,n,e)},l:function(r){},K:function(r,n){return e=r,t=n>>2,a=i()[t+6],o={alpha:!!i()[t+0],depth:!!i()[t+1],stencil:!!i()[t+2],antialias:!!i()[t+3],premultipliedAlpha:!!i()[t+4],preserveDrawingBuffer:!!i()[t+5],powerPreference:cn[a],failIfMajorPerformanceCaveat:!!i()[t+7],majorVersion:i()[t+8],minorVersion:i()[t+9],enableExtensionsByDefault:i()[t+10],explicitSwapControl:i()[t+11],proxyContextToMainThread:i()[t+12],renderViaOffscreenBackBuffer:i()[t+13]},(u=tn(e))?o.explicitSwapControl?0:un.createContext(u,o):0;var e,t,a,o,u},D:dn,E:pn,O:hn,v:vn,N:mn,y:function(){hr.initRuntime()},a:T||r.wasmMemory,S:function(r,n,e,t){if("undefined"==typeof SharedArrayBuffer)return A("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;if(!r)return A("pthread_create called with a null thread pointer!"),28;var a=[];if(g&&0===a.length)return jn(687865856,r,n,e,t);var o=0,c=0,s=0;n&&-1!=n?(o=i()[n>>2],o+=81920,c=i()[n+8>>2],s=0!==i()[n+12>>2]):o=2097152;var f=0==c;f?c=Gn(16,o):O((c-=o)>0);for(var l=Wn(228),d=0;d<57;++d)u()[(l>>2)+d]=0;i()[r>>2]=l,i()[l+12>>2]=l;var p=l+152;i()[p>>2]=p;var h={stackBase:c,stackSize:o,allocatedOwnStack:f,detached:s,startRoutine:e,pthread_ptr:l,arg:t,transferList:a};return g?(h.cmd="spawnThread",postMessage(h,a),0):gn(h)},F:function(r,n){return function(r,n,e){if(!r)return A("pthread_join attempted on a null thread pointer!"),71;if(g&&Ln()==r)return A("PThread "+r+" is attempting to join to itself!"),16;if(!g&&Rn()==r)return A("Main thread "+r+" is attempting to join to itself!"),16;if(i()[r+12>>2]!==r)return A("pthread_join attempted on thread "+r+", which does not point to a valid thread, or does not exist anymore!"),71;if(Atomics.load(u(),r+64>>2))return A("Attempted to join thread "+r+", which was already detached!"),28;for(;;){var t=Atomics.load(u(),r+0>>2);if(1==t){var a=Atomics.load(u(),r+4>>2);return n&&(i()[n>>2]=a),Atomics.store(u(),r+64>>2,1),g?postMessage({cmd:"cleanupThread",thread:r}):dr(r),0}yn(),g||Mn(),Xr(r+0,t,g?100:1)}}(r,n)},x:function(r){},C:function(r,e,t,a){return function(r,e,t,a){var o=i()[a+40>>2],u={tm_sec:i()[a>>2],tm_min:i()[a+4>>2],tm_hour:i()[a+8>>2],tm_mday:i()[a+12>>2],tm_mon:i()[a+16>>2],tm_year:i()[a+20>>2],tm_wday:i()[a+24>>2],tm_yday:i()[a+28>>2],tm_isdst:i()[a+32>>2],tm_gmtoff:i()[a+36>>2],tm_zone:o?U(o):""},c=U(t),s={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var f in s)c=c.replace(new RegExp(f,"g"),s[f]);var l=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],d=["January","February","March","April","May","June","July","August","September","October","November","December"];function p(r,n,e){for(var t="number"==typeof r?r.toString():r||"";t.length<n;)t=e[0]+t;return t}function h(r,n){return p(r,n,"0")}function v(r,n){function e(r){return r<0?-1:r>0?1:0}var t;return 0===(t=e(r.getFullYear()-n.getFullYear()))&&0===(t=e(r.getMonth()-n.getMonth()))&&(t=e(r.getDate()-n.getDate())),t}function m(r){switch(r.getDay()){case 0:return new Date(r.getFullYear()-1,11,29);case 1:return r;case 2:return new Date(r.getFullYear(),0,3);case 3:return new Date(r.getFullYear(),0,2);case 4:return new Date(r.getFullYear(),0,1);case 5:return new Date(r.getFullYear()-1,11,31);case 6:return new Date(r.getFullYear()-1,11,30)}}function g(r){var n=Cn(new Date(r.tm_year+1900,0,1),r.tm_yday),e=new Date(n.getFullYear(),0,4),t=new Date(n.getFullYear()+1,0,4),a=m(e),o=m(t);return v(a,n)<=0?v(o,n)<=0?n.getFullYear()+1:n.getFullYear():n.getFullYear()-1}var y={"%a":function(r){return l[r.tm_wday].substring(0,3)},"%A":function(r){return l[r.tm_wday]},"%b":function(r){return d[r.tm_mon].substring(0,3)},"%B":function(r){return d[r.tm_mon]},"%C":function(r){return h((r.tm_year+1900)/100|0,2)},"%d":function(r){return h(r.tm_mday,2)},"%e":function(r){return p(r.tm_mday,2," ")},"%g":function(r){return g(r).toString().substring(2)},"%G":function(r){return g(r)},"%H":function(r){return h(r.tm_hour,2)},"%I":function(r){var n=r.tm_hour;return 0==n?n=12:n>12&&(n-=12),h(n,2)},"%j":function(r){return h(r.tm_mday+_n(wn(r.tm_year+1900)?An:Tn,r.tm_mon-1),3)},"%m":function(r){return h(r.tm_mon+1,2)},"%M":function(r){return h(r.tm_min,2)},"%n":function(){return"\n"},"%p":function(r){return r.tm_hour>=0&&r.tm_hour<12?"AM":"PM"},"%S":function(r){return h(r.tm_sec,2)},"%t":function(){return"\t"},"%u":function(r){return r.tm_wday||7},"%U":function(r){var n=new Date(r.tm_year+1900,0,1),e=0===n.getDay()?n:Cn(n,7-n.getDay()),t=new Date(r.tm_year+1900,r.tm_mon,r.tm_mday);if(v(e,t)<0){var a=_n(wn(t.getFullYear())?An:Tn,t.getMonth()-1)-31,o=31-e.getDate()+a+t.getDate();return h(Math.ceil(o/7),2)}return 0===v(e,n)?"01":"00"},"%V":function(r){var n,e=new Date(r.tm_year+1900,0,4),t=new Date(r.tm_year+1901,0,4),a=m(e),o=m(t),i=Cn(new Date(r.tm_year+1900,0,1),r.tm_yday);return v(i,a)<0?"53":v(o,i)<=0?"01":(n=a.getFullYear()<r.tm_year+1900?r.tm_yday+32-a.getDate():r.tm_yday+1-a.getDate(),h(Math.ceil(n/7),2))},"%w":function(r){return r.tm_wday},"%W":function(r){var n=new Date(r.tm_year,0,1),e=1===n.getDay()?n:Cn(n,0===n.getDay()?1:7-n.getDay()+1),t=new Date(r.tm_year+1900,r.tm_mon,r.tm_mday);if(v(e,t)<0){var a=_n(wn(t.getFullYear())?An:Tn,t.getMonth()-1)-31,o=31-e.getDate()+a+t.getDate();return h(Math.ceil(o/7),2)}return 0===v(e,n)?"01":"00"},"%y":function(r){return(r.tm_year+1900).toString().substring(2)},"%Y":function(r){return r.tm_year+1900},"%z":function(r){var n=r.tm_gmtoff,e=n>=0;return n=(n=Math.abs(n)/60)/60*100+n%60,(e?"+":"-")+String("0000"+n).slice(-4)},"%Z":function(r){return r.tm_zone},"%%":function(){return"%"}};for(var f in y)c.includes(f)&&(c=c.replace(new RegExp(f,"g"),y[f](u)));var w,_,b,A=(_=L(w=c)+1,b=new Array(_),B(w,b,0,b.length),b);return A.length>e?0:(function(r,e){n().set(r,e)}(A,r),A.length-1)}(r,e,t,a)}},Wn=(function(){var n={a:xn};function e(n,e){var t,a=n.exports;if(r.asm=a,J=r.asm.Z,t=r.asm.V,Z.unshift(t),hr.tlsInitFunctions.push(r.asm.Y),C=e,!g){var o=hr.unusedWorkers.length;hr.unusedWorkers.forEach((function(n){hr.loadWasmModuleToWorker(n,(function(){--o||function(n){if(er--,r.monitorRunDependencies&&r.monitorRunDependencies(er),0==er&&(null!==tr&&(clearInterval(tr),tr=null),ar)){var e=ar;ar=null,e()}}()}))}))}}function t(r){e(r.instance,r.module)}function a(r){return(_||"function"!=typeof fetch?Promise.resolve().then((function(){return cr(ur)})):fetch(ur,{credentials:"same-origin"}).then((function(r){if(!r.ok)throw"failed to load wasm binary file at '"+ur+"'";return r.arrayBuffer()})).catch((function(){return cr(ur)}))).then((function(r){return WebAssembly.instantiate(r,n)})).then(r,(function(r){A("failed to asynchronously prepare wasm: "+r),or(r)}))}if(g||(O(!g,"addRunDependency cannot be used in a pthread worker"),er++,r.monitorRunDependencies&&r.monitorRunDependencies(er)),r.instantiateWasm)try{return r.instantiateWasm(n,e)}catch(r){return A("Module.instantiateWasm callback failed with error: "+r),!1}(_||"function"!=typeof WebAssembly.instantiateStreaming||ir(ur)||"function"!=typeof fetch?a(t):fetch(ur,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,n).then(t,(function(r){return A("wasm streaming compile failed: "+r),A("falling back to ArrayBuffer instantiation"),a(t)}))}))).catch(f)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.V).apply(null,arguments)},r._malloc=function(){return(Wn=r._malloc=r.asm.W).apply(null,arguments)}),Pn=r._free=function(){return(Pn=r._free=r.asm.X).apply(null,arguments)},Sn=(r._emscripten_tls_init=function(){return(r._emscripten_tls_init=r.asm.Y).apply(null,arguments)},r.___getTypeName=function(){return(Sn=r.___getTypeName=r.asm._).apply(null,arguments)}),Fn=(r.___embind_register_native_and_builtin_types=function(){return(r.___embind_register_native_and_builtin_types=r.asm.$).apply(null,arguments)},r._emscripten_current_thread_process_queued_calls=function(){return(r._emscripten_current_thread_process_queued_calls=r.asm.aa).apply(null,arguments)},r._emscripten_register_main_browser_thread_id=function(){return(Fn=r._emscripten_register_main_browser_thread_id=r.asm.ba).apply(null,arguments)}),Rn=r._emscripten_main_browser_thread_id=function(){return(Rn=r._emscripten_main_browser_thread_id=r.asm.ca).apply(null,arguments)},In=r.__emscripten_do_dispatch_to_thread=function(){return(In=r.__emscripten_do_dispatch_to_thread=r.asm.da).apply(null,arguments)},jn=r._emscripten_sync_run_in_main_thread_4=function(){return(jn=r._emscripten_sync_run_in_main_thread_4=r.asm.ea).apply(null,arguments)},Mn=r._emscripten_main_thread_process_queued_calls=function(){return(Mn=r._emscripten_main_thread_process_queued_calls=r.asm.fa).apply(null,arguments)},On=r._emscripten_run_in_main_runtime_thread_js=function(){return(On=r._emscripten_run_in_main_runtime_thread_js=r.asm.ga).apply(null,arguments)},Dn=r.__emscripten_call_on_thread=function(){return(Dn=r.__emscripten_call_on_thread=r.asm.ha).apply(null,arguments)},Un=r.__emscripten_thread_init=function(){return(Un=r.__emscripten_thread_init=r.asm.ia).apply(null,arguments)},Bn=r._emscripten_get_global_libc=function(){return(Bn=r._emscripten_get_global_libc=r.asm.ja).apply(null,arguments)},Hn=r.___pthread_tsd_run_dtors=function(){return(Hn=r.___pthread_tsd_run_dtors=r.asm.ka).apply(null,arguments)},Ln=r._pthread_self=function(){return(Ln=r._pthread_self=r.asm.la).apply(null,arguments)},qn=r.stackSave=function(){return(qn=r.stackSave=r.asm.ma).apply(null,arguments)},Nn=r.stackRestore=function(){return(Nn=r.stackRestore=r.asm.na).apply(null,arguments)},Vn=r.stackAlloc=function(){return(Vn=r.stackAlloc=r.asm.oa).apply(null,arguments)},zn=r._emscripten_stack_set_limits=function(){return(zn=r._emscripten_stack_set_limits=r.asm.pa).apply(null,arguments)},Gn=r._memalign=function(){return(Gn=r._memalign=r.asm.qa).apply(null,arguments)},Yn=(r.dynCall_iiji=function(){return(r.dynCall_iiji=r.asm.ra).apply(null,arguments)},r.dynCall_jiji=function(){return(r.dynCall_jiji=r.asm.sa).apply(null,arguments)},r.dynCall_iiiiij=function(){return(r.dynCall_iiiiij=r.asm.ta).apply(null,arguments)},r.dynCall_iiiiijj=function(){return(r.dynCall_iiiiijj=r.asm.ua).apply(null,arguments)},r.dynCall_iiiiiijj=function(){return(r.dynCall_iiiiiijj=r.asm.va).apply(null,arguments)},r.dynCall_viijii=function(){return(r.dynCall_viijii=r.asm.wa).apply(null,arguments)},r.__emscripten_allow_main_runtime_queued_calls=61440),Qn=r.__emscripten_main_thread_futex=72292;function Jn(r){this.name="ExitStatus",this.message="Program terminated with exit("+r+")",this.status=r}function $n(n){if(n=n||h,!(er>0)){if(g)return s(r),nr(),void postMessage({cmd:"loaded"});!function(){if(!g){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)n=r.preRun.shift(),X.unshift(n);var n;fr(X)}}(),er>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),e()}),1)):e())}function e(){En||(En=!0,r.calledRun=!0,M||(nr(),s(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(!g){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)n=r.postRun.shift(),rr.unshift(n);var n;fr(rr)}}()))}}if(r.PThread=hr,r.PThread=hr,r.wasmMemory=T,r.ExitStatus=Jn,ar=function r(){En||$n(),En||(ar=r)},r.run=$n,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return g&&(E=!1,hr.initWorker()),$n(),r.ready},Cr=function(r){var n,e;(r=void 0!==(r=r||{})?r:{}).ready=new Promise((function(r,t){n=r,e=t}));var t,o={};for(t in r)r.hasOwnProperty(t)&&(o[t]=r[t]);var i,u=[],c="./this.program",s="";s=self.location.href,s=0!==(s="file:///D:/altri/squoosh-web/squoosh-browser/codecs/jxl/enc/jxl_enc.js").indexOf("blob:")?s.substr(0,s.lastIndexOf("/")+1):"",i=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)};var f,l,d=r.print||console.log.bind(console),p=r.printErr||console.warn.bind(console);for(t in o)o.hasOwnProperty(t)&&(r[t]=o[t]);o=null,r.arguments&&(u=r.arguments),r.thisProgram&&(c=r.thisProgram),r.quit&&r.quit,r.wasmBinary&&(f=r.wasmBinary),r.noExitRuntime,"object"!=typeof WebAssembly&&V("no native wasm support detected");var h=!1,v=new TextDecoder("utf8");function m(r,n){if(!r)return"";for(var e=r+n,t=r;!(t>=e)&&b[t];)++t;return v.decode(b.subarray(r,t))}function g(r,n,e,t){if(!(t>0))return 0;for(var a=e,o=e+t-1,i=0;i<r.length;++i){var u=r.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&r.charCodeAt(++i)),u<=127){if(e>=o)break;n[e++]=u}else if(u<=2047){if(e+1>=o)break;n[e++]=192|u>>6,n[e++]=128|63&u}else if(u<=65535){if(e+2>=o)break;n[e++]=224|u>>12,n[e++]=128|u>>6&63,n[e++]=128|63&u}else{if(e+3>=o)break;n[e++]=240|u>>18,n[e++]=128|u>>12&63,n[e++]=128|u>>6&63,n[e++]=128|63&u}}return n[e]=0,e-a}function y(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&r.charCodeAt(++e)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n}var w,_,b,A,T,C,E,k,x,W=new TextDecoder("utf-16le");function P(r,n){for(var e=r,t=e>>1,a=t+n/2;!(t>=a)&&T[t];)++t;return e=t<<1,W.decode(b.subarray(r,e))}function S(r,n,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=n,a=(e-=2)<2*r.length?e/2:r.length,o=0;o<a;++o){var i=r.charCodeAt(o);A[n>>1]=i,n+=2}return A[n>>1]=0,n-t}function F(r){return 2*r.length}function R(r,n){for(var e=0,t="";!(e>=n/4);){var a=C[r+4*e>>2];if(0==a)break;if(++e,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function I(r,n,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=n,a=t+e-4,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),C[n>>2]=i,(n+=4)+4>a)break}return C[n>>2]=0,n-t}function j(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&++e,n+=4}return n}function M(n){w=n,r.HEAP8=_=new Int8Array(n),r.HEAP16=A=new Int16Array(n),r.HEAP32=C=new Int32Array(n),r.HEAPU8=b=new Uint8Array(n),r.HEAPU16=T=new Uint16Array(n),r.HEAPU32=E=new Uint32Array(n),r.HEAPF32=k=new Float32Array(n),r.HEAPF64=x=new Float64Array(n)}r.INITIAL_MEMORY;var O,D,U=[],B=[],H=[],L=0,q=null,N=null;function V(n){r.onAbort&&r.onAbort(n),p(n+=""),h=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(n);throw e(t),t}function z(r){return r.startsWith("data:application/octet-stream;base64,")}if(r.preloadedImages={},r.preloadedAudios={},r.locateFile)z(G="jxl_enc.wasm")||(D=G,G=r.locateFile?r.locateFile(D,s):s+D);else var G=new URL(a(192),a.b).toString();function Y(r){try{if(r==G&&f)return new Uint8Array(f);if(i)return i(r);throw"both async and sync fetching of the wasm failed"}catch(r){V(r)}}function Q(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?O.get(t)():O.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(r)}}function J(r){this.excPtr=r,this.ptr=r-16,this.set_type=function(r){C[this.ptr+8>>2]=r},this.get_type=function(){return C[this.ptr+8>>2]},this.set_destructor=function(r){C[this.ptr+0>>2]=r},this.get_destructor=function(){return C[this.ptr+0>>2]},this.set_refcount=function(r){C[this.ptr+4>>2]=r},this.set_caught=function(r){r=r?1:0,_[this.ptr+12>>0]=r},this.get_caught=function(){return 0!=_[this.ptr+12>>0]},this.set_rethrown=function(r){r=r?1:0,_[this.ptr+13>>0]=r},this.get_rethrown=function(){return 0!=_[this.ptr+13>>0]},this.init=function(r,n){this.set_type(r),this.set_destructor(n),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var r=C[this.ptr+4>>2];C[this.ptr+4>>2]=r+1},this.release_ref=function(){var r=C[this.ptr+4>>2];return C[this.ptr+4>>2]=r-1,1===r}}var $={};function X(r){for(;r.length;){var n=r.pop();r.pop()(n)}}function Z(r){return this.fromWireType(E[r>>2])}var K={},rr={},nr={};function er(r){if(void 0===r)return"_unknown";var n=(r=r.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return n>=48&&n<=57?"_"+r:r}function tr(r,n){return r=er(r),new Function("body","return function "+r+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(n)}function ar(r,n){var e=tr(n,(function(r){this.name=n,this.message=r;var e=new Error(r).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var or=void 0;function ir(r){throw new or(r)}function ur(r,n,e){function t(n){var t=e(n);t.length!==r.length&&ir("Mismatched type converter count");for(var a=0;a<r.length;++a)pr(r[a],t[a])}r.forEach((function(r){nr[r]=n}));var a=new Array(n.length),o=[],i=0;n.forEach((function(r,n){rr.hasOwnProperty(r)?a[n]=rr[r]:(o.push(r),K.hasOwnProperty(r)||(K[r]=[]),K[r].push((function(){a[n]=rr[r],++i===o.length&&t(a)})))})),0===o.length&&t(a)}function cr(r){switch(r){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+r)}}var sr=void 0;function fr(r){for(var n="",e=r;b[e];)n+=sr[b[e++]];return n}var lr=void 0;function dr(r){throw new lr(r)}function pr(r,n,e){if(e=e||{},!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=n.name;if(r||dr('type "'+t+'" must have a positive integer typeid pointer'),rr.hasOwnProperty(r)){if(e.ignoreDuplicateRegistrations)return;dr("Cannot register type '"+t+"' twice")}if(rr[r]=n,delete nr[r],K.hasOwnProperty(r)){var a=K[r];delete K[r],a.forEach((function(r){r()}))}}var hr=[],vr=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function mr(r){r>4&&0==--vr[r].refcount&&(vr[r]=void 0,hr.push(r))}function gr(r){switch(r){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=hr.length?hr.pop():vr.length;return vr[n]={refcount:1,value:r},n}}function yr(r){if(null===r)return"null";var n=typeof r;return"object"===n||"array"===n||"function"===n?r.toString():""+r}function wr(r,n){switch(n){case 2:return function(r){return this.fromWireType(k[r>>2])};case 3:return function(r){return this.fromWireType(x[r>>3])};default:throw new TypeError("Unknown float type: "+r)}}function _r(n,e,t){return n.includes("j")?function(n,e,t){var a=r["dynCall_"+n];return t&&t.length?a.apply(null,[e].concat(t)):a.call(null,e)}(n,e,t):O.get(e).apply(null,t)}function br(r,n){var e,t,a,o=(r=fr(r)).includes("j")?(e=r,t=n,a=[],function(){a.length=arguments.length;for(var r=0;r<arguments.length;r++)a[r]=arguments[r];return _r(e,t,a)}):O.get(n);return"function"!=typeof o&&dr("unknown function pointer with signature "+r+": "+n),o}var Ar=void 0;function Tr(r){var n=qr(r),e=fr(n);return Lr(n),e}function Cr(r,n,e){switch(n){case 0:return e?function(r){return _[r]}:function(r){return b[r]};case 1:return e?function(r){return A[r>>1]}:function(r){return T[r>>1]};case 2:return e?function(r){return C[r>>2]}:function(r){return E[r>>2]};default:throw new TypeError("Unknown integer type: "+r)}}var Er={};function kr(){return"object"==typeof globalThis?globalThis:Function("return this")()}function xr(r,n){var e=rr[r];return void 0===e&&dr(n+" has unknown type "+Tr(r)),e}var Wr={};function Pr(r){try{return l.grow(r-w.byteLength+65535>>>16),M(l.buffer),1}catch(r){}}var Sr={};function Fr(){if(!Fr.strings){var r={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:c||"./this.program"};for(var n in Sr)r[n]=Sr[n];var e=[];for(var n in r)e.push(n+"="+r[n]);Fr.strings=e}return Fr.strings}var Rr={mappings:{},buffers:[null,[],[]],printChar:function(r,n){var e=Rr.buffers[r];0===n||10===n?((1===r?d:p)(function(r,n,e){for(var t=0;r[t]&&!(t>=NaN);)++t;return v.decode(r.subarray?r.subarray(0,t):new Uint8Array(r.slice(0,t)))}(e)),e.length=0):e.push(n)},varargs:void 0,get:function(){return Rr.varargs+=4,C[Rr.varargs-4>>2]},getStr:function(r){return m(r)},get64:function(r,n){return r}};function Ir(r){return r%4==0&&(r%100!=0||r%400==0)}function jr(r,n){for(var e=0,t=0;t<=n;e+=r[t++]);return e}var Mr=[31,29,31,30,31,30,31,31,30,31,30,31],Or=[31,28,31,30,31,30,31,31,30,31,30,31];function Dr(r,n){for(var e=new Date(r.getTime());n>0;){var t=Ir(e.getFullYear()),a=e.getMonth(),o=(t?Mr:Or)[a];if(!(n>o-e.getDate()))return e.setDate(e.getDate()+n),e;n-=o-e.getDate()+1,e.setDate(1),a<11?e.setMonth(a+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return e}or=r.InternalError=ar(Error,"InternalError"),function(){for(var r=new Array(256),n=0;n<256;++n)r[n]=String.fromCharCode(n);sr=r}(),lr=r.BindingError=ar(Error,"BindingError"),r.count_emval_handles=function(){for(var r=0,n=5;n<vr.length;++n)void 0!==vr[n]&&++r;return r},r.get_first_emval=function(){for(var r=5;r<vr.length;++r)if(void 0!==vr[r])return vr[r];return null},Ar=r.UnboundTypeError=ar(Error,"UnboundTypeError");var Ur,Br={o:function(r){return Hr(r+16)+16},D:function(r,n){},n:function(r,n,e){throw new J(r).init(n,e),r},k:function(r){var n=$[r];delete $[r];var e=n.rawConstructor,t=n.rawDestructor,a=n.fields;ur([r],a.map((function(r){return r.getterReturnType})).concat(a.map((function(r){return r.setterArgumentType}))),(function(r){var o={};return a.forEach((function(n,e){var t=n.fieldName,i=r[e],u=n.getter,c=n.getterContext,s=r[e+a.length],f=n.setter,l=n.setterContext;o[t]={read:function(r){return i.fromWireType(u(c,r))},write:function(r,n){var e=[];f(l,r,s.toWireType(e,n)),X(e)}}})),[{name:n.name,fromWireType:function(r){var n={};for(var e in o)n[e]=o[e].read(r);return t(r),n},toWireType:function(r,n){for(var a in o)if(!(a in n))throw new TypeError('Missing field:  "'+a+'"');var i=e();for(a in o)o[a].write(i,n[a]);return null!==r&&r.push(t,i),i},argPackAdvance:8,readValueFromPointer:Z,destructorFunction:t}]}))},q:function(r,n,e,t,a){},z:function(r,n,e,t,a){var o=cr(e);pr(r,{name:n=fr(n),fromWireType:function(r){return!!r},toWireType:function(r,n){return n?t:a},argPackAdvance:8,readValueFromPointer:function(r){var t;if(1===e)t=_;else if(2===e)t=A;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+n);t=C}return this.fromWireType(t[r>>o])},destructorFunction:null})},y:function(r,n){pr(r,{name:n=fr(n),fromWireType:function(r){var n=vr[r].value;return mr(r),n},toWireType:function(r,n){return gr(n)},argPackAdvance:8,readValueFromPointer:Z,destructorFunction:null})},h:function(r,n,e){var t=cr(e);pr(r,{name:n=fr(n),fromWireType:function(r){return r},toWireType:function(r,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+yr(n)+'" to '+this.name);return n},argPackAdvance:8,readValueFromPointer:wr(n,t),destructorFunction:null})},j:function(n,e,t,a,o,i){var u=function(r,n){for(var e=[],t=0;t<r;t++)e.push(C[(n>>2)+t]);return e}(e,t);n=fr(n),o=br(a,o),function(n,e,t){r.hasOwnProperty(n)?((void 0===t||void 0!==r[n].overloadTable&&void 0!==r[n].overloadTable[t])&&dr("Cannot register public name '"+n+"' twice"),function(r,n,e){if(void 0===r[n].overloadTable){var t=r[n];r[n]=function(){return r[n].overloadTable.hasOwnProperty(arguments.length)||dr("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+r[n].overloadTable+")!"),r[n].overloadTable[arguments.length].apply(this,arguments)},r[n].overloadTable=[],r[n].overloadTable[t.argCount]=t}}(r,n,n),r.hasOwnProperty(t)&&dr("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),r[n].overloadTable[t]=e):(r[n]=e,void 0!==t&&(r[n].numArguments=t))}(n,(function(){!function(r,n){var e=[],t={};throw n.forEach((function r(n){t[n]||rr[n]||(nr[n]?nr[n].forEach(r):(e.push(n),t[n]=!0))})),new Ar(r+": "+e.map(Tr).join([", "]))}("Cannot call "+n+" due to unbound types",u)}),e-1),ur([],u,(function(t){var a=[t[0],null].concat(t.slice(1));return function(n,e,t){r.hasOwnProperty(n)||ir("Replacing nonexistant public symbol"),void 0!==r[n].overloadTable&&void 0!==t?r[n].overloadTable[t]=e:(r[n]=e,r[n].argCount=t)}(n,function(r,n,e,t,a){var o=n.length;o<2&&dr("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==n[1]&&null!==e,u=!1,c=1;c<n.length;++c)if(null!==n[c]&&void 0===n[c].destructorFunction){u=!0;break}var s="void"!==n[0].name,f="",l="";for(c=0;c<o-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+er(r)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+r+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[dr,t,a,X,n[0],n[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<o-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+n[c+2].name+"\n",h.push("argType"+c),v.push(n[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<n.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==n[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+n[c].name+"\n",h.push(m+"_dtor"),v.push(n[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(r,n){if(!(r instanceof Function))throw new TypeError("new_ called with constructor type "+typeof r+" which is not a function");var e=tr(r.name||"unknownFunctionName",(function(){}));e.prototype=r.prototype;var t=new e,a=r.apply(t,n);return a instanceof Object?a:t}(Function,h).apply(null,v)}(n,a,null,o,i),e-1),[]}))},c:function(r,n,e,t,a){n=fr(n),-1===a&&(a=4294967295);var o=cr(e),i=function(r){return r};if(0===t){var u=32-8*e;i=function(r){return r<<u>>>u}}var c=n.includes("unsigned");pr(r,{name:n,fromWireType:i,toWireType:function(r,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+yr(e)+'" to '+this.name);if(e<t||e>a)throw new TypeError('Passing a number "'+yr(e)+'" from JS side to C/C++ side to an argument of type "'+n+'", which is outside the valid range ['+t+", "+a+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:Cr(n,o,0!==t),destructorFunction:null})},b:function(r,n,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function a(r){var n=E,e=n[r>>=2],a=n[r+1];return new t(w,a,e)}pr(r,{name:e=fr(e),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},i:function(r,n){var e="std::string"===(n=fr(n));pr(r,{name:n,fromWireType:function(r){var n,t=E[r>>2];if(e)for(var a=r+4,o=0;o<=t;++o){var i=r+4+o;if(o==t||0==b[i]){var u=m(a,i-a);void 0===n?n=u:(n+=String.fromCharCode(0),n+=u),a=i+1}}else{var c=new Array(t);for(o=0;o<t;++o)c[o]=String.fromCharCode(b[r+4+o]);n=c.join("")}return Lr(r),n},toWireType:function(r,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var t="string"==typeof n;t||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||dr("Cannot pass non-string to std::string");var a=(e&&t?function(){return y(n)}:function(){return n.length})(),o=Hr(4+a+1);if(E[o>>2]=a,e&&t)g(n,b,o+4,a+1);else if(t)for(var i=0;i<a;++i){var u=n.charCodeAt(i);u>255&&(Lr(o),dr("String has UTF-16 code units that do not fit in 8 bits")),b[o+4+i]=u}else for(i=0;i<a;++i)b[o+4+i]=n[i];return null!==r&&r.push(Lr,o),o},argPackAdvance:8,readValueFromPointer:Z,destructorFunction:function(r){Lr(r)}})},g:function(r,n,e){var t,a,o,i,u;e=fr(e),2===n?(t=P,a=S,i=F,o=function(){return T},u=1):4===n&&(t=R,a=I,i=j,o=function(){return E},u=2),pr(r,{name:e,fromWireType:function(r){for(var e,a=E[r>>2],i=o(),c=r+4,s=0;s<=a;++s){var f=r+4+s*n;if(s==a||0==i[f>>u]){var l=t(c,f-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=f+n}}return Lr(r),e},toWireType:function(r,t){"string"!=typeof t&&dr("Cannot pass non-string to C++ string type "+e);var o=i(t),c=Hr(4+o+n);return E[c>>2]=o>>u,a(t,c+4,o+n),null!==r&&r.push(Lr,c),c},argPackAdvance:8,readValueFromPointer:Z,destructorFunction:function(r){Lr(r)}})},l:function(r,n,e,t,a,o){$[r]={name:fr(n),rawConstructor:br(e,t),rawDestructor:br(a,o),fields:[]}},d:function(r,n,e,t,a,o,i,u,c,s){$[r].fields.push({fieldName:fr(n),getterReturnType:e,getter:br(t,a),getterContext:o,setterArgumentType:i,setter:br(u,c),setterContext:s})},A:function(r,n){pr(r,{isVoid:!0,name:n=fr(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(r,n){}})},e:mr,C:function(r){return 0===r?gr(kr()):(r=void 0===(e=Er[n=r])?fr(n):e,gr(kr()[r]));var n,e},B:function(r){r>4&&(vr[r].refcount+=1)},m:function(n,e,t,a){n=function(r){return r||dr("Cannot use deleted val. handle = "+r),vr[r].value}(n);var o=Wr[e];return o||(o=function(n){for(var e="",t=0;t<n;++t)e+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+n+"(constructor, argTypes, args) {\n";for(t=0;t<n;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(xr,r,gr)}(e),Wr[e]=o),o(n,t,a)},a:function(){V()},s:function(r,n,e){b.copyWithin(r,n,n+e)},f:function(r){var n,e=b.length,t=2147483648;if((r>>>=0)>t)return!1;for(var a=1;a<=4;a*=2){var o=e*(1+.2/a);if(o=Math.min(o,r+100663296),Pr(Math.min(t,((n=Math.max(r,o))%65536>0&&(n+=65536-n%65536),n))))return!0}return!1},u:function(r,n){var e=0;return Fr().forEach((function(t,a){var o=n+e;C[r+4*a>>2]=o,function(r,n,e){for(var t=0;t<r.length;++t)_[n++>>0]=r.charCodeAt(t);_[n>>0]=0}(t,o),e+=t.length+1})),0},v:function(r,n){var e=Fr();C[r>>2]=e.length;var t=0;return e.forEach((function(r){t+=r.length+1})),C[n>>2]=t,0},x:function(r){return 0},p:function(r,n,e,t,a){},w:function(r,n,e,t){for(var a=0,o=0;o<e;o++){for(var i=C[n+8*o>>2],u=C[n+(8*o+4)>>2],c=0;c<u;c++)Rr.printChar(r,b[i+c]);a+=u}return C[t>>2]=a,0},r:function(r){},t:function(r,n,e,t){return function(r,n,e,t){var a=C[t+40>>2],o={tm_sec:C[t>>2],tm_min:C[t+4>>2],tm_hour:C[t+8>>2],tm_mday:C[t+12>>2],tm_mon:C[t+16>>2],tm_year:C[t+20>>2],tm_wday:C[t+24>>2],tm_yday:C[t+28>>2],tm_isdst:C[t+32>>2],tm_gmtoff:C[t+36>>2],tm_zone:a?m(a):""},i=m(e),u={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var c in u)i=i.replace(new RegExp(c,"g"),u[c]);var s=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],f=["January","February","March","April","May","June","July","August","September","October","November","December"];function l(r,n,e){for(var t="number"==typeof r?r.toString():r||"";t.length<n;)t=e[0]+t;return t}function d(r,n){return l(r,n,"0")}function p(r,n){function e(r){return r<0?-1:r>0?1:0}var t;return 0===(t=e(r.getFullYear()-n.getFullYear()))&&0===(t=e(r.getMonth()-n.getMonth()))&&(t=e(r.getDate()-n.getDate())),t}function h(r){switch(r.getDay()){case 0:return new Date(r.getFullYear()-1,11,29);case 1:return r;case 2:return new Date(r.getFullYear(),0,3);case 3:return new Date(r.getFullYear(),0,2);case 4:return new Date(r.getFullYear(),0,1);case 5:return new Date(r.getFullYear()-1,11,31);case 6:return new Date(r.getFullYear()-1,11,30)}}function v(r){var n=Dr(new Date(r.tm_year+1900,0,1),r.tm_yday),e=new Date(n.getFullYear(),0,4),t=new Date(n.getFullYear()+1,0,4),a=h(e),o=h(t);return p(a,n)<=0?p(o,n)<=0?n.getFullYear()+1:n.getFullYear():n.getFullYear()-1}var w={"%a":function(r){return s[r.tm_wday].substring(0,3)},"%A":function(r){return s[r.tm_wday]},"%b":function(r){return f[r.tm_mon].substring(0,3)},"%B":function(r){return f[r.tm_mon]},"%C":function(r){return d((r.tm_year+1900)/100|0,2)},"%d":function(r){return d(r.tm_mday,2)},"%e":function(r){return l(r.tm_mday,2," ")},"%g":function(r){return v(r).toString().substring(2)},"%G":function(r){return v(r)},"%H":function(r){return d(r.tm_hour,2)},"%I":function(r){var n=r.tm_hour;return 0==n?n=12:n>12&&(n-=12),d(n,2)},"%j":function(r){return d(r.tm_mday+jr(Ir(r.tm_year+1900)?Mr:Or,r.tm_mon-1),3)},"%m":function(r){return d(r.tm_mon+1,2)},"%M":function(r){return d(r.tm_min,2)},"%n":function(){return"\n"},"%p":function(r){return r.tm_hour>=0&&r.tm_hour<12?"AM":"PM"},"%S":function(r){return d(r.tm_sec,2)},"%t":function(){return"\t"},"%u":function(r){return r.tm_wday||7},"%U":function(r){var n=new Date(r.tm_year+1900,0,1),e=0===n.getDay()?n:Dr(n,7-n.getDay()),t=new Date(r.tm_year+1900,r.tm_mon,r.tm_mday);if(p(e,t)<0){var a=jr(Ir(t.getFullYear())?Mr:Or,t.getMonth()-1)-31,o=31-e.getDate()+a+t.getDate();return d(Math.ceil(o/7),2)}return 0===p(e,n)?"01":"00"},"%V":function(r){var n,e=new Date(r.tm_year+1900,0,4),t=new Date(r.tm_year+1901,0,4),a=h(e),o=h(t),i=Dr(new Date(r.tm_year+1900,0,1),r.tm_yday);return p(i,a)<0?"53":p(o,i)<=0?"01":(n=a.getFullYear()<r.tm_year+1900?r.tm_yday+32-a.getDate():r.tm_yday+1-a.getDate(),d(Math.ceil(n/7),2))},"%w":function(r){return r.tm_wday},"%W":function(r){var n=new Date(r.tm_year,0,1),e=1===n.getDay()?n:Dr(n,0===n.getDay()?1:7-n.getDay()+1),t=new Date(r.tm_year+1900,r.tm_mon,r.tm_mday);if(p(e,t)<0){var a=jr(Ir(t.getFullYear())?Mr:Or,t.getMonth()-1)-31,o=31-e.getDate()+a+t.getDate();return d(Math.ceil(o/7),2)}return 0===p(e,n)?"01":"00"},"%y":function(r){return(r.tm_year+1900).toString().substring(2)},"%Y":function(r){return r.tm_year+1900},"%z":function(r){var n=r.tm_gmtoff,e=n>=0;return n=(n=Math.abs(n)/60)/60*100+n%60,(e?"+":"-")+String("0000"+n).slice(-4)},"%Z":function(r){return r.tm_zone},"%%":function(){return"%"}};for(var c in w)i.includes(c)&&(i=i.replace(new RegExp(c,"g"),w[c](o)));var b,A,T,E=(A=y(b=i)+1,T=new Array(A),g(b,T,0,T.length),T);return E.length>n?0:(function(r,n){_.set(r,n)}(E,r),E.length-1)}(r,n,e,t)}},Hr=(function(){var n={a:Br};function t(n,e){var t,a=n.exports;r.asm=a,M((l=r.asm.E).buffer),O=r.asm.K,t=r.asm.F,B.unshift(t),function(n){if(L--,r.monitorRunDependencies&&r.monitorRunDependencies(L),0==L&&(null!==q&&(clearInterval(q),q=null),N)){var e=N;N=null,e()}}()}function a(r){t(r.instance)}function o(r){return(f||"function"!=typeof fetch?Promise.resolve().then((function(){return Y(G)})):fetch(G,{credentials:"same-origin"}).then((function(r){if(!r.ok)throw"failed to load wasm binary file at '"+G+"'";return r.arrayBuffer()})).catch((function(){return Y(G)}))).then((function(r){return WebAssembly.instantiate(r,n)})).then(r,(function(r){p("failed to asynchronously prepare wasm: "+r),V(r)}))}if(L++,r.monitorRunDependencies&&r.monitorRunDependencies(L),r.instantiateWasm)try{return r.instantiateWasm(n,t)}catch(r){return p("Module.instantiateWasm callback failed with error: "+r),!1}(f||"function"!=typeof WebAssembly.instantiateStreaming||z(G)||"function"!=typeof fetch?o(a):fetch(G,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,n).then(a,(function(r){return p("wasm streaming compile failed: "+r),p("falling back to ArrayBuffer instantiation"),o(a)}))}))).catch(e)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.F).apply(null,arguments)},r._malloc=function(){return(Hr=r._malloc=r.asm.G).apply(null,arguments)}),Lr=r._free=function(){return(Lr=r._free=r.asm.H).apply(null,arguments)},qr=r.___getTypeName=function(){return(qr=r.___getTypeName=r.asm.I).apply(null,arguments)};function Nr(e){function t(){Ur||(Ur=!0,r.calledRun=!0,h||(Q(B),n(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)n=r.postRun.shift(),H.unshift(n);var n;Q(H)}()))}e=e||u,L>0||(function(){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)n=r.preRun.shift(),U.unshift(n);var n;Q(U)}(),L>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),t()}),1)):t()))}if(r.___embind_register_native_and_builtin_types=function(){return(r.___embind_register_native_and_builtin_types=r.asm.J).apply(null,arguments)},r.dynCall_iiji=function(){return(r.dynCall_iiji=r.asm.L).apply(null,arguments)},r.dynCall_jiji=function(){return(r.dynCall_jiji=r.asm.M).apply(null,arguments)},r.dynCall_iiiiij=function(){return(r.dynCall_iiiiij=r.asm.N).apply(null,arguments)},r.dynCall_iiiiijj=function(){return(r.dynCall_iiiiijj=r.asm.O).apply(null,arguments)},r.dynCall_iiiiiijj=function(){return(r.dynCall_iiiiiijj=r.asm.P).apply(null,arguments)},r.dynCall_viijii=function(){return(r.dynCall_viijii=r.asm.Q).apply(null,arguments)},N=function r(){Ur||Nr(),Ur||(N=r)},r.run=Nr,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return Nr(),r.ready};let Er;const kr=(r,n)=>async function(r,n){Er||(Er=async function(){return await pr()?await dr()?fr(Ar):fr(Tr):fr(Cr)}());const e=(await Er).encode(r.data,r.width,r.height,n);if(!e)throw new Error("Encoding error.");return e.buffer}(r,n),xr=function(r){var n,e;(r=void 0!==(r=r||{})?r:{}).ready=new Promise((function(r,t){n=r,e=t}));var t,o={};for(t in r)r.hasOwnProperty(t)&&(o[t]=r[t]);var i,u=[],c="./this.program",s=function(r,n){throw n},f="";f=self.location.href,f=0!==(f="file:///D:/altri/squoosh-web/squoosh-browser/codecs/mozjpeg/enc/mozjpeg_enc.js").indexOf("blob:")?f.substr(0,f.lastIndexOf("/")+1):"",i=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)};var l,d=r.print||console.log.bind(console),p=r.printErr||console.warn.bind(console);for(t in o)o.hasOwnProperty(t)&&(r[t]=o[t]);o=null,r.arguments&&(u=r.arguments),r.thisProgram&&(c=r.thisProgram),r.quit&&(s=r.quit),r.wasmBinary&&(l=r.wasmBinary);var h,v=r.noExitRuntime||!0;"object"!=typeof WebAssembly&&V("no native wasm support detected");var m=!1,g=new TextDecoder("utf8");function y(r,n){if(!r)return"";for(var e=r+n,t=r;!(t>=e)&&b[t];)++t;return g.decode(b.subarray(r,t))}var w,_,b,A,T,C,E,k,x,W=new TextDecoder("utf-16le");function P(r,n){for(var e=r,t=e>>1,a=t+n/2;!(t>=a)&&T[t];)++t;return e=t<<1,W.decode(b.subarray(r,e))}function S(r,n,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=n,a=(e-=2)<2*r.length?e/2:r.length,o=0;o<a;++o){var i=r.charCodeAt(o);A[n>>1]=i,n+=2}return A[n>>1]=0,n-t}function F(r){return 2*r.length}function R(r,n){for(var e=0,t="";!(e>=n/4);){var a=C[r+4*e>>2];if(0==a)break;if(++e,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function I(r,n,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=n,a=t+e-4,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),C[n>>2]=i,(n+=4)+4>a)break}return C[n>>2]=0,n-t}function j(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&++e,n+=4}return n}function M(n){w=n,r.HEAP8=_=new Int8Array(n),r.HEAP16=A=new Int16Array(n),r.HEAP32=C=new Int32Array(n),r.HEAPU8=b=new Uint8Array(n),r.HEAPU16=T=new Uint16Array(n),r.HEAPU32=E=new Uint32Array(n),r.HEAPF32=k=new Float32Array(n),r.HEAPF64=x=new Float64Array(n)}r.INITIAL_MEMORY;var O,D,U=[],B=[],H=[],L=0,q=null,N=null;function V(n){r.onAbort&&r.onAbort(n),p(n+=""),m=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(n);throw e(t),t}function z(r){return r.startsWith("data:application/octet-stream;base64,")}if(r.preloadedImages={},r.preloadedAudios={},r.locateFile)z(G="mozjpeg_enc.wasm")||(D=G,G=r.locateFile?r.locateFile(D,f):f+D);else var G=new URL(a(256),a.b).toString();function Y(r){try{if(r==G&&l)return new Uint8Array(l);if(i)return i(r);throw"both async and sync fetching of the wasm failed"}catch(r){V(r)}}function Q(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?O.get(t)():O.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(r)}}function J(){return v||!1}var $={};function X(r){for(;r.length;){var n=r.pop();r.pop()(n)}}function Z(r){return this.fromWireType(E[r>>2])}var K={},rr={},nr={};function er(r){if(void 0===r)return"_unknown";var n=(r=r.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return n>=48&&n<=57?"_"+r:r}function tr(r,n){return r=er(r),new Function("body","return function "+r+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(n)}function ar(r,n){var e=tr(n,(function(r){this.name=n,this.message=r;var e=new Error(r).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var or=void 0;function ir(r){throw new or(r)}function ur(r,n,e){function t(n){var t=e(n);t.length!==r.length&&ir("Mismatched type converter count");for(var a=0;a<r.length;++a)pr(r[a],t[a])}r.forEach((function(r){nr[r]=n}));var a=new Array(n.length),o=[],i=0;n.forEach((function(r,n){rr.hasOwnProperty(r)?a[n]=rr[r]:(o.push(r),K.hasOwnProperty(r)||(K[r]=[]),K[r].push((function(){a[n]=rr[r],++i===o.length&&t(a)})))})),0===o.length&&t(a)}function cr(r){switch(r){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+r)}}var sr=void 0;function fr(r){for(var n="",e=r;b[e];)n+=sr[b[e++]];return n}var lr=void 0;function dr(r){throw new lr(r)}function pr(r,n,e){if(e=e||{},!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=n.name;if(r||dr('type "'+t+'" must have a positive integer typeid pointer'),rr.hasOwnProperty(r)){if(e.ignoreDuplicateRegistrations)return;dr("Cannot register type '"+t+"' twice")}if(rr[r]=n,delete nr[r],K.hasOwnProperty(r)){var a=K[r];delete K[r],a.forEach((function(r){r()}))}}var hr=[],vr=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function mr(r){r>4&&0==--vr[r].refcount&&(vr[r]=void 0,hr.push(r))}function gr(r){switch(r){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=hr.length?hr.pop():vr.length;return vr[n]={refcount:1,value:r},n}}function yr(r){if(null===r)return"null";var n=typeof r;return"object"===n||"array"===n||"function"===n?r.toString():""+r}function wr(r,n){switch(n){case 2:return function(r){return this.fromWireType(k[r>>2])};case 3:return function(r){return this.fromWireType(x[r>>3])};default:throw new TypeError("Unknown float type: "+r)}}function _r(n,e,t){return n.includes("j")?function(n,e,t){var a=r["dynCall_"+n];return t&&t.length?a.apply(null,[e].concat(t)):a.call(null,e)}(n,e,t):O.get(e).apply(null,t)}function br(r,n){var e,t,a,o=(r=fr(r)).includes("j")?(e=r,t=n,a=[],function(){a.length=arguments.length;for(var r=0;r<arguments.length;r++)a[r]=arguments[r];return _r(e,t,a)}):O.get(n);return"function"!=typeof o&&dr("unknown function pointer with signature "+r+": "+n),o}var Ar=void 0;function Tr(r){var n=Dr(r),e=fr(n);return Or(n),e}function Cr(r,n,e){switch(n){case 0:return e?function(r){return _[r]}:function(r){return b[r]};case 1:return e?function(r){return A[r>>1]}:function(r){return T[r>>1]};case 2:return e?function(r){return C[r>>2]}:function(r){return E[r>>2]};default:throw new TypeError("Unknown integer type: "+r)}}var Er={};function kr(){return"object"==typeof globalThis?globalThis:Function("return this")()}function xr(r,n){var e=rr[r];return void 0===e&&dr(n+" has unknown type "+Tr(r)),e}var Wr={};function Pr(r){try{return h.grow(r-w.byteLength+65535>>>16),M(h.buffer),1}catch(r){}}var Sr={};function Fr(){if(!Fr.strings){var r={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:c||"./this.program"};for(var n in Sr)r[n]=Sr[n];var e=[];for(var n in r)e.push(n+"="+r[n]);Fr.strings=e}return Fr.strings}var Rr={mappings:{},buffers:[null,[],[]],printChar:function(r,n){var e=Rr.buffers[r];0===n||10===n?((1===r?d:p)(function(r,n,e){for(var t=0;r[t]&&!(t>=NaN);)++t;return g.decode(r.subarray?r.subarray(0,t):new Uint8Array(r.slice(0,t)))}(e)),e.length=0):e.push(n)},varargs:void 0,get:function(){return Rr.varargs+=4,C[Rr.varargs-4>>2]},getStr:function(r){return y(r)},get64:function(r,n){return r}};or=r.InternalError=ar(Error,"InternalError"),function(){for(var r=new Array(256),n=0;n<256;++n)r[n]=String.fromCharCode(n);sr=r}(),lr=r.BindingError=ar(Error,"BindingError"),r.count_emval_handles=function(){for(var r=0,n=5;n<vr.length;++n)void 0!==vr[n]&&++r;return r},r.get_first_emval=function(){for(var r=5;r<vr.length;++r)if(void 0!==vr[r])return vr[r];return null},Ar=r.UnboundTypeError=ar(Error,"UnboundTypeError");var Ir,jr={B:function(r,n){},l:function(r){var n=$[r];delete $[r];var e=n.rawConstructor,t=n.rawDestructor,a=n.fields;ur([r],a.map((function(r){return r.getterReturnType})).concat(a.map((function(r){return r.setterArgumentType}))),(function(r){var o={};return a.forEach((function(n,e){var t=n.fieldName,i=r[e],u=n.getter,c=n.getterContext,s=r[e+a.length],f=n.setter,l=n.setterContext;o[t]={read:function(r){return i.fromWireType(u(c,r))},write:function(r,n){var e=[];f(l,r,s.toWireType(e,n)),X(e)}}})),[{name:n.name,fromWireType:function(r){var n={};for(var e in o)n[e]=o[e].read(r);return t(r),n},toWireType:function(r,n){for(var a in o)if(!(a in n))throw new TypeError('Missing field:  "'+a+'"');var i=e();for(a in o)o[a].write(i,n[a]);return null!==r&&r.push(t,i),i},argPackAdvance:8,readValueFromPointer:Z,destructorFunction:t}]}))},p:function(r,n,e,t,a){},y:function(r,n,e,t,a){var o=cr(e);pr(r,{name:n=fr(n),fromWireType:function(r){return!!r},toWireType:function(r,n){return n?t:a},argPackAdvance:8,readValueFromPointer:function(r){var t;if(1===e)t=_;else if(2===e)t=A;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+n);t=C}return this.fromWireType(t[r>>o])},destructorFunction:null})},x:function(r,n){pr(r,{name:n=fr(n),fromWireType:function(r){var n=vr[r].value;return mr(r),n},toWireType:function(r,n){return gr(n)},argPackAdvance:8,readValueFromPointer:Z,destructorFunction:null})},i:function(r,n,e){var t=cr(e);pr(r,{name:n=fr(n),fromWireType:function(r){return r},toWireType:function(r,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+yr(n)+'" to '+this.name);return n},argPackAdvance:8,readValueFromPointer:wr(n,t),destructorFunction:null})},f:function(n,e,t,a,o,i){var u=function(r,n){for(var e=[],t=0;t<r;t++)e.push(C[(n>>2)+t]);return e}(e,t);n=fr(n),o=br(a,o),function(n,e,t){r.hasOwnProperty(n)?((void 0===t||void 0!==r[n].overloadTable&&void 0!==r[n].overloadTable[t])&&dr("Cannot register public name '"+n+"' twice"),function(r,n,e){if(void 0===r[n].overloadTable){var t=r[n];r[n]=function(){return r[n].overloadTable.hasOwnProperty(arguments.length)||dr("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+r[n].overloadTable+")!"),r[n].overloadTable[arguments.length].apply(this,arguments)},r[n].overloadTable=[],r[n].overloadTable[t.argCount]=t}}(r,n,n),r.hasOwnProperty(t)&&dr("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),r[n].overloadTable[t]=e):(r[n]=e,void 0!==t&&(r[n].numArguments=t))}(n,(function(){!function(r,n){var e=[],t={};throw n.forEach((function r(n){t[n]||rr[n]||(nr[n]?nr[n].forEach(r):(e.push(n),t[n]=!0))})),new Ar(r+": "+e.map(Tr).join([", "]))}("Cannot call "+n+" due to unbound types",u)}),e-1),ur([],u,(function(t){var a=[t[0],null].concat(t.slice(1));return function(n,e,t){r.hasOwnProperty(n)||ir("Replacing nonexistant public symbol"),void 0!==r[n].overloadTable&&void 0!==t?r[n].overloadTable[t]=e:(r[n]=e,r[n].argCount=t)}(n,function(r,n,e,t,a){var o=n.length;o<2&&dr("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==n[1]&&null!==e,u=!1,c=1;c<n.length;++c)if(null!==n[c]&&void 0===n[c].destructorFunction){u=!0;break}var s="void"!==n[0].name,f="",l="";for(c=0;c<o-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+er(r)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+r+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[dr,t,a,X,n[0],n[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<o-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+n[c+2].name+"\n",h.push("argType"+c),v.push(n[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<n.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==n[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+n[c].name+"\n",h.push(m+"_dtor"),v.push(n[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(r,n){if(!(r instanceof Function))throw new TypeError("new_ called with constructor type "+typeof r+" which is not a function");var e=tr(r.name||"unknownFunctionName",(function(){}));e.prototype=r.prototype;var t=new e,a=r.apply(t,n);return a instanceof Object?a:t}(Function,h).apply(null,v)}(n,a,null,o,i),e-1),[]}))},c:function(r,n,e,t,a){n=fr(n),-1===a&&(a=4294967295);var o=cr(e),i=function(r){return r};if(0===t){var u=32-8*e;i=function(r){return r<<u>>>u}}var c=n.includes("unsigned");pr(r,{name:n,fromWireType:i,toWireType:function(r,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+yr(e)+'" to '+this.name);if(e<t||e>a)throw new TypeError('Passing a number "'+yr(e)+'" from JS side to C/C++ side to an argument of type "'+n+'", which is outside the valid range ['+t+", "+a+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:Cr(n,o,0!==t),destructorFunction:null})},b:function(r,n,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function a(r){var n=E,e=n[r>>=2],a=n[r+1];return new t(w,a,e)}pr(r,{name:e=fr(e),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},j:function(r,n){var e="std::string"===(n=fr(n));pr(r,{name:n,fromWireType:function(r){var n,t=E[r>>2];if(e)for(var a=r+4,o=0;o<=t;++o){var i=r+4+o;if(o==t||0==b[i]){var u=y(a,i-a);void 0===n?n=u:(n+=String.fromCharCode(0),n+=u),a=i+1}}else{var c=new Array(t);for(o=0;o<t;++o)c[o]=String.fromCharCode(b[r+4+o]);n=c.join("")}return Or(r),n},toWireType:function(r,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var t="string"==typeof n;t||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||dr("Cannot pass non-string to std::string");var a=(e&&t?function(){return function(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&r.charCodeAt(++e)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n}(n)}:function(){return n.length})(),o=Mr(4+a+1);if(E[o>>2]=a,e&&t)!function(r,n,e,t){if(!(t>0))return 0;for(var a=e+t-1,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),i<=127){if(e>=a)break;n[e++]=i}else if(i<=2047){if(e+1>=a)break;n[e++]=192|i>>6,n[e++]=128|63&i}else if(i<=65535){if(e+2>=a)break;n[e++]=224|i>>12,n[e++]=128|i>>6&63,n[e++]=128|63&i}else{if(e+3>=a)break;n[e++]=240|i>>18,n[e++]=128|i>>12&63,n[e++]=128|i>>6&63,n[e++]=128|63&i}}n[e]=0}(n,b,o+4,a+1);else if(t)for(var i=0;i<a;++i){var u=n.charCodeAt(i);u>255&&(Or(o),dr("String has UTF-16 code units that do not fit in 8 bits")),b[o+4+i]=u}else for(i=0;i<a;++i)b[o+4+i]=n[i];return null!==r&&r.push(Or,o),o},argPackAdvance:8,readValueFromPointer:Z,destructorFunction:function(r){Or(r)}})},e:function(r,n,e){var t,a,o,i,u;e=fr(e),2===n?(t=P,a=S,i=F,o=function(){return T},u=1):4===n&&(t=R,a=I,i=j,o=function(){return E},u=2),pr(r,{name:e,fromWireType:function(r){for(var e,a=E[r>>2],i=o(),c=r+4,s=0;s<=a;++s){var f=r+4+s*n;if(s==a||0==i[f>>u]){var l=t(c,f-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=f+n}}return Or(r),e},toWireType:function(r,t){"string"!=typeof t&&dr("Cannot pass non-string to C++ string type "+e);var o=i(t),c=Mr(4+o+n);return E[c>>2]=o>>u,a(t,c+4,o+n),null!==r&&r.push(Or,c),c},argPackAdvance:8,readValueFromPointer:Z,destructorFunction:function(r){Or(r)}})},m:function(r,n,e,t,a,o){$[r]={name:fr(n),rawConstructor:br(e,t),rawDestructor:br(a,o),fields:[]}},a:function(r,n,e,t,a,o,i,u,c,s){$[r].fields.push({fieldName:fr(n),getterReturnType:e,getter:br(t,a),getterContext:o,setterArgumentType:i,setter:br(u,c),setterContext:s})},z:function(r,n){pr(r,{isVoid:!0,name:n=fr(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(r,n){}})},g:mr,u:function(r){return 0===r?gr(kr()):(r=void 0===(e=Er[n=r])?fr(n):e,gr(kr()[r]));var n,e},k:function(r){r>4&&(vr[r].refcount+=1)},n:function(n,e,t,a){n=function(r){return r||dr("Cannot use deleted val. handle = "+r),vr[r].value}(n);var o=Wr[e];return o||(o=function(n){for(var e="",t=0;t<n;++t)e+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+n+"(constructor, argTypes, args) {\n";for(t=0;t<n;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(xr,r,gr)}(e),Wr[e]=o),o(n,t,a)},h:function(){V()},r:function(r,n,e){b.copyWithin(r,n,n+e)},d:function(r){var n,e=b.length,t=2147483648;if((r>>>=0)>t)return!1;for(var a=1;a<=4;a*=2){var o=e*(1+.2/a);if(o=Math.min(o,r+100663296),Pr(Math.min(t,((n=Math.max(r,o))%65536>0&&(n+=65536-n%65536),n))))return!0}return!1},s:function(r,n){var e=0;return Fr().forEach((function(t,a){var o=n+e;C[r+4*a>>2]=o,function(r,n,e){for(var t=0;t<r.length;++t)_[n++>>0]=r.charCodeAt(t);_[n>>0]=0}(t,o),e+=t.length+1})),0},t:function(r,n){var e=Fr();C[r>>2]=e.length;var t=0;return e.forEach((function(r){t+=r.length+1})),C[n>>2]=t,0},A:function(n){!function(n,e){J()||(r.onExit&&r.onExit(n),m=!0),s(n,new Ur(n))}(n)},w:function(r){return 0},o:function(r,n,e,t,a){},v:function(r,n,e,t){for(var a=0,o=0;o<e;o++){for(var i=C[n+8*o>>2],u=C[n+(8*o+4)>>2],c=0;c<u;c++)Rr.printChar(r,b[i+c]);a+=u}return C[t>>2]=a,0},q:function(r){}},Mr=(function(){var n={a:jr};function t(n,e){var t,a=n.exports;r.asm=a,M((h=r.asm.C).buffer),O=r.asm.I,t=r.asm.D,B.unshift(t),function(n){if(L--,r.monitorRunDependencies&&r.monitorRunDependencies(L),0==L&&(null!==q&&(clearInterval(q),q=null),N)){var e=N;N=null,e()}}()}function a(r){t(r.instance)}function o(r){return(l||"function"!=typeof fetch?Promise.resolve().then((function(){return Y(G)})):fetch(G,{credentials:"same-origin"}).then((function(r){if(!r.ok)throw"failed to load wasm binary file at '"+G+"'";return r.arrayBuffer()})).catch((function(){return Y(G)}))).then((function(r){return WebAssembly.instantiate(r,n)})).then(r,(function(r){p("failed to asynchronously prepare wasm: "+r),V(r)}))}if(L++,r.monitorRunDependencies&&r.monitorRunDependencies(L),r.instantiateWasm)try{return r.instantiateWasm(n,t)}catch(r){return p("Module.instantiateWasm callback failed with error: "+r),!1}(l||"function"!=typeof WebAssembly.instantiateStreaming||z(G)||"function"!=typeof fetch?o(a):fetch(G,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,n).then(a,(function(r){return p("wasm streaming compile failed: "+r),p("falling back to ArrayBuffer instantiation"),o(a)}))}))).catch(e)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.D).apply(null,arguments)},r._malloc=function(){return(Mr=r._malloc=r.asm.E).apply(null,arguments)}),Or=r._free=function(){return(Or=r._free=r.asm.F).apply(null,arguments)},Dr=r.___getTypeName=function(){return(Dr=r.___getTypeName=r.asm.G).apply(null,arguments)};function Ur(r){this.name="ExitStatus",this.message="Program terminated with exit("+r+")",this.status=r}function Br(e){function t(){Ir||(Ir=!0,r.calledRun=!0,m||(Q(B),n(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)n=r.postRun.shift(),H.unshift(n);var n;Q(H)}()))}e=e||u,L>0||(function(){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)n=r.preRun.shift(),U.unshift(n);var n;Q(U)}(),L>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),t()}),1)):t()))}if(r.___embind_register_native_and_builtin_types=function(){return(r.___embind_register_native_and_builtin_types=r.asm.H).apply(null,arguments)},r.dynCall_jiji=function(){return(r.dynCall_jiji=r.asm.J).apply(null,arguments)},N=function r(){Ir||Br(),Ir||(N=r)},r.run=Br,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return Br(),r.ready};let Wr;function Pr(r,n){return async function(r,n){return Wr||(Wr=fr(xr)),(await Wr).encode(r.data,r.width,r.height,n).buffer}(r,n)}var Sr=a(277);let Fr,Rr=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0});Rr.decode();let Ir=null;function jr(){return null!==Ir&&Ir.buffer===Fr.memory.buffer||(Ir=new Uint8Array(Fr.memory.buffer)),Ir}let Mr=0,Or=null;function Dr(){return null!==Or&&Or.buffer===Fr.memory.buffer||(Or=new Int32Array(Fr.memory.buffer)),Or}function Ur(r,n,e){try{const f=Fr.__wbindgen_add_to_stack_pointer(-16);var t=function(r,n){const e=n(1*r.length);return jr().set(r,e/1),Mr=r.length,e}(r,Fr.__wbindgen_malloc),a=Mr;Fr.optimise(f,t,a,n,e);var o=Dr()[f/4+0],i=Dr()[f/4+1],u=(c=o,s=i,jr().subarray(c/1,c/1+s)).slice();return Fr.__wbindgen_free(o,1*i),u}finally{Fr.__wbindgen_add_to_stack_pointer(16)}var c,s}const Br=async function r(n){void 0===n&&(n=new URL(a(706),a.b));const e={wbg:{}};e.wbg.__wbindgen_throw=function(r,n){throw new Error((e=r,t=n,Rr.decode(jr().subarray(e,e+t))));var e,t},("string"==typeof n||"function"==typeof Request&&n instanceof Request||"function"==typeof URL&&n instanceof URL)&&(n=fetch(n));const{instance:t,module:o}=await async function(r,n){if("function"==typeof Response&&r instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(r,n)}catch(n){if("application/wasm"==r.headers.get("Content-Type"))throw n;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",n)}const e=await r.arrayBuffer();return await WebAssembly.instantiate(e,n)}{const e=await WebAssembly.instantiate(r,n);return e instanceof WebAssembly.Instance?{instance:e,module:r}:e}}(await n,e);return Fr=t.exports,r.__wbindgen_wasm_module=o,Fr};async function Hr(){return await Br(),Ur}let Lr;async function qr(r,n){const e=await w(r,"image/png");return async function(r,n){return Lr||(Lr=pr().then((r=>r?async function(){return await(0,Sr.default)(),await(0,Sr.initThreadPool)(navigator.hardwareConcurrency),Sr.optimise}():Hr()))),(await Lr)(new Uint8Array(r),n.level,n.interlace).buffer}(await E(e),n)}const Nr=function(r){var n,e;(r=void 0!==(r=r||{})?r:{}).ready=new Promise((function(r,t){n=r,e=t}));var t,o={};for(t in r)r.hasOwnProperty(t)&&(o[t]=r[t]);var i,u=[],c="";c=self.location.href,c=0!==(c="file:///D:/altri/squoosh-web/squoosh-browser/codecs/webp/enc/webp_enc_simd.js").indexOf("blob:")?c.substr(0,c.lastIndexOf("/")+1):"",i=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)},r.print||console.log.bind(console);var s,f,l=r.printErr||console.warn.bind(console);for(t in o)o.hasOwnProperty(t)&&(r[t]=o[t]);o=null,r.arguments&&(u=r.arguments),r.thisProgram&&r.thisProgram,r.quit&&r.quit,r.wasmBinary&&(s=r.wasmBinary),r.noExitRuntime,"object"!=typeof WebAssembly&&H("no native wasm support detected");var d=!1,p=new TextDecoder("utf8");function h(r,n){if(!r)return"";for(var e=r+n,t=r;!(t>=e)&&g[t];)++t;return p.decode(g.subarray(r,t))}var v,m,g,y,w,_,b,A,T,C=new TextDecoder("utf-16le");function E(r,n){for(var e=r,t=e>>1,a=t+n/2;!(t>=a)&&w[t];)++t;return e=t<<1,C.decode(g.subarray(r,e))}function k(r,n,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=n,a=(e-=2)<2*r.length?e/2:r.length,o=0;o<a;++o){var i=r.charCodeAt(o);y[n>>1]=i,n+=2}return y[n>>1]=0,n-t}function x(r){return 2*r.length}function W(r,n){for(var e=0,t="";!(e>=n/4);){var a=_[r+4*e>>2];if(0==a)break;if(++e,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function P(r,n,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=n,a=t+e-4,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),_[n>>2]=i,(n+=4)+4>a)break}return _[n>>2]=0,n-t}function S(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&++e,n+=4}return n}function F(n){v=n,r.HEAP8=m=new Int8Array(n),r.HEAP16=y=new Int16Array(n),r.HEAP32=_=new Int32Array(n),r.HEAPU8=g=new Uint8Array(n),r.HEAPU16=w=new Uint16Array(n),r.HEAPU32=b=new Uint32Array(n),r.HEAPF32=A=new Float32Array(n),r.HEAPF64=T=new Float64Array(n)}r.INITIAL_MEMORY;var R,I,j=[],M=[],O=[],D=0,U=null,B=null;function H(n){r.onAbort&&r.onAbort(n),l(n+=""),d=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(n);throw e(t),t}function L(r){return r.startsWith("data:application/octet-stream;base64,")}if(r.preloadedImages={},r.preloadedAudios={},r.locateFile)L(q="webp_enc_simd.wasm")||(I=q,q=r.locateFile?r.locateFile(I,c):c+I);else var q=new URL(a(114),a.b).toString();function N(r){try{if(r==q&&s)return new Uint8Array(s);if(i)return i(r);throw"both async and sync fetching of the wasm failed"}catch(r){H(r)}}function V(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?R.get(t)():R.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(r)}}var z={};function G(r){for(;r.length;){var n=r.pop();r.pop()(n)}}function Y(r){return this.fromWireType(b[r>>2])}var Q={},J={},$={};function X(r){if(void 0===r)return"_unknown";var n=(r=r.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return n>=48&&n<=57?"_"+r:r}function Z(r,n){return r=X(r),new Function("body","return function "+r+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(n)}function K(r,n){var e=Z(n,(function(r){this.name=n,this.message=r;var e=new Error(r).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var rr=void 0;function nr(r){throw new rr(r)}function er(r,n,e){function t(n){var t=e(n);t.length!==r.length&&nr("Mismatched type converter count");for(var a=0;a<r.length;++a)cr(r[a],t[a])}r.forEach((function(r){$[r]=n}));var a=new Array(n.length),o=[],i=0;n.forEach((function(r,n){J.hasOwnProperty(r)?a[n]=J[r]:(o.push(r),Q.hasOwnProperty(r)||(Q[r]=[]),Q[r].push((function(){a[n]=J[r],++i===o.length&&t(a)})))})),0===o.length&&t(a)}function tr(r){switch(r){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+r)}}var ar=void 0;function or(r){for(var n="",e=r;g[e];)n+=ar[g[e++]];return n}var ir=void 0;function ur(r){throw new ir(r)}function cr(r,n,e){if(e=e||{},!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=n.name;if(r||ur('type "'+t+'" must have a positive integer typeid pointer'),J.hasOwnProperty(r)){if(e.ignoreDuplicateRegistrations)return;ur("Cannot register type '"+t+"' twice")}if(J[r]=n,delete $[r],Q.hasOwnProperty(r)){var a=Q[r];delete Q[r],a.forEach((function(r){r()}))}}var sr=[],fr=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function lr(r){r>4&&0==--fr[r].refcount&&(fr[r]=void 0,sr.push(r))}function dr(r){switch(r){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=sr.length?sr.pop():fr.length;return fr[n]={refcount:1,value:r},n}}function pr(n,e,t){r.hasOwnProperty(n)?((void 0===t||void 0!==r[n].overloadTable&&void 0!==r[n].overloadTable[t])&&ur("Cannot register public name '"+n+"' twice"),function(r,n,e){if(void 0===r[n].overloadTable){var t=r[n];r[n]=function(){return r[n].overloadTable.hasOwnProperty(arguments.length)||ur("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+r[n].overloadTable+")!"),r[n].overloadTable[arguments.length].apply(this,arguments)},r[n].overloadTable=[],r[n].overloadTable[t.argCount]=t}}(r,n,n),r.hasOwnProperty(t)&&ur("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),r[n].overloadTable[t]=e):(r[n]=e,void 0!==t&&(r[n].numArguments=t))}function hr(r,n,e){switch(n){case 0:return function(r){var n=e?m:g;return this.fromWireType(n[r])};case 1:return function(r){var n=e?y:w;return this.fromWireType(n[r>>1])};case 2:return function(r){var n=e?_:b;return this.fromWireType(n[r>>2])};default:throw new TypeError("Unknown integer type: "+r)}}function vr(r){var n=Fr(r),e=or(n);return Sr(n),e}function mr(r,n){var e=J[r];return void 0===e&&ur(n+" has unknown type "+vr(r)),e}function gr(r){if(null===r)return"null";var n=typeof r;return"object"===n||"array"===n||"function"===n?r.toString():""+r}function yr(r,n){switch(n){case 2:return function(r){return this.fromWireType(A[r>>2])};case 3:return function(r){return this.fromWireType(T[r>>3])};default:throw new TypeError("Unknown float type: "+r)}}function wr(n,e,t){return n.includes("j")?function(n,e,t){var a=r["dynCall_"+n];return t&&t.length?a.apply(null,[e].concat(t)):a.call(null,e)}(n,e,t):R.get(e).apply(null,t)}function _r(r,n){var e,t,a,o=(r=or(r)).includes("j")?(e=r,t=n,a=[],function(){a.length=arguments.length;for(var r=0;r<arguments.length;r++)a[r]=arguments[r];return wr(e,t,a)}):R.get(n);return"function"!=typeof o&&ur("unknown function pointer with signature "+r+": "+n),o}var br=void 0;function Ar(r,n,e){switch(n){case 0:return e?function(r){return m[r]}:function(r){return g[r]};case 1:return e?function(r){return y[r>>1]}:function(r){return w[r>>1]};case 2:return e?function(r){return _[r>>2]}:function(r){return b[r>>2]};default:throw new TypeError("Unknown integer type: "+r)}}var Tr={};function Cr(){return"object"==typeof globalThis?globalThis:Function("return this")()}var Er={};function kr(r){try{return f.grow(r-v.byteLength+65535>>>16),F(f.buffer),1}catch(r){}}rr=r.InternalError=K(Error,"InternalError"),function(){for(var r=new Array(256),n=0;n<256;++n)r[n]=String.fromCharCode(n);ar=r}(),ir=r.BindingError=K(Error,"BindingError"),r.count_emval_handles=function(){for(var r=0,n=5;n<fr.length;++n)void 0!==fr[n]&&++r;return r},r.get_first_emval=function(){for(var r=5;r<fr.length;++r)if(void 0!==fr[r])return fr[r];return null},br=r.UnboundTypeError=K(Error,"UnboundTypeError");var xr,Wr={x:function(r,n){},l:function(r){var n=z[r];delete z[r];var e=n.rawConstructor,t=n.rawDestructor,a=n.fields;er([r],a.map((function(r){return r.getterReturnType})).concat(a.map((function(r){return r.setterArgumentType}))),(function(r){var o={};return a.forEach((function(n,e){var t=n.fieldName,i=r[e],u=n.getter,c=n.getterContext,s=r[e+a.length],f=n.setter,l=n.setterContext;o[t]={read:function(r){return i.fromWireType(u(c,r))},write:function(r,n){var e=[];f(l,r,s.toWireType(e,n)),G(e)}}})),[{name:n.name,fromWireType:function(r){var n={};for(var e in o)n[e]=o[e].read(r);return t(r),n},toWireType:function(r,n){for(var a in o)if(!(a in n))throw new TypeError('Missing field:  "'+a+'"');var i=e();for(a in o)o[a].write(i,n[a]);return null!==r&&r.push(t,i),i},argPackAdvance:8,readValueFromPointer:Y,destructorFunction:t}]}))},p:function(r,n,e,t,a){},t:function(r,n,e,t,a){var o=tr(e);cr(r,{name:n=or(n),fromWireType:function(r){return!!r},toWireType:function(r,n){return n?t:a},argPackAdvance:8,readValueFromPointer:function(r){var t;if(1===e)t=m;else if(2===e)t=y;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+n);t=_}return this.fromWireType(t[r>>o])},destructorFunction:null})},s:function(r,n){cr(r,{name:n=or(n),fromWireType:function(r){var n=fr[r].value;return lr(r),n},toWireType:function(r,n){return dr(n)},argPackAdvance:8,readValueFromPointer:Y,destructorFunction:null})},n:function(r,n,e,t){var a=tr(e);function o(){}n=or(n),o.values={},cr(r,{name:n,constructor:o,fromWireType:function(r){return this.constructor.values[r]},toWireType:function(r,n){return n.value},argPackAdvance:8,readValueFromPointer:hr(n,a,t),destructorFunction:null}),pr(n,o)},d:function(r,n,e){var t=mr(r,"enum");n=or(n);var a=t.constructor,o=Object.create(t.constructor.prototype,{value:{value:e},constructor:{value:Z(t.name+"_"+n,(function(){}))}});a.values[e]=o,a[n]=o},j:function(r,n,e){var t=tr(e);cr(r,{name:n=or(n),fromWireType:function(r){return r},toWireType:function(r,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+gr(n)+'" to '+this.name);return n},argPackAdvance:8,readValueFromPointer:yr(n,t),destructorFunction:null})},h:function(n,e,t,a,o,i){var u=function(r,n){for(var e=[],t=0;t<r;t++)e.push(_[(n>>2)+t]);return e}(e,t);n=or(n),o=_r(a,o),pr(n,(function(){!function(r,n){var e=[],t={};throw n.forEach((function r(n){t[n]||J[n]||($[n]?$[n].forEach(r):(e.push(n),t[n]=!0))})),new br(r+": "+e.map(vr).join([", "]))}("Cannot call "+n+" due to unbound types",u)}),e-1),er([],u,(function(t){var a=[t[0],null].concat(t.slice(1));return function(n,e,t){r.hasOwnProperty(n)||nr("Replacing nonexistant public symbol"),void 0!==r[n].overloadTable&&void 0!==t?r[n].overloadTable[t]=e:(r[n]=e,r[n].argCount=t)}(n,function(r,n,e,t,a){var o=n.length;o<2&&ur("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==n[1]&&null!==e,u=!1,c=1;c<n.length;++c)if(null!==n[c]&&void 0===n[c].destructorFunction){u=!0;break}var s="void"!==n[0].name,f="",l="";for(c=0;c<o-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+X(r)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+r+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[ur,t,a,G,n[0],n[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<o-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+n[c+2].name+"\n",h.push("argType"+c),v.push(n[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<n.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==n[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+n[c].name+"\n",h.push(m+"_dtor"),v.push(n[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(r,n){if(!(r instanceof Function))throw new TypeError("new_ called with constructor type "+typeof r+" which is not a function");var e=Z(r.name||"unknownFunctionName",(function(){}));e.prototype=r.prototype;var t=new e,a=r.apply(t,n);return a instanceof Object?a:t}(Function,h).apply(null,v)}(n,a,null,o,i),e-1),[]}))},c:function(r,n,e,t,a){n=or(n),-1===a&&(a=4294967295);var o=tr(e),i=function(r){return r};if(0===t){var u=32-8*e;i=function(r){return r<<u>>>u}}var c=n.includes("unsigned");cr(r,{name:n,fromWireType:i,toWireType:function(r,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+gr(e)+'" to '+this.name);if(e<t||e>a)throw new TypeError('Passing a number "'+gr(e)+'" from JS side to C/C++ side to an argument of type "'+n+'", which is outside the valid range ['+t+", "+a+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:Ar(n,o,0!==t),destructorFunction:null})},b:function(r,n,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function a(r){var n=b,e=n[r>>=2],a=n[r+1];return new t(v,a,e)}cr(r,{name:e=or(e),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},k:function(r,n){var e="std::string"===(n=or(n));cr(r,{name:n,fromWireType:function(r){var n,t=b[r>>2];if(e)for(var a=r+4,o=0;o<=t;++o){var i=r+4+o;if(o==t||0==g[i]){var u=h(a,i-a);void 0===n?n=u:(n+=String.fromCharCode(0),n+=u),a=i+1}}else{var c=new Array(t);for(o=0;o<t;++o)c[o]=String.fromCharCode(g[r+4+o]);n=c.join("")}return Sr(r),n},toWireType:function(r,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var t="string"==typeof n;t||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||ur("Cannot pass non-string to std::string");var a=(e&&t?function(){return function(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&r.charCodeAt(++e)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n}(n)}:function(){return n.length})(),o=Pr(4+a+1);if(b[o>>2]=a,e&&t)!function(r,n,e,t){if(!(t>0))return 0;for(var a=e+t-1,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),i<=127){if(e>=a)break;n[e++]=i}else if(i<=2047){if(e+1>=a)break;n[e++]=192|i>>6,n[e++]=128|63&i}else if(i<=65535){if(e+2>=a)break;n[e++]=224|i>>12,n[e++]=128|i>>6&63,n[e++]=128|63&i}else{if(e+3>=a)break;n[e++]=240|i>>18,n[e++]=128|i>>12&63,n[e++]=128|i>>6&63,n[e++]=128|63&i}}n[e]=0}(n,g,o+4,a+1);else if(t)for(var i=0;i<a;++i){var u=n.charCodeAt(i);u>255&&(Sr(o),ur("String has UTF-16 code units that do not fit in 8 bits")),g[o+4+i]=u}else for(i=0;i<a;++i)g[o+4+i]=n[i];return null!==r&&r.push(Sr,o),o},argPackAdvance:8,readValueFromPointer:Y,destructorFunction:function(r){Sr(r)}})},g:function(r,n,e){var t,a,o,i,u;e=or(e),2===n?(t=E,a=k,i=x,o=function(){return w},u=1):4===n&&(t=W,a=P,i=S,o=function(){return b},u=2),cr(r,{name:e,fromWireType:function(r){for(var e,a=b[r>>2],i=o(),c=r+4,s=0;s<=a;++s){var f=r+4+s*n;if(s==a||0==i[f>>u]){var l=t(c,f-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=f+n}}return Sr(r),e},toWireType:function(r,t){"string"!=typeof t&&ur("Cannot pass non-string to C++ string type "+e);var o=i(t),c=Pr(4+o+n);return b[c>>2]=o>>u,a(t,c+4,o+n),null!==r&&r.push(Sr,c),c},argPackAdvance:8,readValueFromPointer:Y,destructorFunction:function(r){Sr(r)}})},m:function(r,n,e,t,a,o){z[r]={name:or(n),rawConstructor:_r(e,t),rawDestructor:_r(a,o),fields:[]}},a:function(r,n,e,t,a,o,i,u,c,s){z[r].fields.push({fieldName:or(n),getterReturnType:e,getter:_r(t,a),getterContext:o,setterArgumentType:i,setter:_r(u,c),setterContext:s})},u:function(r,n){cr(r,{isVoid:!0,name:n=or(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(r,n){}})},f:lr,w:function(r){return 0===r?dr(Cr()):(r=void 0===(e=Tr[n=r])?or(n):e,dr(Cr()[r]));var n,e},v:function(r){r>4&&(fr[r].refcount+=1)},o:function(n,e,t,a){n=function(r){return r||ur("Cannot use deleted val. handle = "+r),fr[r].value}(n);var o=Er[e];return o||(o=function(n){for(var e="",t=0;t<n;++t)e+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+n+"(constructor, argTypes, args) {\n";for(t=0;t<n;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(mr,r,dr)}(e),Er[e]=o),o(n,t,a)},i:function(){H()},r:function(r,n,e){g.copyWithin(r,n,n+e)},e:function(r){var n,e=g.length,t=2147483648;if((r>>>=0)>t)return!1;for(var a=1;a<=4;a*=2){var o=e*(1+.2/a);if(o=Math.min(o,r+100663296),kr(Math.min(t,((n=Math.max(r,o))%65536>0&&(n+=65536-n%65536),n))))return!0}return!1},q:function(r){}},Pr=(function(){var n={a:Wr};function t(n,e){var t,a=n.exports;r.asm=a,F((f=r.asm.y).buffer),R=r.asm.E,t=r.asm.z,M.unshift(t),function(n){if(D--,r.monitorRunDependencies&&r.monitorRunDependencies(D),0==D&&(null!==U&&(clearInterval(U),U=null),B)){var e=B;B=null,e()}}()}function a(r){t(r.instance)}function o(r){return(s||"function"!=typeof fetch?Promise.resolve().then((function(){return N(q)})):fetch(q,{credentials:"same-origin"}).then((function(r){if(!r.ok)throw"failed to load wasm binary file at '"+q+"'";return r.arrayBuffer()})).catch((function(){return N(q)}))).then((function(r){return WebAssembly.instantiate(r,n)})).then(r,(function(r){l("failed to asynchronously prepare wasm: "+r),H(r)}))}if(D++,r.monitorRunDependencies&&r.monitorRunDependencies(D),r.instantiateWasm)try{return r.instantiateWasm(n,t)}catch(r){return l("Module.instantiateWasm callback failed with error: "+r),!1}(s||"function"!=typeof WebAssembly.instantiateStreaming||L(q)||"function"!=typeof fetch?o(a):fetch(q,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,n).then(a,(function(r){return l("wasm streaming compile failed: "+r),l("falling back to ArrayBuffer instantiation"),o(a)}))}))).catch(e)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.z).apply(null,arguments)},r._malloc=function(){return(Pr=r._malloc=r.asm.A).apply(null,arguments)}),Sr=r._free=function(){return(Sr=r._free=r.asm.B).apply(null,arguments)},Fr=r.___getTypeName=function(){return(Fr=r.___getTypeName=r.asm.C).apply(null,arguments)};function Rr(e){function t(){xr||(xr=!0,r.calledRun=!0,d||(V(M),n(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)n=r.postRun.shift(),O.unshift(n);var n;V(O)}()))}e=e||u,D>0||(function(){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)n=r.preRun.shift(),j.unshift(n);var n;V(j)}(),D>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),t()}),1)):t()))}if(r.___embind_register_native_and_builtin_types=function(){return(r.___embind_register_native_and_builtin_types=r.asm.D).apply(null,arguments)},r.dynCall_jiiii=function(){return(r.dynCall_jiiii=r.asm.F).apply(null,arguments)},B=function r(){xr||Rr(),xr||(B=r)},r.run=Rr,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return Rr(),r.ready},Vr=function(r){var n,e;(r=void 0!==(r=r||{})?r:{}).ready=new Promise((function(r,t){n=r,e=t}));var t,o={};for(t in r)r.hasOwnProperty(t)&&(o[t]=r[t]);var i,u=[],c="";c=self.location.href,c=0!==(c="file:///D:/altri/squoosh-web/squoosh-browser/codecs/webp/enc/webp_enc.js").indexOf("blob:")?c.substr(0,c.lastIndexOf("/")+1):"",i=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)},r.print||console.log.bind(console);var s,f,l=r.printErr||console.warn.bind(console);for(t in o)o.hasOwnProperty(t)&&(r[t]=o[t]);o=null,r.arguments&&(u=r.arguments),r.thisProgram&&r.thisProgram,r.quit&&r.quit,r.wasmBinary&&(s=r.wasmBinary),r.noExitRuntime,"object"!=typeof WebAssembly&&H("no native wasm support detected");var d=!1,p=new TextDecoder("utf8");function h(r,n){if(!r)return"";for(var e=r+n,t=r;!(t>=e)&&g[t];)++t;return p.decode(g.subarray(r,t))}var v,m,g,y,w,_,b,A,T,C=new TextDecoder("utf-16le");function E(r,n){for(var e=r,t=e>>1,a=t+n/2;!(t>=a)&&w[t];)++t;return e=t<<1,C.decode(g.subarray(r,e))}function k(r,n,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=n,a=(e-=2)<2*r.length?e/2:r.length,o=0;o<a;++o){var i=r.charCodeAt(o);y[n>>1]=i,n+=2}return y[n>>1]=0,n-t}function x(r){return 2*r.length}function W(r,n){for(var e=0,t="";!(e>=n/4);){var a=_[r+4*e>>2];if(0==a)break;if(++e,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function P(r,n,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=n,a=t+e-4,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),_[n>>2]=i,(n+=4)+4>a)break}return _[n>>2]=0,n-t}function S(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&++e,n+=4}return n}function F(n){v=n,r.HEAP8=m=new Int8Array(n),r.HEAP16=y=new Int16Array(n),r.HEAP32=_=new Int32Array(n),r.HEAPU8=g=new Uint8Array(n),r.HEAPU16=w=new Uint16Array(n),r.HEAPU32=b=new Uint32Array(n),r.HEAPF32=A=new Float32Array(n),r.HEAPF64=T=new Float64Array(n)}r.INITIAL_MEMORY;var R,I,j=[],M=[],O=[],D=0,U=null,B=null;function H(n){r.onAbort&&r.onAbort(n),l(n+=""),d=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(n);throw e(t),t}function L(r){return r.startsWith("data:application/octet-stream;base64,")}if(r.preloadedImages={},r.preloadedAudios={},r.locateFile)L(q="webp_enc.wasm")||(I=q,q=r.locateFile?r.locateFile(I,c):c+I);else var q=new URL(a(949),a.b).toString();function N(r){try{if(r==q&&s)return new Uint8Array(s);if(i)return i(r);throw"both async and sync fetching of the wasm failed"}catch(r){H(r)}}function V(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?R.get(t)():R.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(r)}}var z={};function G(r){for(;r.length;){var n=r.pop();r.pop()(n)}}function Y(r){return this.fromWireType(b[r>>2])}var Q={},J={},$={};function X(r){if(void 0===r)return"_unknown";var n=(r=r.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return n>=48&&n<=57?"_"+r:r}function Z(r,n){return r=X(r),new Function("body","return function "+r+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(n)}function K(r,n){var e=Z(n,(function(r){this.name=n,this.message=r;var e=new Error(r).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var rr=void 0;function nr(r){throw new rr(r)}function er(r,n,e){function t(n){var t=e(n);t.length!==r.length&&nr("Mismatched type converter count");for(var a=0;a<r.length;++a)cr(r[a],t[a])}r.forEach((function(r){$[r]=n}));var a=new Array(n.length),o=[],i=0;n.forEach((function(r,n){J.hasOwnProperty(r)?a[n]=J[r]:(o.push(r),Q.hasOwnProperty(r)||(Q[r]=[]),Q[r].push((function(){a[n]=J[r],++i===o.length&&t(a)})))})),0===o.length&&t(a)}function tr(r){switch(r){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+r)}}var ar=void 0;function or(r){for(var n="",e=r;g[e];)n+=ar[g[e++]];return n}var ir=void 0;function ur(r){throw new ir(r)}function cr(r,n,e){if(e=e||{},!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=n.name;if(r||ur('type "'+t+'" must have a positive integer typeid pointer'),J.hasOwnProperty(r)){if(e.ignoreDuplicateRegistrations)return;ur("Cannot register type '"+t+"' twice")}if(J[r]=n,delete $[r],Q.hasOwnProperty(r)){var a=Q[r];delete Q[r],a.forEach((function(r){r()}))}}var sr=[],fr=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function lr(r){r>4&&0==--fr[r].refcount&&(fr[r]=void 0,sr.push(r))}function dr(r){switch(r){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=sr.length?sr.pop():fr.length;return fr[n]={refcount:1,value:r},n}}function pr(n,e,t){r.hasOwnProperty(n)?((void 0===t||void 0!==r[n].overloadTable&&void 0!==r[n].overloadTable[t])&&ur("Cannot register public name '"+n+"' twice"),function(r,n,e){if(void 0===r[n].overloadTable){var t=r[n];r[n]=function(){return r[n].overloadTable.hasOwnProperty(arguments.length)||ur("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+r[n].overloadTable+")!"),r[n].overloadTable[arguments.length].apply(this,arguments)},r[n].overloadTable=[],r[n].overloadTable[t.argCount]=t}}(r,n,n),r.hasOwnProperty(t)&&ur("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),r[n].overloadTable[t]=e):(r[n]=e,void 0!==t&&(r[n].numArguments=t))}function hr(r,n,e){switch(n){case 0:return function(r){var n=e?m:g;return this.fromWireType(n[r])};case 1:return function(r){var n=e?y:w;return this.fromWireType(n[r>>1])};case 2:return function(r){var n=e?_:b;return this.fromWireType(n[r>>2])};default:throw new TypeError("Unknown integer type: "+r)}}function vr(r){var n=Fr(r),e=or(n);return Sr(n),e}function mr(r,n){var e=J[r];return void 0===e&&ur(n+" has unknown type "+vr(r)),e}function gr(r){if(null===r)return"null";var n=typeof r;return"object"===n||"array"===n||"function"===n?r.toString():""+r}function yr(r,n){switch(n){case 2:return function(r){return this.fromWireType(A[r>>2])};case 3:return function(r){return this.fromWireType(T[r>>3])};default:throw new TypeError("Unknown float type: "+r)}}function wr(n,e,t){return n.includes("j")?function(n,e,t){var a=r["dynCall_"+n];return t&&t.length?a.apply(null,[e].concat(t)):a.call(null,e)}(n,e,t):R.get(e).apply(null,t)}function _r(r,n){var e,t,a,o=(r=or(r)).includes("j")?(e=r,t=n,a=[],function(){a.length=arguments.length;for(var r=0;r<arguments.length;r++)a[r]=arguments[r];return wr(e,t,a)}):R.get(n);return"function"!=typeof o&&ur("unknown function pointer with signature "+r+": "+n),o}var br=void 0;function Ar(r,n,e){switch(n){case 0:return e?function(r){return m[r]}:function(r){return g[r]};case 1:return e?function(r){return y[r>>1]}:function(r){return w[r>>1]};case 2:return e?function(r){return _[r>>2]}:function(r){return b[r>>2]};default:throw new TypeError("Unknown integer type: "+r)}}var Tr={};function Cr(){return"object"==typeof globalThis?globalThis:Function("return this")()}var Er={};function kr(r){try{return f.grow(r-v.byteLength+65535>>>16),F(f.buffer),1}catch(r){}}rr=r.InternalError=K(Error,"InternalError"),function(){for(var r=new Array(256),n=0;n<256;++n)r[n]=String.fromCharCode(n);ar=r}(),ir=r.BindingError=K(Error,"BindingError"),r.count_emval_handles=function(){for(var r=0,n=5;n<fr.length;++n)void 0!==fr[n]&&++r;return r},r.get_first_emval=function(){for(var r=5;r<fr.length;++r)if(void 0!==fr[r])return fr[r];return null},br=r.UnboundTypeError=K(Error,"UnboundTypeError");var xr,Wr={w:function(r,n){},l:function(r){var n=z[r];delete z[r];var e=n.rawConstructor,t=n.rawDestructor,a=n.fields;er([r],a.map((function(r){return r.getterReturnType})).concat(a.map((function(r){return r.setterArgumentType}))),(function(r){var o={};return a.forEach((function(n,e){var t=n.fieldName,i=r[e],u=n.getter,c=n.getterContext,s=r[e+a.length],f=n.setter,l=n.setterContext;o[t]={read:function(r){return i.fromWireType(u(c,r))},write:function(r,n){var e=[];f(l,r,s.toWireType(e,n)),G(e)}}})),[{name:n.name,fromWireType:function(r){var n={};for(var e in o)n[e]=o[e].read(r);return t(r),n},toWireType:function(r,n){for(var a in o)if(!(a in n))throw new TypeError('Missing field:  "'+a+'"');var i=e();for(a in o)o[a].write(i,n[a]);return null!==r&&r.push(t,i),i},argPackAdvance:8,readValueFromPointer:Y,destructorFunction:t}]}))},p:function(r,n,e,t,a){},s:function(r,n,e,t,a){var o=tr(e);cr(r,{name:n=or(n),fromWireType:function(r){return!!r},toWireType:function(r,n){return n?t:a},argPackAdvance:8,readValueFromPointer:function(r){var t;if(1===e)t=m;else if(2===e)t=y;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+n);t=_}return this.fromWireType(t[r>>o])},destructorFunction:null})},r:function(r,n){cr(r,{name:n=or(n),fromWireType:function(r){var n=fr[r].value;return lr(r),n},toWireType:function(r,n){return dr(n)},argPackAdvance:8,readValueFromPointer:Y,destructorFunction:null})},n:function(r,n,e,t){var a=tr(e);function o(){}n=or(n),o.values={},cr(r,{name:n,constructor:o,fromWireType:function(r){return this.constructor.values[r]},toWireType:function(r,n){return n.value},argPackAdvance:8,readValueFromPointer:hr(n,a,t),destructorFunction:null}),pr(n,o)},d:function(r,n,e){var t=mr(r,"enum");n=or(n);var a=t.constructor,o=Object.create(t.constructor.prototype,{value:{value:e},constructor:{value:Z(t.name+"_"+n,(function(){}))}});a.values[e]=o,a[n]=o},j:function(r,n,e){var t=tr(e);cr(r,{name:n=or(n),fromWireType:function(r){return r},toWireType:function(r,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+gr(n)+'" to '+this.name);return n},argPackAdvance:8,readValueFromPointer:yr(n,t),destructorFunction:null})},h:function(n,e,t,a,o,i){var u=function(r,n){for(var e=[],t=0;t<r;t++)e.push(_[(n>>2)+t]);return e}(e,t);n=or(n),o=_r(a,o),pr(n,(function(){!function(r,n){var e=[],t={};throw n.forEach((function r(n){t[n]||J[n]||($[n]?$[n].forEach(r):(e.push(n),t[n]=!0))})),new br(r+": "+e.map(vr).join([", "]))}("Cannot call "+n+" due to unbound types",u)}),e-1),er([],u,(function(t){var a=[t[0],null].concat(t.slice(1));return function(n,e,t){r.hasOwnProperty(n)||nr("Replacing nonexistant public symbol"),void 0!==r[n].overloadTable&&void 0!==t?r[n].overloadTable[t]=e:(r[n]=e,r[n].argCount=t)}(n,function(r,n,e,t,a){var o=n.length;o<2&&ur("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==n[1]&&null!==e,u=!1,c=1;c<n.length;++c)if(null!==n[c]&&void 0===n[c].destructorFunction){u=!0;break}var s="void"!==n[0].name,f="",l="";for(c=0;c<o-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+X(r)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+r+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[ur,t,a,G,n[0],n[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<o-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+n[c+2].name+"\n",h.push("argType"+c),v.push(n[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<n.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==n[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+n[c].name+"\n",h.push(m+"_dtor"),v.push(n[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(r,n){if(!(r instanceof Function))throw new TypeError("new_ called with constructor type "+typeof r+" which is not a function");var e=Z(r.name||"unknownFunctionName",(function(){}));e.prototype=r.prototype;var t=new e,a=r.apply(t,n);return a instanceof Object?a:t}(Function,h).apply(null,v)}(n,a,null,o,i),e-1),[]}))},c:function(r,n,e,t,a){n=or(n),-1===a&&(a=4294967295);var o=tr(e),i=function(r){return r};if(0===t){var u=32-8*e;i=function(r){return r<<u>>>u}}var c=n.includes("unsigned");cr(r,{name:n,fromWireType:i,toWireType:function(r,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+gr(e)+'" to '+this.name);if(e<t||e>a)throw new TypeError('Passing a number "'+gr(e)+'" from JS side to C/C++ side to an argument of type "'+n+'", which is outside the valid range ['+t+", "+a+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:Ar(n,o,0!==t),destructorFunction:null})},b:function(r,n,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function a(r){var n=b,e=n[r>>=2],a=n[r+1];return new t(v,a,e)}cr(r,{name:e=or(e),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},k:function(r,n){var e="std::string"===(n=or(n));cr(r,{name:n,fromWireType:function(r){var n,t=b[r>>2];if(e)for(var a=r+4,o=0;o<=t;++o){var i=r+4+o;if(o==t||0==g[i]){var u=h(a,i-a);void 0===n?n=u:(n+=String.fromCharCode(0),n+=u),a=i+1}}else{var c=new Array(t);for(o=0;o<t;++o)c[o]=String.fromCharCode(g[r+4+o]);n=c.join("")}return Sr(r),n},toWireType:function(r,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var t="string"==typeof n;t||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||ur("Cannot pass non-string to std::string");var a=(e&&t?function(){return function(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&r.charCodeAt(++e)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n}(n)}:function(){return n.length})(),o=Pr(4+a+1);if(b[o>>2]=a,e&&t)!function(r,n,e,t){if(!(t>0))return 0;for(var a=e+t-1,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),i<=127){if(e>=a)break;n[e++]=i}else if(i<=2047){if(e+1>=a)break;n[e++]=192|i>>6,n[e++]=128|63&i}else if(i<=65535){if(e+2>=a)break;n[e++]=224|i>>12,n[e++]=128|i>>6&63,n[e++]=128|63&i}else{if(e+3>=a)break;n[e++]=240|i>>18,n[e++]=128|i>>12&63,n[e++]=128|i>>6&63,n[e++]=128|63&i}}n[e]=0}(n,g,o+4,a+1);else if(t)for(var i=0;i<a;++i){var u=n.charCodeAt(i);u>255&&(Sr(o),ur("String has UTF-16 code units that do not fit in 8 bits")),g[o+4+i]=u}else for(i=0;i<a;++i)g[o+4+i]=n[i];return null!==r&&r.push(Sr,o),o},argPackAdvance:8,readValueFromPointer:Y,destructorFunction:function(r){Sr(r)}})},g:function(r,n,e){var t,a,o,i,u;e=or(e),2===n?(t=E,a=k,i=x,o=function(){return w},u=1):4===n&&(t=W,a=P,i=S,o=function(){return b},u=2),cr(r,{name:e,fromWireType:function(r){for(var e,a=b[r>>2],i=o(),c=r+4,s=0;s<=a;++s){var f=r+4+s*n;if(s==a||0==i[f>>u]){var l=t(c,f-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=f+n}}return Sr(r),e},toWireType:function(r,t){"string"!=typeof t&&ur("Cannot pass non-string to C++ string type "+e);var o=i(t),c=Pr(4+o+n);return b[c>>2]=o>>u,a(t,c+4,o+n),null!==r&&r.push(Sr,c),c},argPackAdvance:8,readValueFromPointer:Y,destructorFunction:function(r){Sr(r)}})},m:function(r,n,e,t,a,o){z[r]={name:or(n),rawConstructor:_r(e,t),rawDestructor:_r(a,o),fields:[]}},a:function(r,n,e,t,a,o,i,u,c,s){z[r].fields.push({fieldName:or(n),getterReturnType:e,getter:_r(t,a),getterContext:o,setterArgumentType:i,setter:_r(u,c),setterContext:s})},t:function(r,n){cr(r,{isVoid:!0,name:n=or(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(r,n){}})},f:lr,v:function(r){return 0===r?dr(Cr()):(r=void 0===(e=Tr[n=r])?or(n):e,dr(Cr()[r]));var n,e},u:function(r){r>4&&(fr[r].refcount+=1)},o:function(n,e,t,a){n=function(r){return r||ur("Cannot use deleted val. handle = "+r),fr[r].value}(n);var o=Er[e];return o||(o=function(n){for(var e="",t=0;t<n;++t)e+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+n+"(constructor, argTypes, args) {\n";for(t=0;t<n;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(mr,r,dr)}(e),Er[e]=o),o(n,t,a)},i:function(){H()},q:function(r,n,e){g.copyWithin(r,n,n+e)},e:function(r){var n,e=g.length,t=2147483648;if((r>>>=0)>t)return!1;for(var a=1;a<=4;a*=2){var o=e*(1+.2/a);if(o=Math.min(o,r+100663296),kr(Math.min(t,((n=Math.max(r,o))%65536>0&&(n+=65536-n%65536),n))))return!0}return!1}},Pr=(function(){var n={a:Wr};function t(n,e){var t,a=n.exports;r.asm=a,F((f=r.asm.x).buffer),R=r.asm.D,t=r.asm.y,M.unshift(t),function(n){if(D--,r.monitorRunDependencies&&r.monitorRunDependencies(D),0==D&&(null!==U&&(clearInterval(U),U=null),B)){var e=B;B=null,e()}}()}function a(r){t(r.instance)}function o(r){return(s||"function"!=typeof fetch?Promise.resolve().then((function(){return N(q)})):fetch(q,{credentials:"same-origin"}).then((function(r){if(!r.ok)throw"failed to load wasm binary file at '"+q+"'";return r.arrayBuffer()})).catch((function(){return N(q)}))).then((function(r){return WebAssembly.instantiate(r,n)})).then(r,(function(r){l("failed to asynchronously prepare wasm: "+r),H(r)}))}if(D++,r.monitorRunDependencies&&r.monitorRunDependencies(D),r.instantiateWasm)try{return r.instantiateWasm(n,t)}catch(r){return l("Module.instantiateWasm callback failed with error: "+r),!1}(s||"function"!=typeof WebAssembly.instantiateStreaming||L(q)||"function"!=typeof fetch?o(a):fetch(q,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,n).then(a,(function(r){return l("wasm streaming compile failed: "+r),l("falling back to ArrayBuffer instantiation"),o(a)}))}))).catch(e)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.y).apply(null,arguments)},r._malloc=function(){return(Pr=r._malloc=r.asm.z).apply(null,arguments)}),Sr=r._free=function(){return(Sr=r._free=r.asm.A).apply(null,arguments)},Fr=r.___getTypeName=function(){return(Fr=r.___getTypeName=r.asm.B).apply(null,arguments)};function Rr(e){function t(){xr||(xr=!0,r.calledRun=!0,d||(V(M),n(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)n=r.postRun.shift(),O.unshift(n);var n;V(O)}()))}e=e||u,D>0||(function(){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)n=r.preRun.shift(),j.unshift(n);var n;V(j)}(),D>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),t()}),1)):t()))}if(r.___embind_register_native_and_builtin_types=function(){return(r.___embind_register_native_and_builtin_types=r.asm.C).apply(null,arguments)},B=function r(){xr||Rr(),xr||(B=r)},r.run=Rr,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return Rr(),r.ready};let zr;const Gr=(r,n)=>async function(r,n){zr||(zr=async function(){return await dr()?fr(Nr):fr(Vr)}());const e=(await zr).encode(r.data,r.width,r.height,n);if(!e)throw new Error("Encoding error.");return e.buffer}(r,n),Yr=function(r){function n(){return A.buffer!=E&&G(A.buffer),k}function e(){return A.buffer!=E&&G(A.buffer),x}function t(){return A.buffer!=E&&G(A.buffer),W}function o(){return A.buffer!=E&&G(A.buffer),P}function i(){return A.buffer!=E&&G(A.buffer),S}function u(){return A.buffer!=E&&G(A.buffer),F}function c(){return A.buffer!=E&&G(A.buffer),I}var s,f;(r=void 0!==(r=r||{})?r:{}).ready=new Promise((function(r,n){s=r,f=n}));var l,d={};for(l in r)r.hasOwnProperty(l)&&(d[l]=r[l]);var p,h=[],v=function(r,n){throw n},m=r.ENVIRONMENT_IS_PTHREAD||!1,g="";function y(n){return r.locateFile?r.locateFile(n,g):g+n}g=self.location.href,g=0!==(g="file:///D:/altri/squoosh-web/squoosh-browser/codecs/wp2/enc/wp2_enc_mt_simd.js").indexOf("blob:")?g.substr(0,g.lastIndexOf("/")+1):"",p=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)};var w,_=r.print||console.log.bind(console),b=r.printErr||console.warn.bind(console);for(l in d)d.hasOwnProperty(l)&&(r[l]=d[l]);d=null,r.arguments&&(h=r.arguments),r.thisProgram&&r.thisProgram,r.quit&&(v=r.quit),Atomics.load,Atomics.store,Atomics.compareExchange,r.wasmBinary&&(w=r.wasmBinary);var A,T,C=r.noExitRuntime||!0;"object"!=typeof WebAssembly&&tr("no native wasm support detected");var E,k,x,W,P,S,F,R,I,j=!1;function M(r,n){r||tr("Assertion failed: "+n)}function O(r,n,e){for(var t=n+e,a="";!(n>=t);){var o=r[n++];if(!o)return a;if(128&o){var i=63&r[n++];if(192!=(224&o)){var u=63&r[n++];if((o=224==(240&o)?(15&o)<<12|i<<6|u:(7&o)<<18|i<<12|u<<6|63&r[n++])<65536)a+=String.fromCharCode(o);else{var c=o-65536;a+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else a+=String.fromCharCode((31&o)<<6|i)}else a+=String.fromCharCode(o)}return a}function D(r,n){return r?O(e(),r,n):""}function U(r,n,t){return function(r,n,e,t){if(!(t>0))return 0;for(var a=e,o=e+t-1,i=0;i<r.length;++i){var u=r.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&r.charCodeAt(++i)),u<=127){if(e>=o)break;n[e++]=u}else if(u<=2047){if(e+1>=o)break;n[e++]=192|u>>6,n[e++]=128|63&u}else if(u<=65535){if(e+2>=o)break;n[e++]=224|u>>12,n[e++]=128|u>>6&63,n[e++]=128|63&u}else{if(e+3>=o)break;n[e++]=240|u>>18,n[e++]=128|u>>12&63,n[e++]=128|u>>6&63,n[e++]=128|63&u}}return n[e]=0,e-a}(r,e(),n,t)}function B(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&r.charCodeAt(++e)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n}function H(r,n){for(var e="",a=0;!(a>=n/2);++a){var o=t()[r+2*a>>1];if(0==o)break;e+=String.fromCharCode(o)}return e}function L(r,n,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var a=n,o=(e-=2)<2*r.length?e/2:r.length,i=0;i<o;++i){var u=r.charCodeAt(i);t()[n>>1]=u,n+=2}return t()[n>>1]=0,n-a}function q(r){return 2*r.length}function N(r,n){for(var e=0,t="";!(e>=n/4);){var a=i()[r+4*e>>2];if(0==a)break;if(++e,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function V(r,n,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=n,a=t+e-4,o=0;o<r.length;++o){var u=r.charCodeAt(o);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&r.charCodeAt(++o)),i()[n>>2]=u,(n+=4)+4>a)break}return i()[n>>2]=0,n-t}function z(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&++e,n+=4}return n}function G(n){E=n,r.HEAP8=k=new Int8Array(n),r.HEAP16=W=new Int16Array(n),r.HEAP32=S=new Int32Array(n),r.HEAPU8=x=new Uint8Array(n),r.HEAPU16=P=new Uint16Array(n),r.HEAPU32=F=new Uint32Array(n),r.HEAPF32=R=new Float32Array(n),r.HEAPF64=I=new Float64Array(n)}m&&(E=r.buffer);var Y,Q=r.INITIAL_MEMORY||16777216;if(m)A=r.wasmMemory,E=r.buffer;else if(r.wasmMemory)A=r.wasmMemory;else if(!((A=new WebAssembly.Memory({initial:Q/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw b("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");A&&(E=A.buffer),Q=E.byteLength,G(E);var J=[],$=[],X=[],Z=[];function K(){m||cr($)}var rr=0,nr=null,er=null;function tr(n){r.onAbort&&r.onAbort(n),m&&console.error("Pthread aborting at "+(new Error).stack),b(n+=""),j=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var e=new WebAssembly.RuntimeError(n);throw f(e),e}function ar(r){return r.startsWith("data:application/octet-stream;base64,")}if(r.preloadedImages={},r.preloadedAudios={},r.locateFile)ar(or="wp2_enc_mt_simd.wasm")||(or=y(or));else var or=new URL(a(137),a.b).toString();function ir(r){try{if(r==or&&w)return new Uint8Array(w);if(p)return p(r);throw"both async and sync fetching of the wasm failed"}catch(r){tr(r)}}var ur={112528:function(){throw"Canceled!"},112546:function(r,n){setTimeout((function(){An(r,n)}),0)}};function cr(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?Y.get(t)():Y.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(r)}}function sr(r,e){if(r<=0||r>n().length||!0&r||e<0)return-28;if(0==e)return 0;e>=2147483647&&(e=1/0);var t=Atomics.load(i(),Dn>>2),a=0;if(t==r&&Atomics.compareExchange(i(),Dn>>2,t,0)==t&&(a=1,--e<=0))return 1;var o=Atomics.notify(i(),r>>2,e);if(o>=0)return o+a;throw"Atomics.notify returned an unexpected value "+o}function fr(r){if(m)throw"Internal Error! cleanupThread() can only ever be called from main application thread!";if(!r)throw"Internal Error! Null pthread_ptr in cleanupThread!";var n=dr.pthreads[r];if(n){i()[r+12>>2]=0;var e=n.worker;dr.returnWorkerToPool(e)}}r._emscripten_futex_wake=sr;var lr,dr={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],initMainThreadBlock:function(){for(var r=navigator.hardwareConcurrency,n=0;n<r;++n)dr.allocateUnusedWorker()},initRuntime:function(){for(var r=yn(228),n=0;n<57;++n)u()[r/4+n]=0;i()[r+12>>2]=r;var e=r+152;i()[e>>2]=e;var t=yn(512);for(n=0;n<128;++n)u()[t/4+n]=0;Atomics.store(u(),r+100>>2,t),Atomics.store(u(),r+40>>2,r),xn(r,!1,1),_n(r)},initWorker:function(){},pthreads:{},threadExitHandlers:[],runExitHandlers:function(){for(;dr.threadExitHandlers.length>0;)dr.threadExitHandlers.pop()();m&&Pn()&&Sn()},runExitHandlersAndDeinitThread:function(r,n){Atomics.store(u(),r+56>>2,1),Atomics.store(u(),r+60>>2,0),dr.runExitHandlers(),Atomics.store(u(),r+4>>2,n),Atomics.store(u(),r+0>>2,1),sr(r+0,2147483647),xn(0,0,0)},setExitStatus:function(r){},threadExit:function(r){var n=Pn();n&&(dr.runExitHandlersAndDeinitThread(n,r),m&&postMessage({cmd:"exit"}))},threadCancel:function(){dr.runExitHandlersAndDeinitThread(Pn(),-1),postMessage({cmd:"cancelDone"})},terminateAllThreads:function(){for(var r in dr.pthreads)(t=dr.pthreads[r])&&t.worker&&dr.returnWorkerToPool(t.worker);dr.pthreads={};for(var n=0;n<dr.unusedWorkers.length;++n)(e=dr.unusedWorkers[n]).terminate();for(dr.unusedWorkers=[],n=0;n<dr.runningWorkers.length;++n){var e,t=(e=dr.runningWorkers[n]).pthread;dr.freeThreadData(t),e.terminate()}dr.runningWorkers=[]},freeThreadData:function(r){if(r){if(r.threadInfoStruct){var n=i()[r.threadInfoStruct+100>>2];i()[r.threadInfoStruct+100>>2]=0,gn(n),gn(r.threadInfoStruct)}r.threadInfoStruct=0,r.allocatedOwnStack&&r.stackBase&&gn(r.stackBase),r.stackBase=0,r.worker&&(r.worker.pthread=null)}},returnWorkerToPool:function(r){dr.runWithoutMainThreadQueuedCalls((function(){delete dr.pthreads[r.pthread.threadInfoStruct],dr.unusedWorkers.push(r),dr.runningWorkers.splice(dr.runningWorkers.indexOf(r),1),dr.freeThreadData(r.pthread),r.pthread=void 0}))},runWithoutMainThreadQueuedCalls:function(r){i()[On>>2]=0;try{r()}finally{i()[On>>2]=1}},receiveObjectTransfer:function(r){},threadInit:function(){for(var r in dr.tlsInitFunctions)dr.tlsInitFunctions[r]()},loadWasmModuleToWorker:function(n,e){n.onmessage=function(t){var a=t.data,o=a.cmd;if(n.pthread&&(dr.currentProxiedOperationCallerThread=n.pthread.threadInfoStruct),a.targetThread&&a.targetThread!=Pn()){var c=dr.pthreads[a.targetThread];return c?c.worker.postMessage(t.data,a.transferList):console.error('Internal error! Worker sent a message "'+o+'" to target pthread '+a.targetThread+", but that thread no longer exists!"),void(dr.currentProxiedOperationCallerThread=void 0)}if("processQueuedMainThreadWork"===o)Cn();else if("spawnThread"===o)dn(t.data);else if("cleanupThread"===o)fr(a.thread);else if("killThread"===o)!function(r){if(m)throw"Internal Error! killThread() can only ever be called from main application thread!";if(!r)throw"Internal Error! Null pthread_ptr in killThread!";i()[r+12>>2]=0;var n=dr.pthreads[r];n.worker.terminate(),dr.freeThreadData(n),dr.runningWorkers.splice(dr.runningWorkers.indexOf(n.worker),1),n.worker.pthread=void 0}(a.thread);else if("cancelThread"===o)!function(r){if(m)throw"Internal Error! cancelThread() can only ever be called from main application thread!";if(!r)throw"Internal Error! Null pthread_ptr in cancelThread!";dr.pthreads[r].worker.postMessage({cmd:"cancel"})}(a.thread);else if("loaded"===o)n.loaded=!0,e&&e(n),n.runPthread&&(n.runPthread(),delete n.runPthread);else if("print"===o)_("Thread "+a.threadId+": "+a.text);else if("printErr"===o)b("Thread "+a.threadId+": "+a.text);else if("alert"===o)alert("Thread "+a.threadId+": "+a.text);else if("exit"===o)n.pthread&&Atomics.load(u(),n.pthread.threadInfoStruct+64>>2)&&dr.returnWorkerToPool(n);else if("exitProcess"===o)try{!function(n,e){if(m)throw postMessage({cmd:"exitProcess",returnCode:n}),new Un(n);pr()||(dr.terminateAllThreads(),r.onExit&&r.onExit(n),j=!0),v(n,new Un(n))}(a.returnCode)}catch(t){if(t instanceof Un)return;throw t}else"cancelDone"===o?dr.returnWorkerToPool(n):"objectTransfer"===o?dr.receiveObjectTransfer(t.data):"setimmediate"===t.data.target?n.postMessage(t.data):b("worker sent an unknown command "+o);dr.currentProxiedOperationCallerThread=void 0},n.onerror=function(r){b("pthread sent an error! "+r.filename+":"+r.lineno+": "+r.message)},n.postMessage({cmd:"load",urlOrBlob:r.mainScriptUrlOrBlob,wasmMemory:A,wasmModule:T})},allocateUnusedWorker:function(){if(r.locateFile){var n=y("wp2_enc_mt_simd.worker.js");dr.unusedWorkers.push(new Worker(n))}else dr.unusedWorkers.push(new Worker(new URL(a.p+a.u(332),a.b)))},getNewWorker:function(){return 0==dr.unusedWorkers.length&&(dr.allocateUnusedWorker(),dr.loadWasmModuleToWorker(dr.unusedWorkers[0])),dr.unusedWorkers.pop()},busySpinWait:function(r){for(var n=performance.now()+r;performance.now()<n;);}};function pr(){return C||!1}function hr(r){this.excPtr=r,this.ptr=r-16,this.set_type=function(r){i()[this.ptr+8>>2]=r},this.get_type=function(){return i()[this.ptr+8>>2]},this.set_destructor=function(r){i()[this.ptr+0>>2]=r},this.get_destructor=function(){return i()[this.ptr+0>>2]},this.set_refcount=function(r){i()[this.ptr+4>>2]=r},this.set_caught=function(r){r=r?1:0,n()[this.ptr+12>>0]=r},this.get_caught=function(){return 0!=n()[this.ptr+12>>0]},this.set_rethrown=function(r){r=r?1:0,n()[this.ptr+13>>0]=r},this.get_rethrown=function(){return 0!=n()[this.ptr+13>>0]},this.init=function(r,n){this.set_type(r),this.set_destructor(n),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){Atomics.add(i(),this.ptr+4>>2,1)},this.release_ref=function(){return 1===Atomics.sub(i(),this.ptr+4>>2,1)}}r.establishStackSpace=function(r,n){jn(r,n),Rn(r)},r.invokeEntryPoint=function(r,n){return Y.get(r)(n)},r.keepRuntimeAlive=pr,lr=m?function(){return performance.now()-r.__performance_now_clock_drift}:function(){return performance.now()};var vr={};function mr(r){for(;r.length;){var n=r.pop();r.pop()(n)}}function gr(r){return this.fromWireType(u()[r>>2])}var yr={},wr={},_r={};function br(r){if(void 0===r)return"_unknown";var n=(r=r.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return n>=48&&n<=57?"_"+r:r}function Ar(r,n){return r=br(r),new Function("body","return function "+r+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(n)}function Tr(r,n){var e=Ar(n,(function(r){this.name=n,this.message=r;var e=new Error(r).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var Cr=void 0;function Er(r){throw new Cr(r)}function kr(r,n,e){function t(n){var t=e(n);t.length!==r.length&&Er("Mismatched type converter count");for(var a=0;a<r.length;++a)Rr(r[a],t[a])}r.forEach((function(r){_r[r]=n}));var a=new Array(n.length),o=[],i=0;n.forEach((function(r,n){wr.hasOwnProperty(r)?a[n]=wr[r]:(o.push(r),yr.hasOwnProperty(r)||(yr[r]=[]),yr[r].push((function(){a[n]=wr[r],++i===o.length&&t(a)})))})),0===o.length&&t(a)}function xr(r){switch(r){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+r)}}var Wr=void 0;function Pr(r){for(var n="",t=r;e()[t];)n+=Wr[e()[t++]];return n}var Sr=void 0;function Fr(r){throw new Sr(r)}function Rr(r,n,e){if(e=e||{},!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=n.name;if(r||Fr('type "'+t+'" must have a positive integer typeid pointer'),wr.hasOwnProperty(r)){if(e.ignoreDuplicateRegistrations)return;Fr("Cannot register type '"+t+"' twice")}if(wr[r]=n,delete _r[r],yr.hasOwnProperty(r)){var a=yr[r];delete yr[r],a.forEach((function(r){r()}))}}var Ir=[],jr=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Mr(r){r>4&&0==--jr[r].refcount&&(jr[r]=void 0,Ir.push(r))}function Or(r){switch(r){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=Ir.length?Ir.pop():jr.length;return jr[n]={refcount:1,value:r},n}}function Dr(r){if(null===r)return"null";var n=typeof r;return"object"===n||"array"===n||"function"===n?r.toString():""+r}function Ur(r,n){switch(n){case 2:return function(r){return this.fromWireType((A.buffer!=E&&G(A.buffer),R)[r>>2])};case 3:return function(r){return this.fromWireType(c()[r>>3])};default:throw new TypeError("Unknown float type: "+r)}}function Br(n,e,t){return n.includes("j")?function(n,e,t){var a=r["dynCall_"+n];return t&&t.length?a.apply(null,[e].concat(t)):a.call(null,e)}(n,e,t):Y.get(e).apply(null,t)}function Hr(r,n){var e,t,a,o=(r=Pr(r)).includes("j")?(e=r,t=n,a=[],function(){a.length=arguments.length;for(var r=0;r<arguments.length;r++)a[r]=arguments[r];return Br(e,t,a)}):Y.get(n);return"function"!=typeof o&&Fr("unknown function pointer with signature "+r+": "+n),o}var Lr=void 0;function qr(r){var n=wn(r),e=Pr(n);return gn(n),e}function Nr(r,a,c){switch(a){case 0:return c?function(r){return n()[r]}:function(r){return e()[r]};case 1:return c?function(r){return t()[r>>1]}:function(r){return o()[r>>1]};case 2:return c?function(r){return i()[r>>2]}:function(r){return u()[r>>2]};default:throw new TypeError("Unknown integer type: "+r)}}var Vr={};function zr(){return"object"==typeof globalThis?globalThis:Function("return this")()}function Gr(r,n){var e=wr[r];return void 0===e&&Fr(n+" has unknown type "+qr(r)),e}var Yr={},Qr=[];function Jr(r,e,t){if(r<=0||r>n().length||!0&r)return-28;var a=Atomics.wait(i(),r>>2,e,t);if("timed-out"===a)return-73;if("not-equal"===a)return-6;if("ok"===a)return 0;throw"Atomics.wait returned an unexpected value "+a}function $r(r,n){for(var e=arguments.length-2,t=Fn(),a=e,o=In(8*a),i=o>>3,u=0;u<e;u++){var s=arguments[2+u];c()[i+u]=s}var f=En(r,a,o,n);return Rn(t),f}var Xr=[];function Zr(r){try{return A.grow(r-E.byteLength+65535>>>16),G(A.buffer),1}catch(r){}}var Kr={inEventHandler:0,removeAllEventListeners:function(){for(var r=Kr.eventHandlers.length-1;r>=0;--r)Kr._removeHandler(r);Kr.eventHandlers=[],Kr.deferredCalls=[]},registerRemoveEventListeners:function(){Kr.removeEventListenersRegistered||(X.push(Kr.removeAllEventListeners),Kr.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(r,n,e){function t(r,n){if(r.length!=n.length)return!1;for(var e in r)if(r[e]!=n[e])return!1;return!0}for(var a in Kr.deferredCalls){var o=Kr.deferredCalls[a];if(o.targetFunction==r&&t(o.argsList,e))return}Kr.deferredCalls.push({targetFunction:r,precedence:n,argsList:e}),Kr.deferredCalls.sort((function(r,n){return r.precedence<n.precedence}))},removeDeferredCalls:function(r){for(var n=0;n<Kr.deferredCalls.length;++n)Kr.deferredCalls[n].targetFunction==r&&(Kr.deferredCalls.splice(n,1),--n)},canPerformEventHandlerRequests:function(){return Kr.inEventHandler&&Kr.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(Kr.canPerformEventHandlerRequests())for(var r=0;r<Kr.deferredCalls.length;++r){var n=Kr.deferredCalls[r];Kr.deferredCalls.splice(r,1),--r,n.targetFunction.apply(null,n.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:function(r,n){for(var e=0;e<Kr.eventHandlers.length;++e)Kr.eventHandlers[e].target!=r||n&&n!=Kr.eventHandlers[e].eventTypeString||Kr._removeHandler(e--)},_removeHandler:function(r){var n=Kr.eventHandlers[r];n.target.removeEventListener(n.eventTypeString,n.eventListenerFunc,n.useCapture),Kr.eventHandlers.splice(r,1)},registerOrRemoveHandler:function(r){var n=function(n){++Kr.inEventHandler,Kr.currentEventHandler=r,Kr.runDeferredCalls(),r.handlerFunc(n),Kr.runDeferredCalls(),--Kr.inEventHandler};if(r.callbackfunc)r.eventListenerFunc=n,r.target.addEventListener(r.eventTypeString,n,r.useCapture),Kr.eventHandlers.push(r),Kr.registerRemoveEventListeners();else for(var e=0;e<Kr.eventHandlers.length;++e)Kr.eventHandlers[e].target==r.target&&Kr.eventHandlers[e].eventTypeString==r.eventTypeString&&Kr._removeHandler(e--)},queueEventHandlerOnThread_iiii:function(r,n,e,t,a){var o=Fn(),u=In(12);i()[u>>2]=e,i()[u+4>>2]=t,i()[u+8>>2]=a,kn(0,r,637534208,n,t,u),Rn(o)},getTargetThreadForEventCallback:function(r){switch(r){case 1:return 0;case 2:return dr.currentProxiedOperationCallerThread;default:return r}},getNodeNameForTarget:function(r){return r?r==window?"#window":r==screen?"#screen":r&&r.nodeName?r.nodeName:"":""},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}},rn=[0,"undefined"!=typeof document?document:0,"undefined"!=typeof window?window:0];function nn(r){return function(r){var n;return r=(n=r)>2?D(n):n,rn[r]||("undefined"!=typeof document?document.querySelector(r):void 0)}(r)}function en(r,n,e){var t=nn(r);if(!t)return-4;if(t.canvasSharedPtr&&(i()[t.canvasSharedPtr>>2]=n,i()[t.canvasSharedPtr+4>>2]=e),!t.offscreenCanvas&&t.controlTransferredOffscreen)return t.canvasSharedPtr?(function(r,n,e,t){!function(r,n,e,t){var a,o,u,c=Fn(),s=In(12),f=0;n&&(o=B(a=n)+1,U(a,u=yn(o),o),f=u),i()[s>>2]=f,i()[s+4>>2]=e,i()[s+8>>2]=t,kn(0,r,657457152,0,f,s),Rn(c)}(r,n=n?D(n):"",e,t)}(i()[t.canvasSharedPtr+8>>2],r,n,e),1):-4;t.offscreenCanvas&&(t=t.offscreenCanvas);var a=!1;if(t.GLctxObject&&t.GLctxObject.GLctx){var o=t.GLctxObject.GLctx.getParameter(2978);a=0===o[0]&&0===o[1]&&o[2]===t.width&&o[3]===t.height}return t.width=n,t.height=e,a&&t.GLctxObject.GLctx.viewport(0,0,n,e),0}function tn(r,n,e){return m?$r(1,1,r,n,e):en(r,n,e)}var an,on={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:{},offscreenCanvases:{},queries:[],stringCache:{},unpackAlignment:4,recordError:function(r){on.lastError||(on.lastError=r)},getNewId:function(r){for(var n=on.counter++,e=r.length;e<n;e++)r[e]=null;return n},getSource:function(r,n,e,t){for(var a="",o=0;o<n;++o){var u=t?i()[t+4*o>>2]:-1;a+=D(i()[e+4*o>>2],u<0?void 0:u)}return a},createContext:function(r,n){r.getContextSafariWebGL2Fixed||(r.getContextSafariWebGL2Fixed=r.getContext,r.getContext=function(n,e){var t=r.getContextSafariWebGL2Fixed(n,e);return"webgl"==n==t instanceof WebGLRenderingContext?t:null});var e=r.getContext("webgl",n);return e?on.registerContext(e,n):0},registerContext:function(r,n){var e=yn(8);i()[e+4>>2]=Pn();var t={handle:e,attributes:n,version:n.majorVersion,GLctx:r};return r.canvas&&(r.canvas.GLctxObject=t),on.contexts[e]=t,(void 0===n.enableExtensionsByDefault||n.enableExtensionsByDefault)&&on.initExtensions(t),e},makeContextCurrent:function(n){return on.currentContext=on.contexts[n],r.ctx=an=on.currentContext&&on.currentContext.GLctx,!(n&&!an)},getContext:function(r){return on.contexts[r]},deleteContext:function(r){on.currentContext===on.contexts[r]&&(on.currentContext=null),"object"==typeof Kr&&Kr.removeAllHandlersOnTarget(on.contexts[r].GLctx.canvas),on.contexts[r]&&on.contexts[r].GLctx.canvas&&(on.contexts[r].GLctx.canvas.GLctxObject=void 0),gn(on.contexts[r].handle),on.contexts[r]=null},initExtensions:function(r){if(r||(r=on.currentContext),!r.initExtensionsDone){r.initExtensionsDone=!0;var n,e=r.GLctx;!function(r){var n=r.getExtension("ANGLE_instanced_arrays");n&&(r.vertexAttribDivisor=function(r,e){n.vertexAttribDivisorANGLE(r,e)},r.drawArraysInstanced=function(r,e,t,a){n.drawArraysInstancedANGLE(r,e,t,a)},r.drawElementsInstanced=function(r,e,t,a,o){n.drawElementsInstancedANGLE(r,e,t,a,o)})}(e),function(r){var n=r.getExtension("OES_vertex_array_object");n&&(r.createVertexArray=function(){return n.createVertexArrayOES()},r.deleteVertexArray=function(r){n.deleteVertexArrayOES(r)},r.bindVertexArray=function(r){n.bindVertexArrayOES(r)},r.isVertexArray=function(r){return n.isVertexArrayOES(r)})}(e),function(r){var n=r.getExtension("WEBGL_draw_buffers");n&&(r.drawBuffers=function(r,e){n.drawBuffersWEBGL(r,e)})}(e),e.disjointTimerQueryExt=e.getExtension("EXT_disjoint_timer_query"),(n=e).multiDrawWebgl=n.getExtension("WEBGL_multi_draw"),(e.getSupportedExtensions()||[]).forEach((function(r){r.includes("lose_context")||r.includes("debug")||e.getExtension(r)}))}}},un=["default","low-power","high-performance"],cn={mappings:{},buffers:[null,[],[]],printChar:function(r,n){var e=cn.buffers[r];0===n||10===n?((1===r?_:b)(O(e,0)),e.length=0):e.push(n)},varargs:void 0,get:function(){return cn.varargs+=4,i()[cn.varargs-4>>2]},getStr:function(r){return D(r)},get64:function(r,n){return r}};function sn(r){return m?$r(2,1,r):0}function fn(r,n,e,t,a){if(m)return $r(3,1,r,n,e,t,a)}function ln(r,n,t,a){if(m)return $r(4,1,r,n,t,a);for(var o=0,u=0;u<t;u++){for(var c=i()[n+8*u>>2],s=i()[n+(8*u+4)>>2],f=0;f<s;f++)cn.printChar(r,e()[c+f]);o+=s}return i()[a>>2]=o,0}function dn(r){if(m)throw"Internal Error! spawnThread() can only ever be called from main application thread!";var n=dr.getNewWorker();if(!n)return 6;if(void 0!==n.pthread)throw"Internal error!";if(!r.pthread_ptr)throw"Internal error, no pthread ptr!";dr.runningWorkers.push(n);for(var e=yn(512),t=0;t<128;++t)i()[e+4*t>>2]=0;var a=r.stackBase+r.stackSize,o=dr.pthreads[r.pthread_ptr]={worker:n,stackBase:r.stackBase,stackSize:r.stackSize,allocatedOwnStack:r.allocatedOwnStack,threadInfoStruct:r.pthread_ptr},c=o.threadInfoStruct>>2;Atomics.store(u(),c+16,r.detached),Atomics.store(u(),c+25,e),Atomics.store(u(),c+10,o.threadInfoStruct),Atomics.store(u(),c+20,r.stackSize),Atomics.store(u(),c+19,a),Atomics.store(u(),c+26,r.stackSize),Atomics.store(u(),c+28,a),Atomics.store(u(),c+29,r.detached);var s=Wn()+40;Atomics.store(u(),c+43,s),n.pthread=o;var f={cmd:"run",start_routine:r.startRoutine,arg:r.arg,threadInfoStruct:r.pthread_ptr,stackBase:r.stackBase,stackSize:r.stackSize};return n.runPthread=function(){f.time=performance.now(),n.postMessage(f,r.transferList)},n.loaded&&(n.runPthread(),delete n.runPthread),0}function pn(){if(m){var r=Pn();if(r&&!Atomics.load(u(),r+56>>2)&&2==Atomics.load(u(),r+0>>2))throw"Canceled!"}}m||dr.initMainThreadBlock(),Cr=r.InternalError=Tr(Error,"InternalError"),function(){for(var r=new Array(256),n=0;n<256;++n)r[n]=String.fromCharCode(n);Wr=r}(),Sr=r.BindingError=Tr(Error,"BindingError"),r.count_emval_handles=function(){for(var r=0,n=5;n<jr.length;++n)void 0!==jr[n]&&++r;return r},r.get_first_emval=function(){for(var r=5;r<jr.length;++r)if(void 0!==jr[r])return jr[r];return null},Lr=r.UnboundTypeError=Tr(Error,"UnboundTypeError");var hn,vn=[null,tn,sn,fn,ln],mn={d:function(r,n,e,t){tr("Assertion failed: "+D(r)+", at: "+[n?D(n):"unknown filename",e,t?D(t):"unknown function"])},O:function(r){return yn(r+16)+16},s:function(r,n){return e=r,t=n,void dr.threadExitHandlers.push((function(){Y.get(e)(t)}));var e,t},N:function(r,n,e){throw new hr(r).init(n,e),r},u:function(r){var n=vr[r];delete vr[r];var e=n.rawConstructor,t=n.rawDestructor,a=n.fields;kr([r],a.map((function(r){return r.getterReturnType})).concat(a.map((function(r){return r.setterArgumentType}))),(function(r){var o={};return a.forEach((function(n,e){var t=n.fieldName,i=r[e],u=n.getter,c=n.getterContext,s=r[e+a.length],f=n.setter,l=n.setterContext;o[t]={read:function(r){return i.fromWireType(u(c,r))},write:function(r,n){var e=[];f(l,r,s.toWireType(e,n)),mr(e)}}})),[{name:n.name,fromWireType:function(r){var n={};for(var e in o)n[e]=o[e].read(r);return t(r),n},toWireType:function(r,n){for(var a in o)if(!(a in n))throw new TypeError('Missing field:  "'+a+'"');var i=e();for(a in o)o[a].write(i,n[a]);return null!==r&&r.push(t,i),i},argPackAdvance:8,readValueFromPointer:gr,destructorFunction:t}]}))},y:function(r,n,e,t,a){},L:function(r,e,a,o,u){var c=xr(a);Rr(r,{name:e=Pr(e),fromWireType:function(r){return!!r},toWireType:function(r,n){return n?o:u},argPackAdvance:8,readValueFromPointer:function(r){var o;if(1===a)o=n();else if(2===a)o=t();else{if(4!==a)throw new TypeError("Unknown boolean type size: "+e);o=i()}return this.fromWireType(o[r>>c])},destructorFunction:null})},K:function(r,n){Rr(r,{name:n=Pr(n),fromWireType:function(r){var n=jr[r].value;return Mr(r),n},toWireType:function(r,n){return Or(n)},argPackAdvance:8,readValueFromPointer:gr,destructorFunction:null})},p:function(r,n,e){var t=xr(e);Rr(r,{name:n=Pr(n),fromWireType:function(r){return r},toWireType:function(r,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+Dr(n)+'" to '+this.name);return n},argPackAdvance:8,readValueFromPointer:Ur(n,t),destructorFunction:null})},t:function(n,e,t,a,o,u){var c=function(r,n){for(var e=[],t=0;t<r;t++)e.push(i()[(n>>2)+t]);return e}(e,t);n=Pr(n),o=Hr(a,o),function(n,e,t){r.hasOwnProperty(n)?((void 0===t||void 0!==r[n].overloadTable&&void 0!==r[n].overloadTable[t])&&Fr("Cannot register public name '"+n+"' twice"),function(r,n,e){if(void 0===r[n].overloadTable){var t=r[n];r[n]=function(){return r[n].overloadTable.hasOwnProperty(arguments.length)||Fr("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+r[n].overloadTable+")!"),r[n].overloadTable[arguments.length].apply(this,arguments)},r[n].overloadTable=[],r[n].overloadTable[t.argCount]=t}}(r,n,n),r.hasOwnProperty(t)&&Fr("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),r[n].overloadTable[t]=e):(r[n]=e,void 0!==t&&(r[n].numArguments=t))}(n,(function(){!function(r,n){var e=[],t={};throw n.forEach((function r(n){t[n]||wr[n]||(_r[n]?_r[n].forEach(r):(e.push(n),t[n]=!0))})),new Lr(r+": "+e.map(qr).join([", "]))}("Cannot call "+n+" due to unbound types",c)}),e-1),kr([],c,(function(t){var a=[t[0],null].concat(t.slice(1));return function(n,e,t){r.hasOwnProperty(n)||Er("Replacing nonexistant public symbol"),void 0!==r[n].overloadTable&&void 0!==t?r[n].overloadTable[t]=e:(r[n]=e,r[n].argCount=t)}(n,function(r,n,e,t,a){var o=n.length;o<2&&Fr("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==n[1]&&null!==e,u=!1,c=1;c<n.length;++c)if(null!==n[c]&&void 0===n[c].destructorFunction){u=!0;break}var s="void"!==n[0].name,f="",l="";for(c=0;c<o-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+br(r)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+r+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[Fr,t,a,mr,n[0],n[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<o-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+n[c+2].name+"\n",h.push("argType"+c),v.push(n[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<n.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==n[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+n[c].name+"\n",h.push(m+"_dtor"),v.push(n[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(r,n){if(!(r instanceof Function))throw new TypeError("new_ called with constructor type "+typeof r+" which is not a function");var e=Ar(r.name||"unknownFunctionName",(function(){}));e.prototype=r.prototype;var t=new e,a=r.apply(t,n);return a instanceof Object?a:t}(Function,h).apply(null,v)}(n,a,null,o,u),e-1),[]}))},e:function(r,n,e,t,a){n=Pr(n),-1===a&&(a=4294967295);var o=xr(e),i=function(r){return r};if(0===t){var u=32-8*e;i=function(r){return r<<u>>>u}}var c=n.includes("unsigned");Rr(r,{name:n,fromWireType:i,toWireType:function(r,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+Dr(e)+'" to '+this.name);if(e<t||e>a)throw new TypeError('Passing a number "'+Dr(e)+'" from JS side to C/C++ side to an argument of type "'+n+'", which is outside the valid range ['+t+", "+a+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:Nr(n,o,0!==t),destructorFunction:null})},b:function(r,n,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function a(r){r>>=2;var n=u(),e=n[r],a=n[r+1];return new t(E,a,e)}Rr(r,{name:e=Pr(e),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},q:function(r,n){var t="std::string"===(n=Pr(n));Rr(r,{name:n,fromWireType:function(r){var n,a=u()[r>>2];if(t)for(var o=r+4,i=0;i<=a;++i){var c=r+4+i;if(i==a||0==e()[c]){var s=D(o,c-o);void 0===n?n=s:(n+=String.fromCharCode(0),n+=s),o=c+1}}else{var f=new Array(a);for(i=0;i<a;++i)f[i]=String.fromCharCode(e()[r+4+i]);n=f.join("")}return gn(r),n},toWireType:function(r,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var a="string"==typeof n;a||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||Fr("Cannot pass non-string to std::string");var o=(t&&a?function(){return B(n)}:function(){return n.length})(),i=yn(4+o+1);if(u()[i>>2]=o,t&&a)U(n,i+4,o+1);else if(a)for(var c=0;c<o;++c){var s=n.charCodeAt(c);s>255&&(gn(i),Fr("String has UTF-16 code units that do not fit in 8 bits")),e()[i+4+c]=s}else for(c=0;c<o;++c)e()[i+4+c]=n[c];return null!==r&&r.push(gn,i),i},argPackAdvance:8,readValueFromPointer:gr,destructorFunction:function(r){gn(r)}})},j:function(r,n,e){var t,a,i,c,s;e=Pr(e),2===n?(t=H,a=L,c=q,i=function(){return o()},s=1):4===n&&(t=N,a=V,c=z,i=function(){return u()},s=2),Rr(r,{name:e,fromWireType:function(r){for(var e,a=u()[r>>2],o=i(),c=r+4,f=0;f<=a;++f){var l=r+4+f*n;if(f==a||0==o[l>>s]){var d=t(c,l-c);void 0===e?e=d:(e+=String.fromCharCode(0),e+=d),c=l+n}}return gn(r),e},toWireType:function(r,t){"string"!=typeof t&&Fr("Cannot pass non-string to C++ string type "+e);var o=c(t),i=yn(4+o+n);return u()[i>>2]=o>>s,a(t,i+4,o+n),null!==r&&r.push(gn,i),i},argPackAdvance:8,readValueFromPointer:gr,destructorFunction:function(r){gn(r)}})},v:function(r,n,e,t,a,o){vr[r]={name:Pr(n),rawConstructor:Hr(e,t),rawDestructor:Hr(a,o),fields:[]}},c:function(r,n,e,t,a,o,i,u,c,s){vr[r].fields.push({fieldName:Pr(n),getterReturnType:e,getter:Hr(t,a),getterContext:o,setterArgumentType:i,setter:Hr(u,c),setterContext:s})},M:function(r,n){Rr(r,{isVoid:!0,name:n=Pr(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(r,n){}})},G:function(r,n){if(r==n)postMessage({cmd:"processQueuedMainThreadWork"});else if(m)postMessage({targetThread:r,cmd:"processThreadQueue"});else{var e=dr.pthreads[r],t=e&&e.worker;if(!t)return;t.postMessage({cmd:"processThreadQueue"})}return 1},m:Mr,J:function(r){return 0===r?Or(zr()):(r=void 0===(e=Vr[n=r])?Pr(n):e,Or(zr()[r]));var n,e},Q:function(r){r>4&&(jr[r].refcount+=1)},w:function(n,e,t,a){n=function(r){return r||Fr("Cannot use deleted val. handle = "+r),jr[r].value}(n);var o=Yr[e];return o||(o=function(n){for(var e="",t=0;t<n;++t)e+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+n+"(constructor, argTypes, args) {\n";for(t=0;t<n;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(Gr,r,Or)}(e),Yr[e]=o),o(n,t,a)},k:function(){tr()},o:function(r,n,t){var a=function(r,n){var t;for(Qr.length=0,n>>=2;t=e()[r++];){var a=t<105;a&&1&n&&n++,Qr.push(a?c()[n++>>1]:i()[n]),++n}return Qr}(n,t);return ur[r].apply(null,a)},C:function(){},n:function(r,n){},f:Jr,g:sr,h:lr,A:function(r,n,t){e().copyWithin(r,n,n+t)},R:function(){return navigator.hardwareConcurrency},D:function(r,n,e){Xr.length=n;for(var t=e>>3,a=0;a<n;a++)Xr[a]=c()[t+a];return(r<0?ur[-r-1]:vn[r]).apply(null,Xr)},B:function(r){var n=e().length;if((r>>>=0)<=n)return!1;var t,a=2147483648;if(r>a)return!1;for(var o=1;o<=4;o*=2){var i=n*(1+.2/o);if(i=Math.min(i,r+100663296),Zr(Math.min(a,((t=Math.max(r,i))%65536>0&&(t+=65536-t%65536),t))))return!0}return!1},E:function(r,n,e){return nn(r)?en(r,n,e):tn(r,n,e)},l:function(r){},F:function(r,n){return e=r,t=n>>2,a=i()[t+6],o={alpha:!!i()[t+0],depth:!!i()[t+1],stencil:!!i()[t+2],antialias:!!i()[t+3],premultipliedAlpha:!!i()[t+4],preserveDrawingBuffer:!!i()[t+5],powerPreference:un[a],failIfMajorPerformanceCaveat:!!i()[t+7],majorVersion:i()[t+8],minorVersion:i()[t+9],enableExtensionsByDefault:i()[t+10],explicitSwapControl:i()[t+11],proxyContextToMainThread:i()[t+12],renderViaOffscreenBackBuffer:i()[t+13]},(u=nn(e))?o.explicitSwapControl?0:on.createContext(u,o):0;var e,t,a,o,u},I:sn,x:fn,H:ln,z:function(){dr.initRuntime()},a:A||r.wasmMemory,r:function(r,n,e,t){if("undefined"==typeof SharedArrayBuffer)return b("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;if(!r)return b("pthread_create called with a null thread pointer!"),28;var a=[];if(m&&0===a.length)return Tn(687865856,r,n,e,t);var o=0,c=0,s=0;n&&-1!=n?(o=i()[n>>2],o+=81920,c=i()[n+8>>2],s=0!==i()[n+12>>2]):o=2097152;var f=0==c;f?c=Mn(16,o):M((c-=o)>0);for(var l=yn(228),d=0;d<57;++d)u()[(l>>2)+d]=0;i()[r>>2]=l,i()[l+12>>2]=l;var p=l+152;i()[p>>2]=p;var h={stackBase:c,stackSize:o,allocatedOwnStack:f,detached:s,startRoutine:e,pthread_ptr:l,arg:t,transferList:a};return m?(h.cmd="spawnThread",postMessage(h,a),0):dn(h)},P:function(r,n){return function(r,n,e){if(!r)return b("pthread_join attempted on a null thread pointer!"),71;if(m&&Pn()==r)return b("PThread "+r+" is attempting to join to itself!"),16;if(!m&&bn()==r)return b("Main thread "+r+" is attempting to join to itself!"),16;if(i()[r+12>>2]!==r)return b("pthread_join attempted on thread "+r+", which does not point to a valid thread, or does not exist anymore!"),71;if(Atomics.load(u(),r+64>>2))return b("Attempted to join thread "+r+", which was already detached!"),28;for(;;){var t=Atomics.load(u(),r+0>>2);if(1==t){var a=Atomics.load(u(),r+4>>2);return n&&(i()[n>>2]=a),Atomics.store(u(),r+64>>2,1),m?postMessage({cmd:"cleanupThread",thread:r}):fr(r),0}pn(),m||Cn(),Jr(r+0,t,m?100:1)}}(r,n)},i:function(r){}},gn=(function(){var n={a:mn};function e(n,e){var t,a=n.exports;if(r.asm=a,Y=r.asm.W,t=r.asm.S,$.unshift(t),dr.tlsInitFunctions.push(r.asm.V),T=e,!m){var o=dr.unusedWorkers.length;dr.unusedWorkers.forEach((function(n){dr.loadWasmModuleToWorker(n,(function(){--o||function(n){if(rr--,r.monitorRunDependencies&&r.monitorRunDependencies(rr),0==rr&&(null!==nr&&(clearInterval(nr),nr=null),er)){var e=er;er=null,e()}}()}))}))}}function t(r){e(r.instance,r.module)}function a(r){return(w||"function"!=typeof fetch?Promise.resolve().then((function(){return ir(or)})):fetch(or,{credentials:"same-origin"}).then((function(r){if(!r.ok)throw"failed to load wasm binary file at '"+or+"'";return r.arrayBuffer()})).catch((function(){return ir(or)}))).then((function(r){return WebAssembly.instantiate(r,n)})).then(r,(function(r){b("failed to asynchronously prepare wasm: "+r),tr(r)}))}if(m||(M(!m,"addRunDependency cannot be used in a pthread worker"),rr++,r.monitorRunDependencies&&r.monitorRunDependencies(rr)),r.instantiateWasm)try{return r.instantiateWasm(n,e)}catch(r){return b("Module.instantiateWasm callback failed with error: "+r),!1}(w||"function"!=typeof WebAssembly.instantiateStreaming||ar(or)||"function"!=typeof fetch?a(t):fetch(or,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,n).then(t,(function(r){return b("wasm streaming compile failed: "+r),b("falling back to ArrayBuffer instantiation"),a(t)}))}))).catch(f)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.S).apply(null,arguments)},r._free=function(){return(gn=r._free=r.asm.T).apply(null,arguments)}),yn=r._malloc=function(){return(yn=r._malloc=r.asm.U).apply(null,arguments)},wn=(r._emscripten_tls_init=function(){return(r._emscripten_tls_init=r.asm.V).apply(null,arguments)},r.___getTypeName=function(){return(wn=r.___getTypeName=r.asm.X).apply(null,arguments)}),_n=(r.___embind_register_native_and_builtin_types=function(){return(r.___embind_register_native_and_builtin_types=r.asm.Y).apply(null,arguments)},r._emscripten_current_thread_process_queued_calls=function(){return(r._emscripten_current_thread_process_queued_calls=r.asm.Z).apply(null,arguments)},r._emscripten_register_main_browser_thread_id=function(){return(_n=r._emscripten_register_main_browser_thread_id=r.asm._).apply(null,arguments)}),bn=r._emscripten_main_browser_thread_id=function(){return(bn=r._emscripten_main_browser_thread_id=r.asm.$).apply(null,arguments)},An=r.__emscripten_do_dispatch_to_thread=function(){return(An=r.__emscripten_do_dispatch_to_thread=r.asm.aa).apply(null,arguments)},Tn=r._emscripten_sync_run_in_main_thread_4=function(){return(Tn=r._emscripten_sync_run_in_main_thread_4=r.asm.ba).apply(null,arguments)},Cn=r._emscripten_main_thread_process_queued_calls=function(){return(Cn=r._emscripten_main_thread_process_queued_calls=r.asm.ca).apply(null,arguments)},En=r._emscripten_run_in_main_runtime_thread_js=function(){return(En=r._emscripten_run_in_main_runtime_thread_js=r.asm.da).apply(null,arguments)},kn=r.__emscripten_call_on_thread=function(){return(kn=r.__emscripten_call_on_thread=r.asm.ea).apply(null,arguments)},xn=r.__emscripten_thread_init=function(){return(xn=r.__emscripten_thread_init=r.asm.fa).apply(null,arguments)},Wn=r._emscripten_get_global_libc=function(){return(Wn=r._emscripten_get_global_libc=r.asm.ga).apply(null,arguments)},Pn=r._pthread_self=function(){return(Pn=r._pthread_self=r.asm.ha).apply(null,arguments)},Sn=r.___pthread_tsd_run_dtors=function(){return(Sn=r.___pthread_tsd_run_dtors=r.asm.ia).apply(null,arguments)},Fn=r.stackSave=function(){return(Fn=r.stackSave=r.asm.ja).apply(null,arguments)},Rn=r.stackRestore=function(){return(Rn=r.stackRestore=r.asm.ka).apply(null,arguments)},In=r.stackAlloc=function(){return(In=r.stackAlloc=r.asm.la).apply(null,arguments)},jn=r._emscripten_stack_set_limits=function(){return(jn=r._emscripten_stack_set_limits=r.asm.ma).apply(null,arguments)},Mn=r._memalign=function(){return(Mn=r._memalign=r.asm.na).apply(null,arguments)},On=(r.dynCall_jiii=function(){return(r.dynCall_jiii=r.asm.oa).apply(null,arguments)},r.dynCall_jiiiiii=function(){return(r.dynCall_jiiiiii=r.asm.pa).apply(null,arguments)},r.dynCall_jiji=function(){return(r.dynCall_jiji=r.asm.qa).apply(null,arguments)},r.__emscripten_allow_main_runtime_queued_calls=112520),Dn=r.__emscripten_main_thread_futex=123420;function Un(r){this.name="ExitStatus",this.message="Program terminated with exit("+r+")",this.status=r}function Bn(n){if(n=n||h,!(rr>0)){if(m)return s(r),K(),void postMessage({cmd:"loaded"});!function(){if(!m){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)n=r.preRun.shift(),J.unshift(n);var n;cr(J)}}(),rr>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),e()}),1)):e())}function e(){hn||(hn=!0,r.calledRun=!0,j||(K(),s(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(!m){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)n=r.postRun.shift(),Z.unshift(n);var n;cr(Z)}}()))}}if(r.PThread=dr,r.PThread=dr,r.wasmMemory=A,r.ExitStatus=Un,er=function r(){hn||Bn(),hn||(er=r)},r.run=Bn,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return m&&(C=!1,dr.initWorker()),Bn(),r.ready},Qr=function(r){function n(){return A.buffer!=E&&G(A.buffer),k}function e(){return A.buffer!=E&&G(A.buffer),x}function t(){return A.buffer!=E&&G(A.buffer),W}function o(){return A.buffer!=E&&G(A.buffer),P}function i(){return A.buffer!=E&&G(A.buffer),S}function u(){return A.buffer!=E&&G(A.buffer),F}function c(){return A.buffer!=E&&G(A.buffer),I}var s,f;(r=void 0!==(r=r||{})?r:{}).ready=new Promise((function(r,n){s=r,f=n}));var l,d={};for(l in r)r.hasOwnProperty(l)&&(d[l]=r[l]);var p,h=[],v=function(r,n){throw n},m=r.ENVIRONMENT_IS_PTHREAD||!1,g="";function y(n){return r.locateFile?r.locateFile(n,g):g+n}g=self.location.href,g=0!==(g="file:///D:/altri/squoosh-web/squoosh-browser/codecs/wp2/enc/wp2_enc_mt.js").indexOf("blob:")?g.substr(0,g.lastIndexOf("/")+1):"",p=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)};var w,_=r.print||console.log.bind(console),b=r.printErr||console.warn.bind(console);for(l in d)d.hasOwnProperty(l)&&(r[l]=d[l]);d=null,r.arguments&&(h=r.arguments),r.thisProgram&&r.thisProgram,r.quit&&(v=r.quit),Atomics.load,Atomics.store,Atomics.compareExchange,r.wasmBinary&&(w=r.wasmBinary);var A,T,C=r.noExitRuntime||!0;"object"!=typeof WebAssembly&&tr("no native wasm support detected");var E,k,x,W,P,S,F,R,I,j=!1;function M(r,n){r||tr("Assertion failed: "+n)}function O(r,n,e){for(var t=n+e,a="";!(n>=t);){var o=r[n++];if(!o)return a;if(128&o){var i=63&r[n++];if(192!=(224&o)){var u=63&r[n++];if((o=224==(240&o)?(15&o)<<12|i<<6|u:(7&o)<<18|i<<12|u<<6|63&r[n++])<65536)a+=String.fromCharCode(o);else{var c=o-65536;a+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else a+=String.fromCharCode((31&o)<<6|i)}else a+=String.fromCharCode(o)}return a}function D(r,n){return r?O(e(),r,n):""}function U(r,n,t){return function(r,n,e,t){if(!(t>0))return 0;for(var a=e,o=e+t-1,i=0;i<r.length;++i){var u=r.charCodeAt(i);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&r.charCodeAt(++i)),u<=127){if(e>=o)break;n[e++]=u}else if(u<=2047){if(e+1>=o)break;n[e++]=192|u>>6,n[e++]=128|63&u}else if(u<=65535){if(e+2>=o)break;n[e++]=224|u>>12,n[e++]=128|u>>6&63,n[e++]=128|63&u}else{if(e+3>=o)break;n[e++]=240|u>>18,n[e++]=128|u>>12&63,n[e++]=128|u>>6&63,n[e++]=128|63&u}}return n[e]=0,e-a}(r,e(),n,t)}function B(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&r.charCodeAt(++e)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n}function H(r,n){for(var e="",a=0;!(a>=n/2);++a){var o=t()[r+2*a>>1];if(0==o)break;e+=String.fromCharCode(o)}return e}function L(r,n,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var a=n,o=(e-=2)<2*r.length?e/2:r.length,i=0;i<o;++i){var u=r.charCodeAt(i);t()[n>>1]=u,n+=2}return t()[n>>1]=0,n-a}function q(r){return 2*r.length}function N(r,n){for(var e=0,t="";!(e>=n/4);){var a=i()[r+4*e>>2];if(0==a)break;if(++e,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function V(r,n,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=n,a=t+e-4,o=0;o<r.length;++o){var u=r.charCodeAt(o);if(u>=55296&&u<=57343&&(u=65536+((1023&u)<<10)|1023&r.charCodeAt(++o)),i()[n>>2]=u,(n+=4)+4>a)break}return i()[n>>2]=0,n-t}function z(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&++e,n+=4}return n}function G(n){E=n,r.HEAP8=k=new Int8Array(n),r.HEAP16=W=new Int16Array(n),r.HEAP32=S=new Int32Array(n),r.HEAPU8=x=new Uint8Array(n),r.HEAPU16=P=new Uint16Array(n),r.HEAPU32=F=new Uint32Array(n),r.HEAPF32=R=new Float32Array(n),r.HEAPF64=I=new Float64Array(n)}m&&(E=r.buffer);var Y,Q=r.INITIAL_MEMORY||16777216;if(m)A=r.wasmMemory,E=r.buffer;else if(r.wasmMemory)A=r.wasmMemory;else if(!((A=new WebAssembly.Memory({initial:Q/65536,maximum:32768,shared:!0})).buffer instanceof SharedArrayBuffer))throw b("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),Error("bad memory");A&&(E=A.buffer),Q=E.byteLength,G(E);var J=[],$=[],X=[],Z=[];function K(){m||cr($)}var rr=0,nr=null,er=null;function tr(n){r.onAbort&&r.onAbort(n),m&&console.error("Pthread aborting at "+(new Error).stack),b(n+=""),j=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var e=new WebAssembly.RuntimeError(n);throw f(e),e}function ar(r){return r.startsWith("data:application/octet-stream;base64,")}if(r.preloadedImages={},r.preloadedAudios={},r.locateFile)ar(or="wp2_enc_mt.wasm")||(or=y(or));else var or=new URL(a(719),a.b).toString();function ir(r){try{if(r==or&&w)return new Uint8Array(w);if(p)return p(r);throw"both async and sync fetching of the wasm failed"}catch(r){tr(r)}}var ur={112416:function(){throw"Canceled!"},112434:function(r,n){setTimeout((function(){An(r,n)}),0)}};function cr(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?Y.get(t)():Y.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(r)}}function sr(r,e){if(r<=0||r>n().length||!0&r||e<0)return-28;if(0==e)return 0;e>=2147483647&&(e=1/0);var t=Atomics.load(i(),Dn>>2),a=0;if(t==r&&Atomics.compareExchange(i(),Dn>>2,t,0)==t&&(a=1,--e<=0))return 1;var o=Atomics.notify(i(),r>>2,e);if(o>=0)return o+a;throw"Atomics.notify returned an unexpected value "+o}function fr(r){if(m)throw"Internal Error! cleanupThread() can only ever be called from main application thread!";if(!r)throw"Internal Error! Null pthread_ptr in cleanupThread!";var n=dr.pthreads[r];if(n){i()[r+12>>2]=0;var e=n.worker;dr.returnWorkerToPool(e)}}r._emscripten_futex_wake=sr;var lr,dr={unusedWorkers:[],runningWorkers:[],tlsInitFunctions:[],initMainThreadBlock:function(){for(var r=navigator.hardwareConcurrency,n=0;n<r;++n)dr.allocateUnusedWorker()},initRuntime:function(){for(var r=yn(228),n=0;n<57;++n)u()[r/4+n]=0;i()[r+12>>2]=r;var e=r+152;i()[e>>2]=e;var t=yn(512);for(n=0;n<128;++n)u()[t/4+n]=0;Atomics.store(u(),r+100>>2,t),Atomics.store(u(),r+40>>2,r),xn(r,!1,1),_n(r)},initWorker:function(){},pthreads:{},threadExitHandlers:[],runExitHandlers:function(){for(;dr.threadExitHandlers.length>0;)dr.threadExitHandlers.pop()();m&&Pn()&&Sn()},runExitHandlersAndDeinitThread:function(r,n){Atomics.store(u(),r+56>>2,1),Atomics.store(u(),r+60>>2,0),dr.runExitHandlers(),Atomics.store(u(),r+4>>2,n),Atomics.store(u(),r+0>>2,1),sr(r+0,2147483647),xn(0,0,0)},setExitStatus:function(r){},threadExit:function(r){var n=Pn();n&&(dr.runExitHandlersAndDeinitThread(n,r),m&&postMessage({cmd:"exit"}))},threadCancel:function(){dr.runExitHandlersAndDeinitThread(Pn(),-1),postMessage({cmd:"cancelDone"})},terminateAllThreads:function(){for(var r in dr.pthreads)(t=dr.pthreads[r])&&t.worker&&dr.returnWorkerToPool(t.worker);dr.pthreads={};for(var n=0;n<dr.unusedWorkers.length;++n)(e=dr.unusedWorkers[n]).terminate();for(dr.unusedWorkers=[],n=0;n<dr.runningWorkers.length;++n){var e,t=(e=dr.runningWorkers[n]).pthread;dr.freeThreadData(t),e.terminate()}dr.runningWorkers=[]},freeThreadData:function(r){if(r){if(r.threadInfoStruct){var n=i()[r.threadInfoStruct+100>>2];i()[r.threadInfoStruct+100>>2]=0,gn(n),gn(r.threadInfoStruct)}r.threadInfoStruct=0,r.allocatedOwnStack&&r.stackBase&&gn(r.stackBase),r.stackBase=0,r.worker&&(r.worker.pthread=null)}},returnWorkerToPool:function(r){dr.runWithoutMainThreadQueuedCalls((function(){delete dr.pthreads[r.pthread.threadInfoStruct],dr.unusedWorkers.push(r),dr.runningWorkers.splice(dr.runningWorkers.indexOf(r),1),dr.freeThreadData(r.pthread),r.pthread=void 0}))},runWithoutMainThreadQueuedCalls:function(r){i()[On>>2]=0;try{r()}finally{i()[On>>2]=1}},receiveObjectTransfer:function(r){},threadInit:function(){for(var r in dr.tlsInitFunctions)dr.tlsInitFunctions[r]()},loadWasmModuleToWorker:function(n,e){n.onmessage=function(t){var a=t.data,o=a.cmd;if(n.pthread&&(dr.currentProxiedOperationCallerThread=n.pthread.threadInfoStruct),a.targetThread&&a.targetThread!=Pn()){var c=dr.pthreads[a.targetThread];return c?c.worker.postMessage(t.data,a.transferList):console.error('Internal error! Worker sent a message "'+o+'" to target pthread '+a.targetThread+", but that thread no longer exists!"),void(dr.currentProxiedOperationCallerThread=void 0)}if("processQueuedMainThreadWork"===o)Cn();else if("spawnThread"===o)dn(t.data);else if("cleanupThread"===o)fr(a.thread);else if("killThread"===o)!function(r){if(m)throw"Internal Error! killThread() can only ever be called from main application thread!";if(!r)throw"Internal Error! Null pthread_ptr in killThread!";i()[r+12>>2]=0;var n=dr.pthreads[r];n.worker.terminate(),dr.freeThreadData(n),dr.runningWorkers.splice(dr.runningWorkers.indexOf(n.worker),1),n.worker.pthread=void 0}(a.thread);else if("cancelThread"===o)!function(r){if(m)throw"Internal Error! cancelThread() can only ever be called from main application thread!";if(!r)throw"Internal Error! Null pthread_ptr in cancelThread!";dr.pthreads[r].worker.postMessage({cmd:"cancel"})}(a.thread);else if("loaded"===o)n.loaded=!0,e&&e(n),n.runPthread&&(n.runPthread(),delete n.runPthread);else if("print"===o)_("Thread "+a.threadId+": "+a.text);else if("printErr"===o)b("Thread "+a.threadId+": "+a.text);else if("alert"===o)alert("Thread "+a.threadId+": "+a.text);else if("exit"===o)n.pthread&&Atomics.load(u(),n.pthread.threadInfoStruct+64>>2)&&dr.returnWorkerToPool(n);else if("exitProcess"===o)try{!function(n,e){if(m)throw postMessage({cmd:"exitProcess",returnCode:n}),new Un(n);pr()||(dr.terminateAllThreads(),r.onExit&&r.onExit(n),j=!0),v(n,new Un(n))}(a.returnCode)}catch(t){if(t instanceof Un)return;throw t}else"cancelDone"===o?dr.returnWorkerToPool(n):"objectTransfer"===o?dr.receiveObjectTransfer(t.data):"setimmediate"===t.data.target?n.postMessage(t.data):b("worker sent an unknown command "+o);dr.currentProxiedOperationCallerThread=void 0},n.onerror=function(r){b("pthread sent an error! "+r.filename+":"+r.lineno+": "+r.message)},n.postMessage({cmd:"load",urlOrBlob:r.mainScriptUrlOrBlob,wasmMemory:A,wasmModule:T})},allocateUnusedWorker:function(){if(r.locateFile){var n=y("wp2_enc_mt.worker.js");dr.unusedWorkers.push(new Worker(n))}else dr.unusedWorkers.push(new Worker(new URL(a.p+a.u(414),a.b)))},getNewWorker:function(){return 0==dr.unusedWorkers.length&&(dr.allocateUnusedWorker(),dr.loadWasmModuleToWorker(dr.unusedWorkers[0])),dr.unusedWorkers.pop()},busySpinWait:function(r){for(var n=performance.now()+r;performance.now()<n;);}};function pr(){return C||!1}function hr(r){this.excPtr=r,this.ptr=r-16,this.set_type=function(r){i()[this.ptr+8>>2]=r},this.get_type=function(){return i()[this.ptr+8>>2]},this.set_destructor=function(r){i()[this.ptr+0>>2]=r},this.get_destructor=function(){return i()[this.ptr+0>>2]},this.set_refcount=function(r){i()[this.ptr+4>>2]=r},this.set_caught=function(r){r=r?1:0,n()[this.ptr+12>>0]=r},this.get_caught=function(){return 0!=n()[this.ptr+12>>0]},this.set_rethrown=function(r){r=r?1:0,n()[this.ptr+13>>0]=r},this.get_rethrown=function(){return 0!=n()[this.ptr+13>>0]},this.init=function(r,n){this.set_type(r),this.set_destructor(n),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){Atomics.add(i(),this.ptr+4>>2,1)},this.release_ref=function(){return 1===Atomics.sub(i(),this.ptr+4>>2,1)}}r.establishStackSpace=function(r,n){jn(r,n),Rn(r)},r.invokeEntryPoint=function(r,n){return Y.get(r)(n)},r.keepRuntimeAlive=pr,lr=m?function(){return performance.now()-r.__performance_now_clock_drift}:function(){return performance.now()};var vr={};function mr(r){for(;r.length;){var n=r.pop();r.pop()(n)}}function gr(r){return this.fromWireType(u()[r>>2])}var yr={},wr={},_r={};function br(r){if(void 0===r)return"_unknown";var n=(r=r.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return n>=48&&n<=57?"_"+r:r}function Ar(r,n){return r=br(r),new Function("body","return function "+r+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(n)}function Tr(r,n){var e=Ar(n,(function(r){this.name=n,this.message=r;var e=new Error(r).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var Cr=void 0;function Er(r){throw new Cr(r)}function kr(r,n,e){function t(n){var t=e(n);t.length!==r.length&&Er("Mismatched type converter count");for(var a=0;a<r.length;++a)Rr(r[a],t[a])}r.forEach((function(r){_r[r]=n}));var a=new Array(n.length),o=[],i=0;n.forEach((function(r,n){wr.hasOwnProperty(r)?a[n]=wr[r]:(o.push(r),yr.hasOwnProperty(r)||(yr[r]=[]),yr[r].push((function(){a[n]=wr[r],++i===o.length&&t(a)})))})),0===o.length&&t(a)}function xr(r){switch(r){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+r)}}var Wr=void 0;function Pr(r){for(var n="",t=r;e()[t];)n+=Wr[e()[t++]];return n}var Sr=void 0;function Fr(r){throw new Sr(r)}function Rr(r,n,e){if(e=e||{},!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=n.name;if(r||Fr('type "'+t+'" must have a positive integer typeid pointer'),wr.hasOwnProperty(r)){if(e.ignoreDuplicateRegistrations)return;Fr("Cannot register type '"+t+"' twice")}if(wr[r]=n,delete _r[r],yr.hasOwnProperty(r)){var a=yr[r];delete yr[r],a.forEach((function(r){r()}))}}var Ir=[],jr=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function Mr(r){r>4&&0==--jr[r].refcount&&(jr[r]=void 0,Ir.push(r))}function Or(r){switch(r){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=Ir.length?Ir.pop():jr.length;return jr[n]={refcount:1,value:r},n}}function Dr(r){if(null===r)return"null";var n=typeof r;return"object"===n||"array"===n||"function"===n?r.toString():""+r}function Ur(r,n){switch(n){case 2:return function(r){return this.fromWireType((A.buffer!=E&&G(A.buffer),R)[r>>2])};case 3:return function(r){return this.fromWireType(c()[r>>3])};default:throw new TypeError("Unknown float type: "+r)}}function Br(n,e,t){return n.includes("j")?function(n,e,t){var a=r["dynCall_"+n];return t&&t.length?a.apply(null,[e].concat(t)):a.call(null,e)}(n,e,t):Y.get(e).apply(null,t)}function Hr(r,n){var e,t,a,o=(r=Pr(r)).includes("j")?(e=r,t=n,a=[],function(){a.length=arguments.length;for(var r=0;r<arguments.length;r++)a[r]=arguments[r];return Br(e,t,a)}):Y.get(n);return"function"!=typeof o&&Fr("unknown function pointer with signature "+r+": "+n),o}var Lr=void 0;function qr(r){var n=wn(r),e=Pr(n);return gn(n),e}function Nr(r,a,c){switch(a){case 0:return c?function(r){return n()[r]}:function(r){return e()[r]};case 1:return c?function(r){return t()[r>>1]}:function(r){return o()[r>>1]};case 2:return c?function(r){return i()[r>>2]}:function(r){return u()[r>>2]};default:throw new TypeError("Unknown integer type: "+r)}}var Vr={};function zr(){return"object"==typeof globalThis?globalThis:Function("return this")()}function Gr(r,n){var e=wr[r];return void 0===e&&Fr(n+" has unknown type "+qr(r)),e}var Yr={},Qr=[];function Jr(r,e,t){if(r<=0||r>n().length||!0&r)return-28;var a=Atomics.wait(i(),r>>2,e,t);if("timed-out"===a)return-73;if("not-equal"===a)return-6;if("ok"===a)return 0;throw"Atomics.wait returned an unexpected value "+a}function $r(r,n){for(var e=arguments.length-2,t=Fn(),a=e,o=In(8*a),i=o>>3,u=0;u<e;u++){var s=arguments[2+u];c()[i+u]=s}var f=En(r,a,o,n);return Rn(t),f}var Xr=[];function Zr(r){try{return A.grow(r-E.byteLength+65535>>>16),G(A.buffer),1}catch(r){}}var Kr={inEventHandler:0,removeAllEventListeners:function(){for(var r=Kr.eventHandlers.length-1;r>=0;--r)Kr._removeHandler(r);Kr.eventHandlers=[],Kr.deferredCalls=[]},registerRemoveEventListeners:function(){Kr.removeEventListenersRegistered||(X.push(Kr.removeAllEventListeners),Kr.removeEventListenersRegistered=!0)},deferredCalls:[],deferCall:function(r,n,e){function t(r,n){if(r.length!=n.length)return!1;for(var e in r)if(r[e]!=n[e])return!1;return!0}for(var a in Kr.deferredCalls){var o=Kr.deferredCalls[a];if(o.targetFunction==r&&t(o.argsList,e))return}Kr.deferredCalls.push({targetFunction:r,precedence:n,argsList:e}),Kr.deferredCalls.sort((function(r,n){return r.precedence<n.precedence}))},removeDeferredCalls:function(r){for(var n=0;n<Kr.deferredCalls.length;++n)Kr.deferredCalls[n].targetFunction==r&&(Kr.deferredCalls.splice(n,1),--n)},canPerformEventHandlerRequests:function(){return Kr.inEventHandler&&Kr.currentEventHandler.allowsDeferredCalls},runDeferredCalls:function(){if(Kr.canPerformEventHandlerRequests())for(var r=0;r<Kr.deferredCalls.length;++r){var n=Kr.deferredCalls[r];Kr.deferredCalls.splice(r,1),--r,n.targetFunction.apply(null,n.argsList)}},eventHandlers:[],removeAllHandlersOnTarget:function(r,n){for(var e=0;e<Kr.eventHandlers.length;++e)Kr.eventHandlers[e].target!=r||n&&n!=Kr.eventHandlers[e].eventTypeString||Kr._removeHandler(e--)},_removeHandler:function(r){var n=Kr.eventHandlers[r];n.target.removeEventListener(n.eventTypeString,n.eventListenerFunc,n.useCapture),Kr.eventHandlers.splice(r,1)},registerOrRemoveHandler:function(r){var n=function(n){++Kr.inEventHandler,Kr.currentEventHandler=r,Kr.runDeferredCalls(),r.handlerFunc(n),Kr.runDeferredCalls(),--Kr.inEventHandler};if(r.callbackfunc)r.eventListenerFunc=n,r.target.addEventListener(r.eventTypeString,n,r.useCapture),Kr.eventHandlers.push(r),Kr.registerRemoveEventListeners();else for(var e=0;e<Kr.eventHandlers.length;++e)Kr.eventHandlers[e].target==r.target&&Kr.eventHandlers[e].eventTypeString==r.eventTypeString&&Kr._removeHandler(e--)},queueEventHandlerOnThread_iiii:function(r,n,e,t,a){var o=Fn(),u=In(12);i()[u>>2]=e,i()[u+4>>2]=t,i()[u+8>>2]=a,kn(0,r,637534208,n,t,u),Rn(o)},getTargetThreadForEventCallback:function(r){switch(r){case 1:return 0;case 2:return dr.currentProxiedOperationCallerThread;default:return r}},getNodeNameForTarget:function(r){return r?r==window?"#window":r==screen?"#screen":r&&r.nodeName?r.nodeName:"":""},fullscreenEnabled:function(){return document.fullscreenEnabled||document.webkitFullscreenEnabled}},rn=[0,"undefined"!=typeof document?document:0,"undefined"!=typeof window?window:0];function nn(r){return function(r){var n;return r=(n=r)>2?D(n):n,rn[r]||("undefined"!=typeof document?document.querySelector(r):void 0)}(r)}function en(r,n,e){var t=nn(r);if(!t)return-4;if(t.canvasSharedPtr&&(i()[t.canvasSharedPtr>>2]=n,i()[t.canvasSharedPtr+4>>2]=e),!t.offscreenCanvas&&t.controlTransferredOffscreen)return t.canvasSharedPtr?(function(r,n,e,t){!function(r,n,e,t){var a,o,u,c=Fn(),s=In(12),f=0;n&&(o=B(a=n)+1,U(a,u=yn(o),o),f=u),i()[s>>2]=f,i()[s+4>>2]=e,i()[s+8>>2]=t,kn(0,r,657457152,0,f,s),Rn(c)}(r,n=n?D(n):"",e,t)}(i()[t.canvasSharedPtr+8>>2],r,n,e),1):-4;t.offscreenCanvas&&(t=t.offscreenCanvas);var a=!1;if(t.GLctxObject&&t.GLctxObject.GLctx){var o=t.GLctxObject.GLctx.getParameter(2978);a=0===o[0]&&0===o[1]&&o[2]===t.width&&o[3]===t.height}return t.width=n,t.height=e,a&&t.GLctxObject.GLctx.viewport(0,0,n,e),0}function tn(r,n,e){return m?$r(1,1,r,n,e):en(r,n,e)}var an,on={counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:{},offscreenCanvases:{},queries:[],stringCache:{},unpackAlignment:4,recordError:function(r){on.lastError||(on.lastError=r)},getNewId:function(r){for(var n=on.counter++,e=r.length;e<n;e++)r[e]=null;return n},getSource:function(r,n,e,t){for(var a="",o=0;o<n;++o){var u=t?i()[t+4*o>>2]:-1;a+=D(i()[e+4*o>>2],u<0?void 0:u)}return a},createContext:function(r,n){r.getContextSafariWebGL2Fixed||(r.getContextSafariWebGL2Fixed=r.getContext,r.getContext=function(n,e){var t=r.getContextSafariWebGL2Fixed(n,e);return"webgl"==n==t instanceof WebGLRenderingContext?t:null});var e=r.getContext("webgl",n);return e?on.registerContext(e,n):0},registerContext:function(r,n){var e=yn(8);i()[e+4>>2]=Pn();var t={handle:e,attributes:n,version:n.majorVersion,GLctx:r};return r.canvas&&(r.canvas.GLctxObject=t),on.contexts[e]=t,(void 0===n.enableExtensionsByDefault||n.enableExtensionsByDefault)&&on.initExtensions(t),e},makeContextCurrent:function(n){return on.currentContext=on.contexts[n],r.ctx=an=on.currentContext&&on.currentContext.GLctx,!(n&&!an)},getContext:function(r){return on.contexts[r]},deleteContext:function(r){on.currentContext===on.contexts[r]&&(on.currentContext=null),"object"==typeof Kr&&Kr.removeAllHandlersOnTarget(on.contexts[r].GLctx.canvas),on.contexts[r]&&on.contexts[r].GLctx.canvas&&(on.contexts[r].GLctx.canvas.GLctxObject=void 0),gn(on.contexts[r].handle),on.contexts[r]=null},initExtensions:function(r){if(r||(r=on.currentContext),!r.initExtensionsDone){r.initExtensionsDone=!0;var n,e=r.GLctx;!function(r){var n=r.getExtension("ANGLE_instanced_arrays");n&&(r.vertexAttribDivisor=function(r,e){n.vertexAttribDivisorANGLE(r,e)},r.drawArraysInstanced=function(r,e,t,a){n.drawArraysInstancedANGLE(r,e,t,a)},r.drawElementsInstanced=function(r,e,t,a,o){n.drawElementsInstancedANGLE(r,e,t,a,o)})}(e),function(r){var n=r.getExtension("OES_vertex_array_object");n&&(r.createVertexArray=function(){return n.createVertexArrayOES()},r.deleteVertexArray=function(r){n.deleteVertexArrayOES(r)},r.bindVertexArray=function(r){n.bindVertexArrayOES(r)},r.isVertexArray=function(r){return n.isVertexArrayOES(r)})}(e),function(r){var n=r.getExtension("WEBGL_draw_buffers");n&&(r.drawBuffers=function(r,e){n.drawBuffersWEBGL(r,e)})}(e),e.disjointTimerQueryExt=e.getExtension("EXT_disjoint_timer_query"),(n=e).multiDrawWebgl=n.getExtension("WEBGL_multi_draw"),(e.getSupportedExtensions()||[]).forEach((function(r){r.includes("lose_context")||r.includes("debug")||e.getExtension(r)}))}}},un=["default","low-power","high-performance"],cn={mappings:{},buffers:[null,[],[]],printChar:function(r,n){var e=cn.buffers[r];0===n||10===n?((1===r?_:b)(O(e,0)),e.length=0):e.push(n)},varargs:void 0,get:function(){return cn.varargs+=4,i()[cn.varargs-4>>2]},getStr:function(r){return D(r)},get64:function(r,n){return r}};function sn(r){return m?$r(2,1,r):0}function fn(r,n,e,t,a){if(m)return $r(3,1,r,n,e,t,a)}function ln(r,n,t,a){if(m)return $r(4,1,r,n,t,a);for(var o=0,u=0;u<t;u++){for(var c=i()[n+8*u>>2],s=i()[n+(8*u+4)>>2],f=0;f<s;f++)cn.printChar(r,e()[c+f]);o+=s}return i()[a>>2]=o,0}function dn(r){if(m)throw"Internal Error! spawnThread() can only ever be called from main application thread!";var n=dr.getNewWorker();if(!n)return 6;if(void 0!==n.pthread)throw"Internal error!";if(!r.pthread_ptr)throw"Internal error, no pthread ptr!";dr.runningWorkers.push(n);for(var e=yn(512),t=0;t<128;++t)i()[e+4*t>>2]=0;var a=r.stackBase+r.stackSize,o=dr.pthreads[r.pthread_ptr]={worker:n,stackBase:r.stackBase,stackSize:r.stackSize,allocatedOwnStack:r.allocatedOwnStack,threadInfoStruct:r.pthread_ptr},c=o.threadInfoStruct>>2;Atomics.store(u(),c+16,r.detached),Atomics.store(u(),c+25,e),Atomics.store(u(),c+10,o.threadInfoStruct),Atomics.store(u(),c+20,r.stackSize),Atomics.store(u(),c+19,a),Atomics.store(u(),c+26,r.stackSize),Atomics.store(u(),c+28,a),Atomics.store(u(),c+29,r.detached);var s=Wn()+40;Atomics.store(u(),c+43,s),n.pthread=o;var f={cmd:"run",start_routine:r.startRoutine,arg:r.arg,threadInfoStruct:r.pthread_ptr,stackBase:r.stackBase,stackSize:r.stackSize};return n.runPthread=function(){f.time=performance.now(),n.postMessage(f,r.transferList)},n.loaded&&(n.runPthread(),delete n.runPthread),0}function pn(){if(m){var r=Pn();if(r&&!Atomics.load(u(),r+56>>2)&&2==Atomics.load(u(),r+0>>2))throw"Canceled!"}}m||dr.initMainThreadBlock(),Cr=r.InternalError=Tr(Error,"InternalError"),function(){for(var r=new Array(256),n=0;n<256;++n)r[n]=String.fromCharCode(n);Wr=r}(),Sr=r.BindingError=Tr(Error,"BindingError"),r.count_emval_handles=function(){for(var r=0,n=5;n<jr.length;++n)void 0!==jr[n]&&++r;return r},r.get_first_emval=function(){for(var r=5;r<jr.length;++r)if(void 0!==jr[r])return jr[r];return null},Lr=r.UnboundTypeError=Tr(Error,"UnboundTypeError");var hn,vn=[null,tn,sn,fn,ln],mn={d:function(r,n,e,t){tr("Assertion failed: "+D(r)+", at: "+[n?D(n):"unknown filename",e,t?D(t):"unknown function"])},O:function(r){return yn(r+16)+16},r:function(r,n){return e=r,t=n,void dr.threadExitHandlers.push((function(){Y.get(e)(t)}));var e,t},N:function(r,n,e){throw new hr(r).init(n,e),r},t:function(r){var n=vr[r];delete vr[r];var e=n.rawConstructor,t=n.rawDestructor,a=n.fields;kr([r],a.map((function(r){return r.getterReturnType})).concat(a.map((function(r){return r.setterArgumentType}))),(function(r){var o={};return a.forEach((function(n,e){var t=n.fieldName,i=r[e],u=n.getter,c=n.getterContext,s=r[e+a.length],f=n.setter,l=n.setterContext;o[t]={read:function(r){return i.fromWireType(u(c,r))},write:function(r,n){var e=[];f(l,r,s.toWireType(e,n)),mr(e)}}})),[{name:n.name,fromWireType:function(r){var n={};for(var e in o)n[e]=o[e].read(r);return t(r),n},toWireType:function(r,n){for(var a in o)if(!(a in n))throw new TypeError('Missing field:  "'+a+'"');var i=e();for(a in o)o[a].write(i,n[a]);return null!==r&&r.push(t,i),i},argPackAdvance:8,readValueFromPointer:gr,destructorFunction:t}]}))},x:function(r,n,e,t,a){},L:function(r,e,a,o,u){var c=xr(a);Rr(r,{name:e=Pr(e),fromWireType:function(r){return!!r},toWireType:function(r,n){return n?o:u},argPackAdvance:8,readValueFromPointer:function(r){var o;if(1===a)o=n();else if(2===a)o=t();else{if(4!==a)throw new TypeError("Unknown boolean type size: "+e);o=i()}return this.fromWireType(o[r>>c])},destructorFunction:null})},K:function(r,n){Rr(r,{name:n=Pr(n),fromWireType:function(r){var n=jr[r].value;return Mr(r),n},toWireType:function(r,n){return Or(n)},argPackAdvance:8,readValueFromPointer:gr,destructorFunction:null})},o:function(r,n,e){var t=xr(e);Rr(r,{name:n=Pr(n),fromWireType:function(r){return r},toWireType:function(r,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+Dr(n)+'" to '+this.name);return n},argPackAdvance:8,readValueFromPointer:Ur(n,t),destructorFunction:null})},s:function(n,e,t,a,o,u){var c=function(r,n){for(var e=[],t=0;t<r;t++)e.push(i()[(n>>2)+t]);return e}(e,t);n=Pr(n),o=Hr(a,o),function(n,e,t){r.hasOwnProperty(n)?((void 0===t||void 0!==r[n].overloadTable&&void 0!==r[n].overloadTable[t])&&Fr("Cannot register public name '"+n+"' twice"),function(r,n,e){if(void 0===r[n].overloadTable){var t=r[n];r[n]=function(){return r[n].overloadTable.hasOwnProperty(arguments.length)||Fr("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+r[n].overloadTable+")!"),r[n].overloadTable[arguments.length].apply(this,arguments)},r[n].overloadTable=[],r[n].overloadTable[t.argCount]=t}}(r,n,n),r.hasOwnProperty(t)&&Fr("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),r[n].overloadTable[t]=e):(r[n]=e,void 0!==t&&(r[n].numArguments=t))}(n,(function(){!function(r,n){var e=[],t={};throw n.forEach((function r(n){t[n]||wr[n]||(_r[n]?_r[n].forEach(r):(e.push(n),t[n]=!0))})),new Lr(r+": "+e.map(qr).join([", "]))}("Cannot call "+n+" due to unbound types",c)}),e-1),kr([],c,(function(t){var a=[t[0],null].concat(t.slice(1));return function(n,e,t){r.hasOwnProperty(n)||Er("Replacing nonexistant public symbol"),void 0!==r[n].overloadTable&&void 0!==t?r[n].overloadTable[t]=e:(r[n]=e,r[n].argCount=t)}(n,function(r,n,e,t,a){var o=n.length;o<2&&Fr("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==n[1]&&null!==e,u=!1,c=1;c<n.length;++c)if(null!==n[c]&&void 0===n[c].destructorFunction){u=!0;break}var s="void"!==n[0].name,f="",l="";for(c=0;c<o-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+br(r)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+r+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[Fr,t,a,mr,n[0],n[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<o-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+n[c+2].name+"\n",h.push("argType"+c),v.push(n[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<n.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==n[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+n[c].name+"\n",h.push(m+"_dtor"),v.push(n[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(r,n){if(!(r instanceof Function))throw new TypeError("new_ called with constructor type "+typeof r+" which is not a function");var e=Ar(r.name||"unknownFunctionName",(function(){}));e.prototype=r.prototype;var t=new e,a=r.apply(t,n);return a instanceof Object?a:t}(Function,h).apply(null,v)}(n,a,null,o,u),e-1),[]}))},e:function(r,n,e,t,a){n=Pr(n),-1===a&&(a=4294967295);var o=xr(e),i=function(r){return r};if(0===t){var u=32-8*e;i=function(r){return r<<u>>>u}}var c=n.includes("unsigned");Rr(r,{name:n,fromWireType:i,toWireType:function(r,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+Dr(e)+'" to '+this.name);if(e<t||e>a)throw new TypeError('Passing a number "'+Dr(e)+'" from JS side to C/C++ side to an argument of type "'+n+'", which is outside the valid range ['+t+", "+a+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:Nr(n,o,0!==t),destructorFunction:null})},b:function(r,n,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function a(r){r>>=2;var n=u(),e=n[r],a=n[r+1];return new t(E,a,e)}Rr(r,{name:e=Pr(e),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},p:function(r,n){var t="std::string"===(n=Pr(n));Rr(r,{name:n,fromWireType:function(r){var n,a=u()[r>>2];if(t)for(var o=r+4,i=0;i<=a;++i){var c=r+4+i;if(i==a||0==e()[c]){var s=D(o,c-o);void 0===n?n=s:(n+=String.fromCharCode(0),n+=s),o=c+1}}else{var f=new Array(a);for(i=0;i<a;++i)f[i]=String.fromCharCode(e()[r+4+i]);n=f.join("")}return gn(r),n},toWireType:function(r,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var a="string"==typeof n;a||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||Fr("Cannot pass non-string to std::string");var o=(t&&a?function(){return B(n)}:function(){return n.length})(),i=yn(4+o+1);if(u()[i>>2]=o,t&&a)U(n,i+4,o+1);else if(a)for(var c=0;c<o;++c){var s=n.charCodeAt(c);s>255&&(gn(i),Fr("String has UTF-16 code units that do not fit in 8 bits")),e()[i+4+c]=s}else for(c=0;c<o;++c)e()[i+4+c]=n[c];return null!==r&&r.push(gn,i),i},argPackAdvance:8,readValueFromPointer:gr,destructorFunction:function(r){gn(r)}})},i:function(r,n,e){var t,a,i,c,s;e=Pr(e),2===n?(t=H,a=L,c=q,i=function(){return o()},s=1):4===n&&(t=N,a=V,c=z,i=function(){return u()},s=2),Rr(r,{name:e,fromWireType:function(r){for(var e,a=u()[r>>2],o=i(),c=r+4,f=0;f<=a;++f){var l=r+4+f*n;if(f==a||0==o[l>>s]){var d=t(c,l-c);void 0===e?e=d:(e+=String.fromCharCode(0),e+=d),c=l+n}}return gn(r),e},toWireType:function(r,t){"string"!=typeof t&&Fr("Cannot pass non-string to C++ string type "+e);var o=c(t),i=yn(4+o+n);return u()[i>>2]=o>>s,a(t,i+4,o+n),null!==r&&r.push(gn,i),i},argPackAdvance:8,readValueFromPointer:gr,destructorFunction:function(r){gn(r)}})},u:function(r,n,e,t,a,o){vr[r]={name:Pr(n),rawConstructor:Hr(e,t),rawDestructor:Hr(a,o),fields:[]}},c:function(r,n,e,t,a,o,i,u,c,s){vr[r].fields.push({fieldName:Pr(n),getterReturnType:e,getter:Hr(t,a),getterContext:o,setterArgumentType:i,setter:Hr(u,c),setterContext:s})},M:function(r,n){Rr(r,{isVoid:!0,name:n=Pr(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(r,n){}})},G:function(r,n){if(r==n)postMessage({cmd:"processQueuedMainThreadWork"});else if(m)postMessage({targetThread:r,cmd:"processThreadQueue"});else{var e=dr.pthreads[r],t=e&&e.worker;if(!t)return;t.postMessage({cmd:"processThreadQueue"})}return 1},l:Mr,J:function(r){return 0===r?Or(zr()):(r=void 0===(e=Vr[n=r])?Pr(n):e,Or(zr()[r]));var n,e},Q:function(r){r>4&&(jr[r].refcount+=1)},v:function(n,e,t,a){n=function(r){return r||Fr("Cannot use deleted val. handle = "+r),jr[r].value}(n);var o=Yr[e];return o||(o=function(n){for(var e="",t=0;t<n;++t)e+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+n+"(constructor, argTypes, args) {\n";for(t=0;t<n;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(Gr,r,Or)}(e),Yr[e]=o),o(n,t,a)},j:function(){tr()},n:function(r,n,t){var a=function(r,n){var t;for(Qr.length=0,n>>=2;t=e()[r++];){var a=t<105;a&&1&n&&n++,Qr.push(a?c()[n++>>1]:i()[n]),++n}return Qr}(n,t);return ur[r].apply(null,a)},C:function(){},m:function(r,n){},f:Jr,g:sr,h:lr,A:function(r,n,t){e().copyWithin(r,n,n+t)},R:function(){return navigator.hardwareConcurrency},D:function(r,n,e){Xr.length=n;for(var t=e>>3,a=0;a<n;a++)Xr[a]=c()[t+a];return(r<0?ur[-r-1]:vn[r]).apply(null,Xr)},B:function(r){var n=e().length;if((r>>>=0)<=n)return!1;var t,a=2147483648;if(r>a)return!1;for(var o=1;o<=4;o*=2){var i=n*(1+.2/o);if(i=Math.min(i,r+100663296),Zr(Math.min(a,((t=Math.max(r,i))%65536>0&&(t+=65536-t%65536),t))))return!0}return!1},E:function(r,n,e){return nn(r)?en(r,n,e):tn(r,n,e)},k:function(r){},F:function(r,n){return e=r,t=n>>2,a=i()[t+6],o={alpha:!!i()[t+0],depth:!!i()[t+1],stencil:!!i()[t+2],antialias:!!i()[t+3],premultipliedAlpha:!!i()[t+4],preserveDrawingBuffer:!!i()[t+5],powerPreference:un[a],failIfMajorPerformanceCaveat:!!i()[t+7],majorVersion:i()[t+8],minorVersion:i()[t+9],enableExtensionsByDefault:i()[t+10],explicitSwapControl:i()[t+11],proxyContextToMainThread:i()[t+12],renderViaOffscreenBackBuffer:i()[t+13]},(u=nn(e))?o.explicitSwapControl?0:on.createContext(u,o):0;var e,t,a,o,u},I:sn,w:fn,H:ln,z:function(){dr.initRuntime()},a:A||r.wasmMemory,q:function(r,n,e,t){if("undefined"==typeof SharedArrayBuffer)return b("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;if(!r)return b("pthread_create called with a null thread pointer!"),28;var a=[];if(m&&0===a.length)return Tn(687865856,r,n,e,t);var o=0,c=0,s=0;n&&-1!=n?(o=i()[n>>2],o+=81920,c=i()[n+8>>2],s=0!==i()[n+12>>2]):o=2097152;var f=0==c;f?c=Mn(16,o):M((c-=o)>0);for(var l=yn(228),d=0;d<57;++d)u()[(l>>2)+d]=0;i()[r>>2]=l,i()[l+12>>2]=l;var p=l+152;i()[p>>2]=p;var h={stackBase:c,stackSize:o,allocatedOwnStack:f,detached:s,startRoutine:e,pthread_ptr:l,arg:t,transferList:a};return m?(h.cmd="spawnThread",postMessage(h,a),0):dn(h)},P:function(r,n){return function(r,n,e){if(!r)return b("pthread_join attempted on a null thread pointer!"),71;if(m&&Pn()==r)return b("PThread "+r+" is attempting to join to itself!"),16;if(!m&&bn()==r)return b("Main thread "+r+" is attempting to join to itself!"),16;if(i()[r+12>>2]!==r)return b("pthread_join attempted on thread "+r+", which does not point to a valid thread, or does not exist anymore!"),71;if(Atomics.load(u(),r+64>>2))return b("Attempted to join thread "+r+", which was already detached!"),28;for(;;){var t=Atomics.load(u(),r+0>>2);if(1==t){var a=Atomics.load(u(),r+4>>2);return n&&(i()[n>>2]=a),Atomics.store(u(),r+64>>2,1),m?postMessage({cmd:"cleanupThread",thread:r}):fr(r),0}pn(),m||Cn(),Jr(r+0,t,m?100:1)}}(r,n)},y:function(r){}},gn=(function(){var n={a:mn};function e(n,e){var t,a=n.exports;if(r.asm=a,Y=r.asm.W,t=r.asm.S,$.unshift(t),dr.tlsInitFunctions.push(r.asm.V),T=e,!m){var o=dr.unusedWorkers.length;dr.unusedWorkers.forEach((function(n){dr.loadWasmModuleToWorker(n,(function(){--o||function(n){if(rr--,r.monitorRunDependencies&&r.monitorRunDependencies(rr),0==rr&&(null!==nr&&(clearInterval(nr),nr=null),er)){var e=er;er=null,e()}}()}))}))}}function t(r){e(r.instance,r.module)}function a(r){return(w||"function"!=typeof fetch?Promise.resolve().then((function(){return ir(or)})):fetch(or,{credentials:"same-origin"}).then((function(r){if(!r.ok)throw"failed to load wasm binary file at '"+or+"'";return r.arrayBuffer()})).catch((function(){return ir(or)}))).then((function(r){return WebAssembly.instantiate(r,n)})).then(r,(function(r){b("failed to asynchronously prepare wasm: "+r),tr(r)}))}if(m||(M(!m,"addRunDependency cannot be used in a pthread worker"),rr++,r.monitorRunDependencies&&r.monitorRunDependencies(rr)),r.instantiateWasm)try{return r.instantiateWasm(n,e)}catch(r){return b("Module.instantiateWasm callback failed with error: "+r),!1}(w||"function"!=typeof WebAssembly.instantiateStreaming||ar(or)||"function"!=typeof fetch?a(t):fetch(or,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,n).then(t,(function(r){return b("wasm streaming compile failed: "+r),b("falling back to ArrayBuffer instantiation"),a(t)}))}))).catch(f)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.S).apply(null,arguments)},r._free=function(){return(gn=r._free=r.asm.T).apply(null,arguments)}),yn=r._malloc=function(){return(yn=r._malloc=r.asm.U).apply(null,arguments)},wn=(r._emscripten_tls_init=function(){return(r._emscripten_tls_init=r.asm.V).apply(null,arguments)},r.___getTypeName=function(){return(wn=r.___getTypeName=r.asm.X).apply(null,arguments)}),_n=(r.___embind_register_native_and_builtin_types=function(){return(r.___embind_register_native_and_builtin_types=r.asm.Y).apply(null,arguments)},r._emscripten_current_thread_process_queued_calls=function(){return(r._emscripten_current_thread_process_queued_calls=r.asm.Z).apply(null,arguments)},r._emscripten_register_main_browser_thread_id=function(){return(_n=r._emscripten_register_main_browser_thread_id=r.asm._).apply(null,arguments)}),bn=r._emscripten_main_browser_thread_id=function(){return(bn=r._emscripten_main_browser_thread_id=r.asm.$).apply(null,arguments)},An=r.__emscripten_do_dispatch_to_thread=function(){return(An=r.__emscripten_do_dispatch_to_thread=r.asm.aa).apply(null,arguments)},Tn=r._emscripten_sync_run_in_main_thread_4=function(){return(Tn=r._emscripten_sync_run_in_main_thread_4=r.asm.ba).apply(null,arguments)},Cn=r._emscripten_main_thread_process_queued_calls=function(){return(Cn=r._emscripten_main_thread_process_queued_calls=r.asm.ca).apply(null,arguments)},En=r._emscripten_run_in_main_runtime_thread_js=function(){return(En=r._emscripten_run_in_main_runtime_thread_js=r.asm.da).apply(null,arguments)},kn=r.__emscripten_call_on_thread=function(){return(kn=r.__emscripten_call_on_thread=r.asm.ea).apply(null,arguments)},xn=r.__emscripten_thread_init=function(){return(xn=r.__emscripten_thread_init=r.asm.fa).apply(null,arguments)},Wn=r._emscripten_get_global_libc=function(){return(Wn=r._emscripten_get_global_libc=r.asm.ga).apply(null,arguments)},Pn=r._pthread_self=function(){return(Pn=r._pthread_self=r.asm.ha).apply(null,arguments)},Sn=r.___pthread_tsd_run_dtors=function(){return(Sn=r.___pthread_tsd_run_dtors=r.asm.ia).apply(null,arguments)},Fn=r.stackSave=function(){return(Fn=r.stackSave=r.asm.ja).apply(null,arguments)},Rn=r.stackRestore=function(){return(Rn=r.stackRestore=r.asm.ka).apply(null,arguments)},In=r.stackAlloc=function(){return(In=r.stackAlloc=r.asm.la).apply(null,arguments)},jn=r._emscripten_stack_set_limits=function(){return(jn=r._emscripten_stack_set_limits=r.asm.ma).apply(null,arguments)},Mn=r._memalign=function(){return(Mn=r._memalign=r.asm.na).apply(null,arguments)},On=(r.dynCall_jiji=function(){return(r.dynCall_jiji=r.asm.oa).apply(null,arguments)},r.__emscripten_allow_main_runtime_queued_calls=112408),Dn=r.__emscripten_main_thread_futex=123196;function Un(r){this.name="ExitStatus",this.message="Program terminated with exit("+r+")",this.status=r}function Bn(n){if(n=n||h,!(rr>0)){if(m)return s(r),K(),void postMessage({cmd:"loaded"});!function(){if(!m){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)n=r.preRun.shift(),J.unshift(n);var n;cr(J)}}(),rr>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),e()}),1)):e())}function e(){hn||(hn=!0,r.calledRun=!0,j||(K(),s(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(!m){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)n=r.postRun.shift(),Z.unshift(n);var n;cr(Z)}}()))}}if(r.PThread=dr,r.PThread=dr,r.wasmMemory=A,r.ExitStatus=Un,er=function r(){hn||Bn(),hn||(er=r)},r.run=Bn,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return m&&(C=!1,dr.initWorker()),Bn(),r.ready},Jr=function(r){var n,e;(r=void 0!==(r=r||{})?r:{}).ready=new Promise((function(r,t){n=r,e=t}));var t,o={};for(t in r)r.hasOwnProperty(t)&&(o[t]=r[t]);var i,u=[],c="";c=self.location.href,c=0!==(c="file:///D:/altri/squoosh-web/squoosh-browser/codecs/wp2/enc/wp2_enc.js").indexOf("blob:")?c.substr(0,c.lastIndexOf("/")+1):"",i=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)};var s,f,l=r.print||console.log.bind(console),d=r.printErr||console.warn.bind(console);for(t in o)o.hasOwnProperty(t)&&(r[t]=o[t]);o=null,r.arguments&&(u=r.arguments),r.thisProgram&&r.thisProgram,r.quit&&r.quit,r.wasmBinary&&(s=r.wasmBinary),r.noExitRuntime,"object"!=typeof WebAssembly&&L("no native wasm support detected");var p=!1,h=new TextDecoder("utf8");function v(r,n){if(!r)return"";for(var e=r+n,t=r;!(t>=e)&&y[t];)++t;return h.decode(y.subarray(r,t))}var m,g,y,w,_,b,A,T,C,E=new TextDecoder("utf-16le");function k(r,n){for(var e=r,t=e>>1,a=t+n/2;!(t>=a)&&_[t];)++t;return e=t<<1,E.decode(y.subarray(r,e))}function x(r,n,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=n,a=(e-=2)<2*r.length?e/2:r.length,o=0;o<a;++o){var i=r.charCodeAt(o);w[n>>1]=i,n+=2}return w[n>>1]=0,n-t}function W(r){return 2*r.length}function P(r,n){for(var e=0,t="";!(e>=n/4);){var a=b[r+4*e>>2];if(0==a)break;if(++e,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function S(r,n,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=n,a=t+e-4,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),b[n>>2]=i,(n+=4)+4>a)break}return b[n>>2]=0,n-t}function F(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&++e,n+=4}return n}function R(n){m=n,r.HEAP8=g=new Int8Array(n),r.HEAP16=w=new Int16Array(n),r.HEAP32=b=new Int32Array(n),r.HEAPU8=y=new Uint8Array(n),r.HEAPU16=_=new Uint16Array(n),r.HEAPU32=A=new Uint32Array(n),r.HEAPF32=T=new Float32Array(n),r.HEAPF64=C=new Float64Array(n)}r.INITIAL_MEMORY;var I,j,M=[],O=[],D=[],U=0,B=null,H=null;function L(n){r.onAbort&&r.onAbort(n),d(n+=""),p=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(n);throw e(t),t}function q(r){return r.startsWith("data:application/octet-stream;base64,")}if(r.preloadedImages={},r.preloadedAudios={},r.locateFile)q(N="wp2_enc.wasm")||(j=N,N=r.locateFile?r.locateFile(j,c):c+j);else var N=new URL(a(917),a.b).toString();function V(r){try{if(r==N&&s)return new Uint8Array(s);if(i)return i(r);throw"both async and sync fetching of the wasm failed"}catch(r){L(r)}}function z(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?I.get(t)():I.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(r)}}function G(r){this.excPtr=r,this.ptr=r-16,this.set_type=function(r){b[this.ptr+8>>2]=r},this.get_type=function(){return b[this.ptr+8>>2]},this.set_destructor=function(r){b[this.ptr+0>>2]=r},this.get_destructor=function(){return b[this.ptr+0>>2]},this.set_refcount=function(r){b[this.ptr+4>>2]=r},this.set_caught=function(r){r=r?1:0,g[this.ptr+12>>0]=r},this.get_caught=function(){return 0!=g[this.ptr+12>>0]},this.set_rethrown=function(r){r=r?1:0,g[this.ptr+13>>0]=r},this.get_rethrown=function(){return 0!=g[this.ptr+13>>0]},this.init=function(r,n){this.set_type(r),this.set_destructor(n),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var r=b[this.ptr+4>>2];b[this.ptr+4>>2]=r+1},this.release_ref=function(){var r=b[this.ptr+4>>2];return b[this.ptr+4>>2]=r-1,1===r}}var Y={};function Q(r){for(;r.length;){var n=r.pop();r.pop()(n)}}function J(r){return this.fromWireType(A[r>>2])}var $={},X={},Z={};function K(r){if(void 0===r)return"_unknown";var n=(r=r.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return n>=48&&n<=57?"_"+r:r}function rr(r,n){return r=K(r),new Function("body","return function "+r+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(n)}function nr(r,n){var e=rr(n,(function(r){this.name=n,this.message=r;var e=new Error(r).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var er=void 0;function tr(r){throw new er(r)}function ar(r,n,e){function t(n){var t=e(n);t.length!==r.length&&tr("Mismatched type converter count");for(var a=0;a<r.length;++a)fr(r[a],t[a])}r.forEach((function(r){Z[r]=n}));var a=new Array(n.length),o=[],i=0;n.forEach((function(r,n){X.hasOwnProperty(r)?a[n]=X[r]:(o.push(r),$.hasOwnProperty(r)||($[r]=[]),$[r].push((function(){a[n]=X[r],++i===o.length&&t(a)})))})),0===o.length&&t(a)}function or(r){switch(r){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+r)}}var ir=void 0;function ur(r){for(var n="",e=r;y[e];)n+=ir[y[e++]];return n}var cr=void 0;function sr(r){throw new cr(r)}function fr(r,n,e){if(e=e||{},!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=n.name;if(r||sr('type "'+t+'" must have a positive integer typeid pointer'),X.hasOwnProperty(r)){if(e.ignoreDuplicateRegistrations)return;sr("Cannot register type '"+t+"' twice")}if(X[r]=n,delete Z[r],$.hasOwnProperty(r)){var a=$[r];delete $[r],a.forEach((function(r){r()}))}}var lr=[],dr=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function pr(r){r>4&&0==--dr[r].refcount&&(dr[r]=void 0,lr.push(r))}function hr(r){switch(r){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=lr.length?lr.pop():dr.length;return dr[n]={refcount:1,value:r},n}}function vr(r){if(null===r)return"null";var n=typeof r;return"object"===n||"array"===n||"function"===n?r.toString():""+r}function mr(r,n){switch(n){case 2:return function(r){return this.fromWireType(T[r>>2])};case 3:return function(r){return this.fromWireType(C[r>>3])};default:throw new TypeError("Unknown float type: "+r)}}function gr(n,e,t){return n.includes("j")?function(n,e,t){var a=r["dynCall_"+n];return t&&t.length?a.apply(null,[e].concat(t)):a.call(null,e)}(n,e,t):I.get(e).apply(null,t)}function yr(r,n){var e,t,a,o=(r=ur(r)).includes("j")?(e=r,t=n,a=[],function(){a.length=arguments.length;for(var r=0;r<arguments.length;r++)a[r]=arguments[r];return gr(e,t,a)}):I.get(n);return"function"!=typeof o&&sr("unknown function pointer with signature "+r+": "+n),o}var wr=void 0;function _r(r){var n=Rr(r),e=ur(n);return Sr(n),e}function br(r,n,e){switch(n){case 0:return e?function(r){return g[r]}:function(r){return y[r]};case 1:return e?function(r){return w[r>>1]}:function(r){return _[r>>1]};case 2:return e?function(r){return b[r>>2]}:function(r){return A[r>>2]};default:throw new TypeError("Unknown integer type: "+r)}}var Ar={};function Tr(){return"object"==typeof globalThis?globalThis:Function("return this")()}function Cr(r,n){var e=X[r];return void 0===e&&sr(n+" has unknown type "+_r(r)),e}var Er={};function kr(r){try{return f.grow(r-m.byteLength+65535>>>16),R(f.buffer),1}catch(r){}}var xr={mappings:{},buffers:[null,[],[]],printChar:function(r,n){var e=xr.buffers[r];0===n||10===n?((1===r?l:d)(function(r,n,e){for(var t=0;r[t]&&!(t>=NaN);)++t;return h.decode(r.subarray?r.subarray(0,t):new Uint8Array(r.slice(0,t)))}(e)),e.length=0):e.push(n)},varargs:void 0,get:function(){return xr.varargs+=4,b[xr.varargs-4>>2]},getStr:function(r){return v(r)},get64:function(r,n){return r}};er=r.InternalError=nr(Error,"InternalError"),function(){for(var r=new Array(256),n=0;n<256;++n)r[n]=String.fromCharCode(n);ir=r}(),cr=r.BindingError=nr(Error,"BindingError"),r.count_emval_handles=function(){for(var r=0,n=5;n<dr.length;++n)void 0!==dr[n]&&++r;return r},r.get_first_emval=function(){for(var r=5;r<dr.length;++r)if(void 0!==dr[r])return dr[r];return null},wr=r.UnboundTypeError=nr(Error,"UnboundTypeError");var Wr,Pr={o:function(r,n,e,t){L("Assertion failed: "+v(r)+", at: "+[n?v(n):"unknown filename",e,t?v(t):"unknown function"])},z:function(r){return Fr(r+16)+16},B:function(r,n){},y:function(r,n,e){throw new G(r).init(n,e),r},l:function(r){var n=Y[r];delete Y[r];var e=n.rawConstructor,t=n.rawDestructor,a=n.fields;ar([r],a.map((function(r){return r.getterReturnType})).concat(a.map((function(r){return r.setterArgumentType}))),(function(r){var o={};return a.forEach((function(n,e){var t=n.fieldName,i=r[e],u=n.getter,c=n.getterContext,s=r[e+a.length],f=n.setter,l=n.setterContext;o[t]={read:function(r){return i.fromWireType(u(c,r))},write:function(r,n){var e=[];f(l,r,s.toWireType(e,n)),Q(e)}}})),[{name:n.name,fromWireType:function(r){var n={};for(var e in o)n[e]=o[e].read(r);return t(r),n},toWireType:function(r,n){for(var a in o)if(!(a in n))throw new TypeError('Missing field:  "'+a+'"');var i=e();for(a in o)o[a].write(i,n[a]);return null!==r&&r.push(t,i),i},argPackAdvance:8,readValueFromPointer:J,destructorFunction:t}]}))},q:function(r,n,e,t,a){},w:function(r,n,e,t,a){var o=or(e);fr(r,{name:n=ur(n),fromWireType:function(r){return!!r},toWireType:function(r,n){return n?t:a},argPackAdvance:8,readValueFromPointer:function(r){var t;if(1===e)t=g;else if(2===e)t=w;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+n);t=b}return this.fromWireType(t[r>>o])},destructorFunction:null})},v:function(r,n){fr(r,{name:n=ur(n),fromWireType:function(r){var n=dr[r].value;return pr(r),n},toWireType:function(r,n){return hr(n)},argPackAdvance:8,readValueFromPointer:J,destructorFunction:null})},h:function(r,n,e){var t=or(e);fr(r,{name:n=ur(n),fromWireType:function(r){return r},toWireType:function(r,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+vr(n)+'" to '+this.name);return n},argPackAdvance:8,readValueFromPointer:mr(n,t),destructorFunction:null})},k:function(n,e,t,a,o,i){var u=function(r,n){for(var e=[],t=0;t<r;t++)e.push(b[(n>>2)+t]);return e}(e,t);n=ur(n),o=yr(a,o),function(n,e,t){r.hasOwnProperty(n)?((void 0===t||void 0!==r[n].overloadTable&&void 0!==r[n].overloadTable[t])&&sr("Cannot register public name '"+n+"' twice"),function(r,n,e){if(void 0===r[n].overloadTable){var t=r[n];r[n]=function(){return r[n].overloadTable.hasOwnProperty(arguments.length)||sr("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+r[n].overloadTable+")!"),r[n].overloadTable[arguments.length].apply(this,arguments)},r[n].overloadTable=[],r[n].overloadTable[t.argCount]=t}}(r,n,n),r.hasOwnProperty(t)&&sr("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),r[n].overloadTable[t]=e):(r[n]=e,void 0!==t&&(r[n].numArguments=t))}(n,(function(){!function(r,n){var e=[],t={};throw n.forEach((function r(n){t[n]||X[n]||(Z[n]?Z[n].forEach(r):(e.push(n),t[n]=!0))})),new wr(r+": "+e.map(_r).join([", "]))}("Cannot call "+n+" due to unbound types",u)}),e-1),ar([],u,(function(t){var a=[t[0],null].concat(t.slice(1));return function(n,e,t){r.hasOwnProperty(n)||tr("Replacing nonexistant public symbol"),void 0!==r[n].overloadTable&&void 0!==t?r[n].overloadTable[t]=e:(r[n]=e,r[n].argCount=t)}(n,function(r,n,e,t,a){var o=n.length;o<2&&sr("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==n[1]&&null!==e,u=!1,c=1;c<n.length;++c)if(null!==n[c]&&void 0===n[c].destructorFunction){u=!0;break}var s="void"!==n[0].name,f="",l="";for(c=0;c<o-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+K(r)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+r+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[sr,t,a,Q,n[0],n[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<o-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+n[c+2].name+"\n",h.push("argType"+c),v.push(n[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<n.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==n[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+n[c].name+"\n",h.push(m+"_dtor"),v.push(n[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(r,n){if(!(r instanceof Function))throw new TypeError("new_ called with constructor type "+typeof r+" which is not a function");var e=rr(r.name||"unknownFunctionName",(function(){}));e.prototype=r.prototype;var t=new e,a=r.apply(t,n);return a instanceof Object?a:t}(Function,h).apply(null,v)}(n,a,null,o,i),e-1),[]}))},c:function(r,n,e,t,a){n=ur(n),-1===a&&(a=4294967295);var o=or(e),i=function(r){return r};if(0===t){var u=32-8*e;i=function(r){return r<<u>>>u}}var c=n.includes("unsigned");fr(r,{name:n,fromWireType:i,toWireType:function(r,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+vr(e)+'" to '+this.name);if(e<t||e>a)throw new TypeError('Passing a number "'+vr(e)+'" from JS side to C/C++ side to an argument of type "'+n+'", which is outside the valid range ['+t+", "+a+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:br(n,o,0!==t),destructorFunction:null})},a:function(r,n,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function a(r){var n=A,e=n[r>>=2],a=n[r+1];return new t(m,a,e)}fr(r,{name:e=ur(e),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},i:function(r,n){var e="std::string"===(n=ur(n));fr(r,{name:n,fromWireType:function(r){var n,t=A[r>>2];if(e)for(var a=r+4,o=0;o<=t;++o){var i=r+4+o;if(o==t||0==y[i]){var u=v(a,i-a);void 0===n?n=u:(n+=String.fromCharCode(0),n+=u),a=i+1}}else{var c=new Array(t);for(o=0;o<t;++o)c[o]=String.fromCharCode(y[r+4+o]);n=c.join("")}return Sr(r),n},toWireType:function(r,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var t="string"==typeof n;t||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||sr("Cannot pass non-string to std::string");var a=(e&&t?function(){return function(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&r.charCodeAt(++e)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n}(n)}:function(){return n.length})(),o=Fr(4+a+1);if(A[o>>2]=a,e&&t)!function(r,n,e,t){if(!(t>0))return 0;for(var a=e+t-1,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),i<=127){if(e>=a)break;n[e++]=i}else if(i<=2047){if(e+1>=a)break;n[e++]=192|i>>6,n[e++]=128|63&i}else if(i<=65535){if(e+2>=a)break;n[e++]=224|i>>12,n[e++]=128|i>>6&63,n[e++]=128|63&i}else{if(e+3>=a)break;n[e++]=240|i>>18,n[e++]=128|i>>12&63,n[e++]=128|i>>6&63,n[e++]=128|63&i}}n[e]=0}(n,y,o+4,a+1);else if(t)for(var i=0;i<a;++i){var u=n.charCodeAt(i);u>255&&(Sr(o),sr("String has UTF-16 code units that do not fit in 8 bits")),y[o+4+i]=u}else for(i=0;i<a;++i)y[o+4+i]=n[i];return null!==r&&r.push(Sr,o),o},argPackAdvance:8,readValueFromPointer:J,destructorFunction:function(r){Sr(r)}})},e:function(r,n,e){var t,a,o,i,u;e=ur(e),2===n?(t=k,a=x,i=W,o=function(){return _},u=1):4===n&&(t=P,a=S,i=F,o=function(){return A},u=2),fr(r,{name:e,fromWireType:function(r){for(var e,a=A[r>>2],i=o(),c=r+4,s=0;s<=a;++s){var f=r+4+s*n;if(s==a||0==i[f>>u]){var l=t(c,f-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=f+n}}return Sr(r),e},toWireType:function(r,t){"string"!=typeof t&&sr("Cannot pass non-string to C++ string type "+e);var o=i(t),c=Fr(4+o+n);return A[c>>2]=o>>u,a(t,c+4,o+n),null!==r&&r.push(Sr,c),c},argPackAdvance:8,readValueFromPointer:J,destructorFunction:function(r){Sr(r)}})},m:function(r,n,e,t,a,o){Y[r]={name:ur(n),rawConstructor:yr(e,t),rawDestructor:yr(a,o),fields:[]}},b:function(r,n,e,t,a,o,i,u,c,s){Y[r].fields.push({fieldName:ur(n),getterReturnType:e,getter:yr(t,a),getterContext:o,setterArgumentType:i,setter:yr(u,c),setterContext:s})},x:function(r,n){fr(r,{isVoid:!0,name:n=ur(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(r,n){}})},g:pr,A:function(r){return 0===r?hr(Tr()):(r=void 0===(e=Ar[n=r])?ur(n):e,hr(Tr()[r]));var n,e},j:function(r){r>4&&(dr[r].refcount+=1)},n:function(n,e,t,a){n=function(r){return r||sr("Cannot use deleted val. handle = "+r),dr[r].value}(n);var o=Er[e];return o||(o=function(n){for(var e="",t=0;t<n;++t)e+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+n+"(constructor, argTypes, args) {\n";for(t=0;t<n;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(Cr,r,hr)}(e),Er[e]=o),o(n,t,a)},f:function(){L()},s:function(r,n,e){y.copyWithin(r,n,n+e)},d:function(r){var n,e=y.length,t=2147483648;if((r>>>=0)>t)return!1;for(var a=1;a<=4;a*=2){var o=e*(1+.2/a);if(o=Math.min(o,r+100663296),kr(Math.min(t,((n=Math.max(r,o))%65536>0&&(n+=65536-n%65536),n))))return!0}return!1},u:function(r){return 0},p:function(r,n,e,t,a){},t:function(r,n,e,t){for(var a=0,o=0;o<e;o++){for(var i=b[n+8*o>>2],u=b[n+(8*o+4)>>2],c=0;c<u;c++)xr.printChar(r,y[i+c]);a+=u}return b[t>>2]=a,0},r:function(r){}},Sr=(function(){var n={a:Pr};function t(n,e){var t,a=n.exports;r.asm=a,R((f=r.asm.C).buffer),I=r.asm.I,t=r.asm.D,O.unshift(t),function(n){if(U--,r.monitorRunDependencies&&r.monitorRunDependencies(U),0==U&&(null!==B&&(clearInterval(B),B=null),H)){var e=H;H=null,e()}}()}function a(r){t(r.instance)}function o(r){return(s||"function"!=typeof fetch?Promise.resolve().then((function(){return V(N)})):fetch(N,{credentials:"same-origin"}).then((function(r){if(!r.ok)throw"failed to load wasm binary file at '"+N+"'";return r.arrayBuffer()})).catch((function(){return V(N)}))).then((function(r){return WebAssembly.instantiate(r,n)})).then(r,(function(r){d("failed to asynchronously prepare wasm: "+r),L(r)}))}if(U++,r.monitorRunDependencies&&r.monitorRunDependencies(U),r.instantiateWasm)try{return r.instantiateWasm(n,t)}catch(r){return d("Module.instantiateWasm callback failed with error: "+r),!1}(s||"function"!=typeof WebAssembly.instantiateStreaming||q(N)||"function"!=typeof fetch?o(a):fetch(N,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,n).then(a,(function(r){return d("wasm streaming compile failed: "+r),d("falling back to ArrayBuffer instantiation"),o(a)}))}))).catch(e)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.D).apply(null,arguments)},r._free=function(){return(Sr=r._free=r.asm.E).apply(null,arguments)}),Fr=r._malloc=function(){return(Fr=r._malloc=r.asm.F).apply(null,arguments)},Rr=r.___getTypeName=function(){return(Rr=r.___getTypeName=r.asm.G).apply(null,arguments)};function Ir(e){function t(){Wr||(Wr=!0,r.calledRun=!0,p||(z(O),n(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)n=r.postRun.shift(),D.unshift(n);var n;z(D)}()))}e=e||u,U>0||(function(){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)n=r.preRun.shift(),M.unshift(n);var n;z(M)}(),U>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),t()}),1)):t()))}if(r.___embind_register_native_and_builtin_types=function(){return(r.___embind_register_native_and_builtin_types=r.asm.H).apply(null,arguments)},r.dynCall_jiji=function(){return(r.dynCall_jiji=r.asm.J).apply(null,arguments)},H=function r(){Wr||Ir(),Wr||(H=r)},r.run=Ir,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return Ir(),r.ready};let $r;const Xr=(r,n)=>async function(r,n){$r||($r=async function(){return await pr()?await dr()?fr(Yr):fr(Qr):fr(Jr)}());const e=(await $r).encode(r.data,r.width,r.height,n);if(!e)throw new Error("Encoding error.");return e.buffer}(r,n),Zr=["triangle","catrom","mitchell","lanczos3","hqx"],Kr={avif:{meta:r,...f},browserGIF:{meta:n,...l},browserJPEG:{meta:e,...d},browserPNG:{meta:t,...p},jxl:{meta:o,...h},mozJPEG:{meta:i,...v},oxiPNG:{meta:u,...m},webP:{meta:c,...g},wp2:{meta:s,...y}},rn={quantize:{enabled:!1,zx:0,maxNumColors:256,dither:1},resize:{enabled:!1,width:1,height:1,method:"lanczos3",fitMethod:"stretch",premultiply:!0,linearRGB:!0}},nn={rotate:{rotate:0}},en=function(r){var n,e;(r=void 0!==(r=r||{})?r:{}).ready=new Promise((function(r,t){n=r,e=t}));var t,o={};for(t in r)r.hasOwnProperty(t)&&(o[t]=r[t]);var i,u=[],c="";c=self.location.href,c=0!==(c="file:///D:/altri/squoosh-web/squoosh-browser/codecs/avif/dec/avif_dec.js").indexOf("blob:")?c.substr(0,c.lastIndexOf("/")+1):"",i=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)};var s=r.print||console.log.bind(console),f=r.printErr||console.warn.bind(console);for(t in o)o.hasOwnProperty(t)&&(r[t]=o[t]);o=null,r.arguments&&(u=r.arguments),r.thisProgram&&r.thisProgram,r.quit&&r.quit;var l,d,p=0;r.wasmBinary&&(l=r.wasmBinary),r.noExitRuntime,"object"!=typeof WebAssembly&&q("no native wasm support detected");var h=!1,v=new TextDecoder("utf8");function m(r,n){if(!r)return"";for(var e=r+n,t=r;!(t>=e)&&w[t];)++t;return v.decode(w.subarray(r,t))}var g,y,w,_,b,A,T,C,E,k=new TextDecoder("utf-16le");function x(r,n){for(var e=r,t=e>>1,a=t+n/2;!(t>=a)&&b[t];)++t;return e=t<<1,k.decode(w.subarray(r,e))}function W(r,n,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=n,a=(e-=2)<2*r.length?e/2:r.length,o=0;o<a;++o){var i=r.charCodeAt(o);_[n>>1]=i,n+=2}return _[n>>1]=0,n-t}function P(r){return 2*r.length}function S(r,n){for(var e=0,t="";!(e>=n/4);){var a=A[r+4*e>>2];if(0==a)break;if(++e,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function F(r,n,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=n,a=t+e-4,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),A[n>>2]=i,(n+=4)+4>a)break}return A[n>>2]=0,n-t}function R(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&++e,n+=4}return n}function I(n){g=n,r.HEAP8=y=new Int8Array(n),r.HEAP16=_=new Int16Array(n),r.HEAP32=A=new Int32Array(n),r.HEAPU8=w=new Uint8Array(n),r.HEAPU16=b=new Uint16Array(n),r.HEAPU32=T=new Uint32Array(n),r.HEAPF32=C=new Float32Array(n),r.HEAPF64=E=new Float64Array(n)}r.INITIAL_MEMORY;var j,M,O=[],D=[],U=[],B=0,H=null,L=null;function q(n){r.onAbort&&r.onAbort(n),f(n+=""),h=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(n);throw e(t),t}function N(r){return r.startsWith("data:application/octet-stream;base64,")}if(r.preloadedImages={},r.preloadedAudios={},r.locateFile)N(V="avif_dec.wasm")||(M=V,V=r.locateFile?r.locateFile(M,c):c+M);else var V=new URL(a(585),a.b).toString();function z(r){try{if(r==V&&l)return new Uint8Array(l);if(i)return i(r);throw"both async and sync fetching of the wasm failed"}catch(r){q(r)}}function G(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?j.get(t)():j.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(r)}}function Y(r){switch(r){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+r)}}var Q=void 0;function J(r){for(var n="",e=r;w[e];)n+=Q[w[e++]];return n}var $={},X={},Z={};function K(r){if(void 0===r)return"_unknown";var n=(r=r.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return n>=48&&n<=57?"_"+r:r}function rr(r,n){return r=K(r),new Function("body","return function "+r+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(n)}function nr(r,n){var e=rr(n,(function(r){this.name=n,this.message=r;var e=new Error(r).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var er=void 0;function tr(r){throw new er(r)}var ar=void 0;function or(r){throw new ar(r)}function ir(r,n,e){if(e=e||{},!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=n.name;if(r||tr('type "'+t+'" must have a positive integer typeid pointer'),X.hasOwnProperty(r)){if(e.ignoreDuplicateRegistrations)return;tr("Cannot register type '"+t+"' twice")}if(X[r]=n,delete Z[r],$.hasOwnProperty(r)){var a=$[r];delete $[r],a.forEach((function(r){r()}))}}var ur=[],cr=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function sr(r){r>4&&0==--cr[r].refcount&&(cr[r]=void 0,ur.push(r))}function fr(r){switch(r){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=ur.length?ur.pop():cr.length;return cr[n]={refcount:1,value:r},n}}function lr(r){return this.fromWireType(T[r>>2])}function dr(r){if(null===r)return"null";var n=typeof r;return"object"===n||"array"===n||"function"===n?r.toString():""+r}function pr(r,n){switch(n){case 2:return function(r){return this.fromWireType(C[r>>2])};case 3:return function(r){return this.fromWireType(E[r>>3])};default:throw new TypeError("Unknown float type: "+r)}}function hr(r){for(;r.length;){var n=r.pop();r.pop()(n)}}function vr(n,e,t){return n.includes("j")?function(n,e,t){var a=r["dynCall_"+n];return t&&t.length?a.apply(null,[e].concat(t)):a.call(null,e)}(n,e,t):j.get(e).apply(null,t)}var mr=void 0;function gr(r){var n=Pr(r),e=J(n);return Wr(n),e}function yr(r,n,e){switch(n){case 0:return e?function(r){return y[r]}:function(r){return w[r]};case 1:return e?function(r){return _[r>>1]}:function(r){return b[r>>1]};case 2:return e?function(r){return A[r>>2]}:function(r){return T[r>>2]};default:throw new TypeError("Unknown integer type: "+r)}}var wr={};function _r(){return"object"==typeof globalThis?globalThis:Function("return this")()}function br(r,n){var e=X[r];return void 0===e&&tr(n+" has unknown type "+gr(r)),e}var Ar={};function Tr(r){try{return d.grow(r-g.byteLength+65535>>>16),I(d.buffer),1}catch(r){}}var Cr={mappings:{},buffers:[null,[],[]],printChar:function(r,n){var e=Cr.buffers[r];0===n||10===n?((1===r?s:f)(function(r,n,e){for(var t=0;r[t]&&!(t>=NaN);)++t;return v.decode(r.subarray?r.subarray(0,t):new Uint8Array(r.slice(0,t)))}(e)),e.length=0):e.push(n)},varargs:void 0,get:function(){return Cr.varargs+=4,A[Cr.varargs-4>>2]},getStr:function(r){return m(r)},get64:function(r,n){return r}};!function(){for(var r=new Array(256),n=0;n<256;++n)r[n]=String.fromCharCode(n);Q=r}(),er=r.BindingError=nr(Error,"BindingError"),ar=r.InternalError=nr(Error,"InternalError"),r.count_emval_handles=function(){for(var r=0,n=5;n<cr.length;++n)void 0!==cr[n]&&++r;return r},r.get_first_emval=function(){for(var r=5;r<cr.length;++r)if(void 0!==cr[r])return cr[r];return null},mr=r.UnboundTypeError=nr(Error,"UnboundTypeError");var Er,kr={j:function(r,n){},v:function(r,n,e,t,a){},r:function(r,n,e,t,a){var o=Y(e);ir(r,{name:n=J(n),fromWireType:function(r){return!!r},toWireType:function(r,n){return n?t:a},argPackAdvance:8,readValueFromPointer:function(r){var t;if(1===e)t=y;else if(2===e)t=_;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+n);t=A}return this.fromWireType(t[r>>o])},destructorFunction:null})},B:function(r,n){ir(r,{name:n=J(n),fromWireType:function(r){var n=cr[r].value;return sr(r),n},toWireType:function(r,n){return fr(n)},argPackAdvance:8,readValueFromPointer:lr,destructorFunction:null})},q:function(r,n,e){var t=Y(e);ir(r,{name:n=J(n),fromWireType:function(r){return r},toWireType:function(r,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+dr(n)+'" to '+this.name);return n},argPackAdvance:8,readValueFromPointer:pr(n,t),destructorFunction:null})},t:function(n,e,t,a,o,i){var u=function(r,n){for(var e=[],t=0;t<r;t++)e.push(A[(n>>2)+t]);return e}(e,t);n=J(n),o=function(r,n){var e,t,a,o=(r=J(r)).includes("j")?(e=r,t=n,a=[],function(){a.length=arguments.length;for(var r=0;r<arguments.length;r++)a[r]=arguments[r];return vr(e,t,a)}):j.get(n);return"function"!=typeof o&&tr("unknown function pointer with signature "+r+": "+n),o}(a,o),function(n,e,t){r.hasOwnProperty(n)?((void 0===t||void 0!==r[n].overloadTable&&void 0!==r[n].overloadTable[t])&&tr("Cannot register public name '"+n+"' twice"),function(r,n,e){if(void 0===r[n].overloadTable){var t=r[n];r[n]=function(){return r[n].overloadTable.hasOwnProperty(arguments.length)||tr("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+r[n].overloadTable+")!"),r[n].overloadTable[arguments.length].apply(this,arguments)},r[n].overloadTable=[],r[n].overloadTable[t.argCount]=t}}(r,n,n),r.hasOwnProperty(t)&&tr("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),r[n].overloadTable[t]=e):(r[n]=e,void 0!==t&&(r[n].numArguments=t))}(n,(function(){!function(r,n){var e=[],t={};throw n.forEach((function r(n){t[n]||X[n]||(Z[n]?Z[n].forEach(r):(e.push(n),t[n]=!0))})),new mr(r+": "+e.map(gr).join([", "]))}("Cannot call "+n+" due to unbound types",u)}),e-1),function(t,a,u){function c(a){var u=function(t){var a=[t[0],null].concat(t.slice(1));return function(n,e,t){r.hasOwnProperty(n)||or("Replacing nonexistant public symbol"),void 0!==r[n].overloadTable&&void 0!==t?r[n].overloadTable[t]=e:(r[n]=e,r[n].argCount=t)}(n,function(r,n,e,t,a){var o=n.length;o<2&&tr("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==n[1]&&null!==e,u=!1,c=1;c<n.length;++c)if(null!==n[c]&&void 0===n[c].destructorFunction){u=!0;break}var s="void"!==n[0].name,f="",l="";for(c=0;c<o-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+K(r)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+r+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[tr,t,a,hr,n[0],n[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<o-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+n[c+2].name+"\n",h.push("argType"+c),v.push(n[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<n.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==n[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+n[c].name+"\n",h.push(m+"_dtor"),v.push(n[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(r,n){if(!(r instanceof Function))throw new TypeError("new_ called with constructor type "+typeof r+" which is not a function");var e=rr(r.name||"unknownFunctionName",(function(){}));e.prototype=r.prototype;var t=new e,a=r.apply(t,n);return a instanceof Object?a:t}(Function,h).apply(null,v)}(n,a,null,o,i),e-1),[]}(a);u.length!==t.length&&or("Mismatched type converter count");for(var c=0;c<t.length;++c)ir(t[c],u[c])}t.forEach((function(r){Z[r]=a}));var s=new Array(a.length),f=[],l=0;a.forEach((function(r,n){X.hasOwnProperty(r)?s[n]=X[r]:(f.push(r),$.hasOwnProperty(r)||($[r]=[]),$[r].push((function(){s[n]=X[r],++l===f.length&&c(s)})))})),0===f.length&&c(s)}([],u)},e:function(r,n,e,t,a){n=J(n),-1===a&&(a=4294967295);var o=Y(e),i=function(r){return r};if(0===t){var u=32-8*e;i=function(r){return r<<u>>>u}}var c=n.includes("unsigned");ir(r,{name:n,fromWireType:i,toWireType:function(r,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+dr(e)+'" to '+this.name);if(e<t||e>a)throw new TypeError('Passing a number "'+dr(e)+'" from JS side to C/C++ side to an argument of type "'+n+'", which is outside the valid range ['+t+", "+a+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:yr(n,o,0!==t),destructorFunction:null})},d:function(r,n,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function a(r){var n=T,e=n[r>>=2],a=n[r+1];return new t(g,a,e)}ir(r,{name:e=J(e),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},m:function(r,n){var e="std::string"===(n=J(n));ir(r,{name:n,fromWireType:function(r){var n,t=T[r>>2];if(e)for(var a=r+4,o=0;o<=t;++o){var i=r+4+o;if(o==t||0==w[i]){var u=m(a,i-a);void 0===n?n=u:(n+=String.fromCharCode(0),n+=u),a=i+1}}else{var c=new Array(t);for(o=0;o<t;++o)c[o]=String.fromCharCode(w[r+4+o]);n=c.join("")}return Wr(r),n},toWireType:function(r,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var t="string"==typeof n;t||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||tr("Cannot pass non-string to std::string");var a=(e&&t?function(){return function(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&r.charCodeAt(++e)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n}(n)}:function(){return n.length})(),o=xr(4+a+1);if(T[o>>2]=a,e&&t)!function(r,n,e,t){if(!(t>0))return 0;for(var a=e+t-1,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),i<=127){if(e>=a)break;n[e++]=i}else if(i<=2047){if(e+1>=a)break;n[e++]=192|i>>6,n[e++]=128|63&i}else if(i<=65535){if(e+2>=a)break;n[e++]=224|i>>12,n[e++]=128|i>>6&63,n[e++]=128|63&i}else{if(e+3>=a)break;n[e++]=240|i>>18,n[e++]=128|i>>12&63,n[e++]=128|i>>6&63,n[e++]=128|63&i}}n[e]=0}(n,w,o+4,a+1);else if(t)for(var i=0;i<a;++i){var u=n.charCodeAt(i);u>255&&(Wr(o),tr("String has UTF-16 code units that do not fit in 8 bits")),w[o+4+i]=u}else for(i=0;i<a;++i)w[o+4+i]=n[i];return null!==r&&r.push(Wr,o),o},argPackAdvance:8,readValueFromPointer:lr,destructorFunction:function(r){Wr(r)}})},l:function(r,n,e){var t,a,o,i,u;e=J(e),2===n?(t=x,a=W,i=P,o=function(){return b},u=1):4===n&&(t=S,a=F,i=R,o=function(){return T},u=2),ir(r,{name:e,fromWireType:function(r){for(var e,a=T[r>>2],i=o(),c=r+4,s=0;s<=a;++s){var f=r+4+s*n;if(s==a||0==i[f>>u]){var l=t(c,f-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=f+n}}return Wr(r),e},toWireType:function(r,t){"string"!=typeof t&&tr("Cannot pass non-string to C++ string type "+e);var o=i(t),c=xr(4+o+n);return T[c>>2]=o>>u,a(t,c+4,o+n),null!==r&&r.push(Wr,c),c},argPackAdvance:8,readValueFromPointer:lr,destructorFunction:function(r){Wr(r)}})},s:function(r,n){ir(r,{isVoid:!0,name:n=J(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(r,n){}})},h:sr,i:function(r){return 0===r?fr(_r()):(r=void 0===(e=wr[n=r])?J(n):e,fr(_r()[r]));var n,e},n:function(r){r>4&&(cr[r].refcount+=1)},o:function(n,e,t,a){n=function(r){return r||tr("Cannot use deleted val. handle = "+r),cr[r].value}(n);var o=Ar[e];return o||(o=function(n){for(var e="",t=0;t<n;++t)e+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+n+"(constructor, argTypes, args) {\n";for(t=0;t<n;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(br,r,fr)}(e),Ar[e]=o),o(n,t,a)},a:function(){q()},g:function(r,n){return function(r,n){throw Rr(r,n||1),"longjmp"}(r,n)},y:function(r,n,e){w.copyWithin(r,n,n+e)},k:function(r){var n,e=w.length,t=2147483648;if((r>>>=0)>t)return!1;for(var a=1;a<=4;a*=2){var o=e*(1+.2/a);if(o=Math.min(o,r+100663296),Tr(Math.min(t,((n=Math.max(r,o))%65536>0&&(n+=65536-n%65536),n))))return!0}return!1},A:function(r){return 0},u:function(r,n,e,t,a){},z:function(r,n,e,t){for(var a=0,o=0;o<e;o++){for(var i=A[n+8*o>>2],u=A[n+(8*o+4)>>2],c=0;c<u;c++)Cr.printChar(r,w[i+c]);a+=u}return A[t>>2]=a,0},b:function(){return p},f:function(r,n,e){var t=Sr();try{return j.get(r)(n,e)}catch(r){if(Fr(t),r!==r+0&&"longjmp"!==r)throw r;Rr(1,0)}},w:function(r,n,e,t,a){var o=Sr();try{return j.get(r)(n,e,t,a)}catch(r){if(Fr(o),r!==r+0&&"longjmp"!==r)throw r;Rr(1,0)}},p:function(r,n,e,t,a){var o=Sr();try{j.get(r)(n,e,t,a)}catch(r){if(Fr(o),r!==r+0&&"longjmp"!==r)throw r;Rr(1,0)}},x:function(r,n,e,t,a,o,i,u){var c=Sr();try{j.get(r)(n,e,t,a,o,i,u)}catch(r){if(Fr(c),r!==r+0&&"longjmp"!==r)throw r;Rr(1,0)}},c:function(r){p=r}},xr=(function(){var n={a:kr};function t(n,e){var t,a=n.exports;r.asm=a,I((d=r.asm.C).buffer),j=r.asm.L,t=r.asm.D,D.unshift(t),function(n){if(B--,r.monitorRunDependencies&&r.monitorRunDependencies(B),0==B&&(null!==H&&(clearInterval(H),H=null),L)){var e=L;L=null,e()}}()}function a(r){t(r.instance)}function o(r){return(l||"function"!=typeof fetch?Promise.resolve().then((function(){return z(V)})):fetch(V,{credentials:"same-origin"}).then((function(r){if(!r.ok)throw"failed to load wasm binary file at '"+V+"'";return r.arrayBuffer()})).catch((function(){return z(V)}))).then((function(r){return WebAssembly.instantiate(r,n)})).then(r,(function(r){f("failed to asynchronously prepare wasm: "+r),q(r)}))}if(B++,r.monitorRunDependencies&&r.monitorRunDependencies(B),r.instantiateWasm)try{return r.instantiateWasm(n,t)}catch(r){return f("Module.instantiateWasm callback failed with error: "+r),!1}(l||"function"!=typeof WebAssembly.instantiateStreaming||N(V)||"function"!=typeof fetch?o(a):fetch(V,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,n).then(a,(function(r){return f("wasm streaming compile failed: "+r),f("falling back to ArrayBuffer instantiation"),o(a)}))}))).catch(e)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.D).apply(null,arguments)},r._malloc=function(){return(xr=r._malloc=r.asm.E).apply(null,arguments)}),Wr=r._free=function(){return(Wr=r._free=r.asm.F).apply(null,arguments)},Pr=r.___getTypeName=function(){return(Pr=r.___getTypeName=r.asm.G).apply(null,arguments)},Sr=(r.___embind_register_native_and_builtin_types=function(){return(r.___embind_register_native_and_builtin_types=r.asm.H).apply(null,arguments)},r.stackSave=function(){return(Sr=r.stackSave=r.asm.I).apply(null,arguments)}),Fr=r.stackRestore=function(){return(Fr=r.stackRestore=r.asm.J).apply(null,arguments)},Rr=r._setThrew=function(){return(Rr=r._setThrew=r.asm.K).apply(null,arguments)};function Ir(e){function t(){Er||(Er=!0,r.calledRun=!0,h||(G(D),n(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)n=r.postRun.shift(),U.unshift(n);var n;G(U)}()))}e=e||u,B>0||(function(){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)n=r.preRun.shift(),O.unshift(n);var n;G(O)}(),B>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),t()}),1)):t()))}if(r.dynCall_iiijii=function(){return(r.dynCall_iiijii=r.asm.M).apply(null,arguments)},r.dynCall_jiji=function(){return(r.dynCall_jiji=r.asm.N).apply(null,arguments)},L=function r(){Er||Ir(),Er||(L=r)},r.run=Ir,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return Ir(),r.ready};let tn;const an=function(r){var n,e;(r=void 0!==(r=r||{})?r:{}).ready=new Promise((function(r,t){n=r,e=t}));var t,o={};for(t in r)r.hasOwnProperty(t)&&(o[t]=r[t]);var i,u=[],c="./this.program",s="";s=self.location.href,s=0!==(s="file:///D:/altri/squoosh-web/squoosh-browser/codecs/jxl/dec/jxl_dec.js").indexOf("blob:")?s.substr(0,s.lastIndexOf("/")+1):"",i=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)};var f,l,d=r.print||console.log.bind(console),p=r.printErr||console.warn.bind(console);for(t in o)o.hasOwnProperty(t)&&(r[t]=o[t]);o=null,r.arguments&&(u=r.arguments),r.thisProgram&&(c=r.thisProgram),r.quit&&r.quit,r.wasmBinary&&(f=r.wasmBinary),r.noExitRuntime,"object"!=typeof WebAssembly&&q("no native wasm support detected");var h=!1,v=new TextDecoder("utf8");function m(r,n){if(!r)return"";for(var e=r+n,t=r;!(t>=e)&&w[t];)++t;return v.decode(w.subarray(r,t))}var g,y,w,_,b,A,T,C,E,k=new TextDecoder("utf-16le");function x(r,n){for(var e=r,t=e>>1,a=t+n/2;!(t>=a)&&b[t];)++t;return e=t<<1,k.decode(w.subarray(r,e))}function W(r,n,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=n,a=(e-=2)<2*r.length?e/2:r.length,o=0;o<a;++o){var i=r.charCodeAt(o);_[n>>1]=i,n+=2}return _[n>>1]=0,n-t}function P(r){return 2*r.length}function S(r,n){for(var e=0,t="";!(e>=n/4);){var a=A[r+4*e>>2];if(0==a)break;if(++e,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function F(r,n,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=n,a=t+e-4,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),A[n>>2]=i,(n+=4)+4>a)break}return A[n>>2]=0,n-t}function R(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&++e,n+=4}return n}function I(n){g=n,r.HEAP8=y=new Int8Array(n),r.HEAP16=_=new Int16Array(n),r.HEAP32=A=new Int32Array(n),r.HEAPU8=w=new Uint8Array(n),r.HEAPU16=b=new Uint16Array(n),r.HEAPU32=T=new Uint32Array(n),r.HEAPF32=C=new Float32Array(n),r.HEAPF64=E=new Float64Array(n)}r.INITIAL_MEMORY;var j,M,O=[],D=[],U=[],B=0,H=null,L=null;function q(n){r.onAbort&&r.onAbort(n),p(n+=""),h=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(n);throw e(t),t}function N(r){return r.startsWith("data:application/octet-stream;base64,")}if(r.preloadedImages={},r.preloadedAudios={},r.locateFile)N(V="jxl_dec.wasm")||(M=V,V=r.locateFile?r.locateFile(M,s):s+M);else var V=new URL(a(280),a.b).toString();function z(r){try{if(r==V&&f)return new Uint8Array(f);if(i)return i(r);throw"both async and sync fetching of the wasm failed"}catch(r){q(r)}}function G(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?j.get(t)():j.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(r)}}function Y(r){switch(r){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+r)}}var Q=void 0;function J(r){for(var n="",e=r;w[e];)n+=Q[w[e++]];return n}var $={},X={},Z={};function K(r){if(void 0===r)return"_unknown";var n=(r=r.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return n>=48&&n<=57?"_"+r:r}function rr(r,n){return r=K(r),new Function("body","return function "+r+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(n)}function nr(r,n){var e=rr(n,(function(r){this.name=n,this.message=r;var e=new Error(r).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var er=void 0;function tr(r){throw new er(r)}var ar=void 0;function or(r){throw new ar(r)}function ir(r,n,e){if(e=e||{},!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=n.name;if(r||tr('type "'+t+'" must have a positive integer typeid pointer'),X.hasOwnProperty(r)){if(e.ignoreDuplicateRegistrations)return;tr("Cannot register type '"+t+"' twice")}if(X[r]=n,delete Z[r],$.hasOwnProperty(r)){var a=$[r];delete $[r],a.forEach((function(r){r()}))}}var ur=[],cr=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function sr(r){r>4&&0==--cr[r].refcount&&(cr[r]=void 0,ur.push(r))}function fr(r){switch(r){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=ur.length?ur.pop():cr.length;return cr[n]={refcount:1,value:r},n}}function lr(r){return this.fromWireType(T[r>>2])}function dr(r){if(null===r)return"null";var n=typeof r;return"object"===n||"array"===n||"function"===n?r.toString():""+r}function pr(r,n){switch(n){case 2:return function(r){return this.fromWireType(C[r>>2])};case 3:return function(r){return this.fromWireType(E[r>>3])};default:throw new TypeError("Unknown float type: "+r)}}function hr(r){for(;r.length;){var n=r.pop();r.pop()(n)}}function vr(n,e,t){return n.includes("j")?function(n,e,t){var a=r["dynCall_"+n];return t&&t.length?a.apply(null,[e].concat(t)):a.call(null,e)}(n,e,t):j.get(e).apply(null,t)}var mr=void 0;function gr(r){var n=Fr(r),e=J(n);return Sr(n),e}function yr(r,n,e){switch(n){case 0:return e?function(r){return y[r]}:function(r){return w[r]};case 1:return e?function(r){return _[r>>1]}:function(r){return b[r>>1]};case 2:return e?function(r){return A[r>>2]}:function(r){return T[r>>2]};default:throw new TypeError("Unknown integer type: "+r)}}var wr={};function _r(){return"object"==typeof globalThis?globalThis:Function("return this")()}function br(r,n){var e=X[r];return void 0===e&&tr(n+" has unknown type "+gr(r)),e}var Ar={};function Tr(r){try{return l.grow(r-g.byteLength+65535>>>16),I(l.buffer),1}catch(r){}}var Cr={};function Er(){if(!Er.strings){var r={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:c||"./this.program"};for(var n in Cr)r[n]=Cr[n];var e=[];for(var n in r)e.push(n+"="+r[n]);Er.strings=e}return Er.strings}var kr={mappings:{},buffers:[null,[],[]],printChar:function(r,n){var e=kr.buffers[r];0===n||10===n?((1===r?d:p)(function(r,n,e){for(var t=0;r[t]&&!(t>=NaN);)++t;return v.decode(r.subarray?r.subarray(0,t):new Uint8Array(r.slice(0,t)))}(e)),e.length=0):e.push(n)},varargs:void 0,get:function(){return kr.varargs+=4,A[kr.varargs-4>>2]},getStr:function(r){return m(r)},get64:function(r,n){return r}};!function(){for(var r=new Array(256),n=0;n<256;++n)r[n]=String.fromCharCode(n);Q=r}(),er=r.BindingError=nr(Error,"BindingError"),ar=r.InternalError=nr(Error,"InternalError"),r.count_emval_handles=function(){for(var r=0,n=5;n<cr.length;++n)void 0!==cr[n]&&++r;return r},r.get_first_emval=function(){for(var r=5;r<cr.length;++r)if(void 0!==cr[r])return cr[r];return null},mr=r.UnboundTypeError=nr(Error,"UnboundTypeError");var xr,Wr={l:function(r,n){},q:function(r,n,e,t,a){},m:function(r,n,e,t,a){var o=Y(e);ir(r,{name:n=J(n),fromWireType:function(r){return!!r},toWireType:function(r,n){return n?t:a},argPackAdvance:8,readValueFromPointer:function(r){var t;if(1===e)t=y;else if(2===e)t=_;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+n);t=A}return this.fromWireType(t[r>>o])},destructorFunction:null})},x:function(r,n){ir(r,{name:n=J(n),fromWireType:function(r){var n=cr[r].value;return sr(r),n},toWireType:function(r,n){return fr(n)},argPackAdvance:8,readValueFromPointer:lr,destructorFunction:null})},j:function(r,n,e){var t=Y(e);ir(r,{name:n=J(n),fromWireType:function(r){return r},toWireType:function(r,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+dr(n)+'" to '+this.name);return n},argPackAdvance:8,readValueFromPointer:pr(n,t),destructorFunction:null})},o:function(n,e,t,a,o,i){var u=function(r,n){for(var e=[],t=0;t<r;t++)e.push(A[(n>>2)+t]);return e}(e,t);n=J(n),o=function(r,n){var e,t,a,o=(r=J(r)).includes("j")?(e=r,t=n,a=[],function(){a.length=arguments.length;for(var r=0;r<arguments.length;r++)a[r]=arguments[r];return vr(e,t,a)}):j.get(n);return"function"!=typeof o&&tr("unknown function pointer with signature "+r+": "+n),o}(a,o),function(n,e,t){r.hasOwnProperty(n)?((void 0===t||void 0!==r[n].overloadTable&&void 0!==r[n].overloadTable[t])&&tr("Cannot register public name '"+n+"' twice"),function(r,n,e){if(void 0===r[n].overloadTable){var t=r[n];r[n]=function(){return r[n].overloadTable.hasOwnProperty(arguments.length)||tr("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+r[n].overloadTable+")!"),r[n].overloadTable[arguments.length].apply(this,arguments)},r[n].overloadTable=[],r[n].overloadTable[t.argCount]=t}}(r,n,n),r.hasOwnProperty(t)&&tr("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),r[n].overloadTable[t]=e):(r[n]=e,void 0!==t&&(r[n].numArguments=t))}(n,(function(){!function(r,n){var e=[],t={};throw n.forEach((function r(n){t[n]||X[n]||(Z[n]?Z[n].forEach(r):(e.push(n),t[n]=!0))})),new mr(r+": "+e.map(gr).join([", "]))}("Cannot call "+n+" due to unbound types",u)}),e-1),function(t,a,u){function c(a){var u=function(t){var a=[t[0],null].concat(t.slice(1));return function(n,e,t){r.hasOwnProperty(n)||or("Replacing nonexistant public symbol"),void 0!==r[n].overloadTable&&void 0!==t?r[n].overloadTable[t]=e:(r[n]=e,r[n].argCount=t)}(n,function(r,n,e,t,a){var o=n.length;o<2&&tr("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==n[1]&&null!==e,u=!1,c=1;c<n.length;++c)if(null!==n[c]&&void 0===n[c].destructorFunction){u=!0;break}var s="void"!==n[0].name,f="",l="";for(c=0;c<o-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+K(r)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+r+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[tr,t,a,hr,n[0],n[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<o-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+n[c+2].name+"\n",h.push("argType"+c),v.push(n[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<n.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==n[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+n[c].name+"\n",h.push(m+"_dtor"),v.push(n[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(r,n){if(!(r instanceof Function))throw new TypeError("new_ called with constructor type "+typeof r+" which is not a function");var e=rr(r.name||"unknownFunctionName",(function(){}));e.prototype=r.prototype;var t=new e,a=r.apply(t,n);return a instanceof Object?a:t}(Function,h).apply(null,v)}(n,a,null,o,i),e-1),[]}(a);u.length!==t.length&&or("Mismatched type converter count");for(var c=0;c<t.length;++c)ir(t[c],u[c])}t.forEach((function(r){Z[r]=a}));var s=new Array(a.length),f=[],l=0;a.forEach((function(r,n){X.hasOwnProperty(r)?s[n]=X[r]:(f.push(r),$.hasOwnProperty(r)||($[r]=[]),$[r].push((function(){s[n]=X[r],++l===f.length&&c(s)})))})),0===f.length&&c(s)}([],u)},c:function(r,n,e,t,a){n=J(n),-1===a&&(a=4294967295);var o=Y(e),i=function(r){return r};if(0===t){var u=32-8*e;i=function(r){return r<<u>>>u}}var c=n.includes("unsigned");ir(r,{name:n,fromWireType:i,toWireType:function(r,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+dr(e)+'" to '+this.name);if(e<t||e>a)throw new TypeError('Passing a number "'+dr(e)+'" from JS side to C/C++ side to an argument of type "'+n+'", which is outside the valid range ['+t+", "+a+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:yr(n,o,0!==t),destructorFunction:null})},b:function(r,n,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function a(r){var n=T,e=n[r>>=2],a=n[r+1];return new t(g,a,e)}ir(r,{name:e=J(e),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},g:function(r,n){var e="std::string"===(n=J(n));ir(r,{name:n,fromWireType:function(r){var n,t=T[r>>2];if(e)for(var a=r+4,o=0;o<=t;++o){var i=r+4+o;if(o==t||0==w[i]){var u=m(a,i-a);void 0===n?n=u:(n+=String.fromCharCode(0),n+=u),a=i+1}}else{var c=new Array(t);for(o=0;o<t;++o)c[o]=String.fromCharCode(w[r+4+o]);n=c.join("")}return Sr(r),n},toWireType:function(r,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var t="string"==typeof n;t||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||tr("Cannot pass non-string to std::string");var a=(e&&t?function(){return function(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&r.charCodeAt(++e)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n}(n)}:function(){return n.length})(),o=Pr(4+a+1);if(T[o>>2]=a,e&&t)!function(r,n,e,t){if(!(t>0))return 0;for(var a=e+t-1,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),i<=127){if(e>=a)break;n[e++]=i}else if(i<=2047){if(e+1>=a)break;n[e++]=192|i>>6,n[e++]=128|63&i}else if(i<=65535){if(e+2>=a)break;n[e++]=224|i>>12,n[e++]=128|i>>6&63,n[e++]=128|63&i}else{if(e+3>=a)break;n[e++]=240|i>>18,n[e++]=128|i>>12&63,n[e++]=128|i>>6&63,n[e++]=128|63&i}}n[e]=0}(n,w,o+4,a+1);else if(t)for(var i=0;i<a;++i){var u=n.charCodeAt(i);u>255&&(Sr(o),tr("String has UTF-16 code units that do not fit in 8 bits")),w[o+4+i]=u}else for(i=0;i<a;++i)w[o+4+i]=n[i];return null!==r&&r.push(Sr,o),o},argPackAdvance:8,readValueFromPointer:lr,destructorFunction:function(r){Sr(r)}})},f:function(r,n,e){var t,a,o,i,u;e=J(e),2===n?(t=x,a=W,i=P,o=function(){return b},u=1):4===n&&(t=S,a=F,i=R,o=function(){return T},u=2),ir(r,{name:e,fromWireType:function(r){for(var e,a=T[r>>2],i=o(),c=r+4,s=0;s<=a;++s){var f=r+4+s*n;if(s==a||0==i[f>>u]){var l=t(c,f-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=f+n}}return Sr(r),e},toWireType:function(r,t){"string"!=typeof t&&tr("Cannot pass non-string to C++ string type "+e);var o=i(t),c=Pr(4+o+n);return T[c>>2]=o>>u,a(t,c+4,o+n),null!==r&&r.push(Sr,c),c},argPackAdvance:8,readValueFromPointer:lr,destructorFunction:function(r){Sr(r)}})},n:function(r,n){ir(r,{isVoid:!0,name:n=J(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(r,n){}})},d:sr,k:function(r){return 0===r?fr(_r()):(r=void 0===(e=wr[n=r])?J(n):e,fr(_r()[r]));var n,e},h:function(r){r>4&&(cr[r].refcount+=1)},i:function(n,e,t,a){n=function(r){return r||tr("Cannot use deleted val. handle = "+r),cr[r].value}(n);var o=Ar[e];return o||(o=function(n){for(var e="",t=0;t<n;++t)e+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+n+"(constructor, argTypes, args) {\n";for(t=0;t<n;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(br,r,fr)}(e),Ar[e]=o),o(n,t,a)},a:function(){q()},s:function(r,n,e){w.copyWithin(r,n,n+e)},e:function(r){var n,e=w.length,t=2147483648;if((r>>>=0)>t)return!1;for(var a=1;a<=4;a*=2){var o=e*(1+.2/a);if(o=Math.min(o,r+100663296),Tr(Math.min(t,((n=Math.max(r,o))%65536>0&&(n+=65536-n%65536),n))))return!0}return!1},t:function(r,n){var e=0;return Er().forEach((function(t,a){var o=n+e;A[r+4*a>>2]=o,function(r,n,e){for(var t=0;t<r.length;++t)y[n++>>0]=r.charCodeAt(t);y[n>>0]=0}(t,o),e+=t.length+1})),0},u:function(r,n){var e=Er();A[r>>2]=e.length;var t=0;return e.forEach((function(r){t+=r.length+1})),A[n>>2]=t,0},w:function(r){return 0},p:function(r,n,e,t,a){},v:function(r,n,e,t){for(var a=0,o=0;o<e;o++){for(var i=A[n+8*o>>2],u=A[n+(8*o+4)>>2],c=0;c<u;c++)kr.printChar(r,w[i+c]);a+=u}return A[t>>2]=a,0},r:function(r){}},Pr=(function(){var n={a:Wr};function t(n,e){var t,a=n.exports;r.asm=a,I((l=r.asm.y).buffer),j=r.asm.E,t=r.asm.z,D.unshift(t),function(n){if(B--,r.monitorRunDependencies&&r.monitorRunDependencies(B),0==B&&(null!==H&&(clearInterval(H),H=null),L)){var e=L;L=null,e()}}()}function a(r){t(r.instance)}function o(r){return(f||"function"!=typeof fetch?Promise.resolve().then((function(){return z(V)})):fetch(V,{credentials:"same-origin"}).then((function(r){if(!r.ok)throw"failed to load wasm binary file at '"+V+"'";return r.arrayBuffer()})).catch((function(){return z(V)}))).then((function(r){return WebAssembly.instantiate(r,n)})).then(r,(function(r){p("failed to asynchronously prepare wasm: "+r),q(r)}))}if(B++,r.monitorRunDependencies&&r.monitorRunDependencies(B),r.instantiateWasm)try{return r.instantiateWasm(n,t)}catch(r){return p("Module.instantiateWasm callback failed with error: "+r),!1}(f||"function"!=typeof WebAssembly.instantiateStreaming||N(V)||"function"!=typeof fetch?o(a):fetch(V,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,n).then(a,(function(r){return p("wasm streaming compile failed: "+r),p("falling back to ArrayBuffer instantiation"),o(a)}))}))).catch(e)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.z).apply(null,arguments)},r._malloc=function(){return(Pr=r._malloc=r.asm.A).apply(null,arguments)}),Sr=r._free=function(){return(Sr=r._free=r.asm.B).apply(null,arguments)},Fr=r.___getTypeName=function(){return(Fr=r.___getTypeName=r.asm.C).apply(null,arguments)};function Rr(e){function t(){xr||(xr=!0,r.calledRun=!0,h||(G(D),n(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)n=r.postRun.shift(),U.unshift(n);var n;G(U)}()))}e=e||u,B>0||(function(){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)n=r.preRun.shift(),O.unshift(n);var n;G(O)}(),B>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),t()}),1)):t()))}if(r.___embind_register_native_and_builtin_types=function(){return(r.___embind_register_native_and_builtin_types=r.asm.D).apply(null,arguments)},r.dynCall_iiji=function(){return(r.dynCall_iiji=r.asm.F).apply(null,arguments)},r.dynCall_jiji=function(){return(r.dynCall_jiji=r.asm.G).apply(null,arguments)},L=function r(){xr||Rr(),xr||(L=r)},r.run=Rr,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return Rr(),r.ready};let on;const un=function(r){var n,e;(r=void 0!==(r=r||{})?r:{}).ready=new Promise((function(r,t){n=r,e=t}));var t,o={};for(t in r)r.hasOwnProperty(t)&&(o[t]=r[t]);var i,u=[],c="";c=self.location.href,c=0!==(c="file:///D:/altri/squoosh-web/squoosh-browser/codecs/webp/dec/webp_dec.js").indexOf("blob:")?c.substr(0,c.lastIndexOf("/")+1):"",i=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)},r.print||console.log.bind(console);var s,f,l=r.printErr||console.warn.bind(console);for(t in o)o.hasOwnProperty(t)&&(r[t]=o[t]);o=null,r.arguments&&(u=r.arguments),r.thisProgram&&r.thisProgram,r.quit&&r.quit,r.wasmBinary&&(s=r.wasmBinary),r.noExitRuntime,"object"!=typeof WebAssembly&&H("no native wasm support detected");var d=!1,p=new TextDecoder("utf8");function h(r,n){if(!r)return"";for(var e=r+n,t=r;!(t>=e)&&g[t];)++t;return p.decode(g.subarray(r,t))}var v,m,g,y,w,_,b,A,T,C=new TextDecoder("utf-16le");function E(r,n){for(var e=r,t=e>>1,a=t+n/2;!(t>=a)&&w[t];)++t;return e=t<<1,C.decode(g.subarray(r,e))}function k(r,n,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=n,a=(e-=2)<2*r.length?e/2:r.length,o=0;o<a;++o){var i=r.charCodeAt(o);y[n>>1]=i,n+=2}return y[n>>1]=0,n-t}function x(r){return 2*r.length}function W(r,n){for(var e=0,t="";!(e>=n/4);){var a=_[r+4*e>>2];if(0==a)break;if(++e,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function P(r,n,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=n,a=t+e-4,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),_[n>>2]=i,(n+=4)+4>a)break}return _[n>>2]=0,n-t}function S(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&++e,n+=4}return n}function F(n){v=n,r.HEAP8=m=new Int8Array(n),r.HEAP16=y=new Int16Array(n),r.HEAP32=_=new Int32Array(n),r.HEAPU8=g=new Uint8Array(n),r.HEAPU16=w=new Uint16Array(n),r.HEAPU32=b=new Uint32Array(n),r.HEAPF32=A=new Float32Array(n),r.HEAPF64=T=new Float64Array(n)}r.INITIAL_MEMORY;var R,I,j=[],M=[],O=[],D=0,U=null,B=null;function H(n){r.onAbort&&r.onAbort(n),l(n+=""),d=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(n);throw e(t),t}function L(r){return r.startsWith("data:application/octet-stream;base64,")}if(r.preloadedImages={},r.preloadedAudios={},r.locateFile)L(q="webp_dec.wasm")||(I=q,q=r.locateFile?r.locateFile(I,c):c+I);else var q=new URL(a(505),a.b).toString();function N(r){try{if(r==q&&s)return new Uint8Array(s);if(i)return i(r);throw"both async and sync fetching of the wasm failed"}catch(r){H(r)}}function V(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?R.get(t)():R.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(r)}}function z(r){switch(r){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+r)}}var G=void 0;function Y(r){for(var n="",e=r;g[e];)n+=G[g[e++]];return n}var Q={},J={},$={};function X(r){if(void 0===r)return"_unknown";var n=(r=r.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return n>=48&&n<=57?"_"+r:r}function Z(r,n){return r=X(r),new Function("body","return function "+r+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(n)}function K(r,n){var e=Z(n,(function(r){this.name=n,this.message=r;var e=new Error(r).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var rr=void 0;function nr(r){throw new rr(r)}var er=void 0;function tr(r){throw new er(r)}function ar(r,n,e){if(e=e||{},!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=n.name;if(r||nr('type "'+t+'" must have a positive integer typeid pointer'),J.hasOwnProperty(r)){if(e.ignoreDuplicateRegistrations)return;nr("Cannot register type '"+t+"' twice")}if(J[r]=n,delete $[r],Q.hasOwnProperty(r)){var a=Q[r];delete Q[r],a.forEach((function(r){r()}))}}var or=[],ir=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function ur(r){r>4&&0==--ir[r].refcount&&(ir[r]=void 0,or.push(r))}function cr(r){switch(r){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=or.length?or.pop():ir.length;return ir[n]={refcount:1,value:r},n}}function sr(r){return this.fromWireType(b[r>>2])}function fr(r){if(null===r)return"null";var n=typeof r;return"object"===n||"array"===n||"function"===n?r.toString():""+r}function lr(r,n){switch(n){case 2:return function(r){return this.fromWireType(A[r>>2])};case 3:return function(r){return this.fromWireType(T[r>>3])};default:throw new TypeError("Unknown float type: "+r)}}function dr(r){for(;r.length;){var n=r.pop();r.pop()(n)}}function pr(n,e,t){return n.includes("j")?function(n,e,t){var a=r["dynCall_"+n];return t&&t.length?a.apply(null,[e].concat(t)):a.call(null,e)}(n,e,t):R.get(e).apply(null,t)}var hr=void 0;function vr(r){var n=kr(r),e=Y(n);return Er(n),e}function mr(r,n,e){switch(n){case 0:return e?function(r){return m[r]}:function(r){return g[r]};case 1:return e?function(r){return y[r>>1]}:function(r){return w[r>>1]};case 2:return e?function(r){return _[r>>2]}:function(r){return b[r>>2]};default:throw new TypeError("Unknown integer type: "+r)}}var gr={};function yr(){return"object"==typeof globalThis?globalThis:Function("return this")()}function wr(r,n){var e=J[r];return void 0===e&&nr(n+" has unknown type "+vr(r)),e}var _r={};function br(r){try{return f.grow(r-v.byteLength+65535>>>16),F(f.buffer),1}catch(r){}}!function(){for(var r=new Array(256),n=0;n<256;++n)r[n]=String.fromCharCode(n);G=r}(),rr=r.BindingError=K(Error,"BindingError"),er=r.InternalError=K(Error,"InternalError"),r.count_emval_handles=function(){for(var r=0,n=5;n<ir.length;++n)void 0!==ir[n]&&++r;return r},r.get_first_emval=function(){for(var r=5;r<ir.length;++r)if(void 0!==ir[r])return ir[r];return null},hr=r.UnboundTypeError=K(Error,"UnboundTypeError");var Ar,Tr={e:function(r,n){},p:function(r,n,e,t,a){},n:function(r,n,e,t,a){var o=z(e);ar(r,{name:n=Y(n),fromWireType:function(r){return!!r},toWireType:function(r,n){return n?t:a},argPackAdvance:8,readValueFromPointer:function(r){var t;if(1===e)t=m;else if(2===e)t=y;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+n);t=_}return this.fromWireType(t[r>>o])},destructorFunction:null})},r:function(r,n){ar(r,{name:n=Y(n),fromWireType:function(r){var n=ir[r].value;return ur(r),n},toWireType:function(r,n){return cr(n)},argPackAdvance:8,readValueFromPointer:sr,destructorFunction:null})},m:function(r,n,e){var t=z(e);ar(r,{name:n=Y(n),fromWireType:function(r){return r},toWireType:function(r,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+fr(n)+'" to '+this.name);return n},argPackAdvance:8,readValueFromPointer:lr(n,t),destructorFunction:null})},i:function(n,e,t,a,o,i){var u=function(r,n){for(var e=[],t=0;t<r;t++)e.push(_[(n>>2)+t]);return e}(e,t);n=Y(n),o=function(r,n){var e,t,a,o=(r=Y(r)).includes("j")?(e=r,t=n,a=[],function(){a.length=arguments.length;for(var r=0;r<arguments.length;r++)a[r]=arguments[r];return pr(e,t,a)}):R.get(n);return"function"!=typeof o&&nr("unknown function pointer with signature "+r+": "+n),o}(a,o),function(n,e,t){r.hasOwnProperty(n)?((void 0===t||void 0!==r[n].overloadTable&&void 0!==r[n].overloadTable[t])&&nr("Cannot register public name '"+n+"' twice"),function(r,n,e){if(void 0===r[n].overloadTable){var t=r[n];r[n]=function(){return r[n].overloadTable.hasOwnProperty(arguments.length)||nr("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+r[n].overloadTable+")!"),r[n].overloadTable[arguments.length].apply(this,arguments)},r[n].overloadTable=[],r[n].overloadTable[t.argCount]=t}}(r,n,n),r.hasOwnProperty(t)&&nr("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),r[n].overloadTable[t]=e):(r[n]=e,void 0!==t&&(r[n].numArguments=t))}(n,(function(){!function(r,n){var e=[],t={};throw n.forEach((function r(n){t[n]||J[n]||($[n]?$[n].forEach(r):(e.push(n),t[n]=!0))})),new hr(r+": "+e.map(vr).join([", "]))}("Cannot call "+n+" due to unbound types",u)}),e-1),function(t,a,u){function c(a){var u=function(t){var a=[t[0],null].concat(t.slice(1));return function(n,e,t){r.hasOwnProperty(n)||tr("Replacing nonexistant public symbol"),void 0!==r[n].overloadTable&&void 0!==t?r[n].overloadTable[t]=e:(r[n]=e,r[n].argCount=t)}(n,function(r,n,e,t,a){var o=n.length;o<2&&nr("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==n[1]&&null!==e,u=!1,c=1;c<n.length;++c)if(null!==n[c]&&void 0===n[c].destructorFunction){u=!0;break}var s="void"!==n[0].name,f="",l="";for(c=0;c<o-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+X(r)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+r+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[nr,t,a,dr,n[0],n[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<o-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+n[c+2].name+"\n",h.push("argType"+c),v.push(n[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<n.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==n[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+n[c].name+"\n",h.push(m+"_dtor"),v.push(n[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(r,n){if(!(r instanceof Function))throw new TypeError("new_ called with constructor type "+typeof r+" which is not a function");var e=Z(r.name||"unknownFunctionName",(function(){}));e.prototype=r.prototype;var t=new e,a=r.apply(t,n);return a instanceof Object?a:t}(Function,h).apply(null,v)}(n,a,null,o,i),e-1),[]}(a);u.length!==t.length&&tr("Mismatched type converter count");for(var c=0;c<t.length;++c)ar(t[c],u[c])}t.forEach((function(r){$[r]=a}));var s=new Array(a.length),f=[],l=0;a.forEach((function(r,n){J.hasOwnProperty(r)?s[n]=J[r]:(f.push(r),Q.hasOwnProperty(r)||(Q[r]=[]),Q[r].push((function(){s[n]=J[r],++l===f.length&&c(s)})))})),0===f.length&&c(s)}([],u)},b:function(r,n,e,t,a){n=Y(n),-1===a&&(a=4294967295);var o=z(e),i=function(r){return r};if(0===t){var u=32-8*e;i=function(r){return r<<u>>>u}}var c=n.includes("unsigned");ar(r,{name:n,fromWireType:i,toWireType:function(r,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+fr(e)+'" to '+this.name);if(e<t||e>a)throw new TypeError('Passing a number "'+fr(e)+'" from JS side to C/C++ side to an argument of type "'+n+'", which is outside the valid range ['+t+", "+a+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:mr(n,o,0!==t),destructorFunction:null})},a:function(r,n,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function a(r){var n=b,e=n[r>>=2],a=n[r+1];return new t(v,a,e)}ar(r,{name:e=Y(e),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},h:function(r,n){var e="std::string"===(n=Y(n));ar(r,{name:n,fromWireType:function(r){var n,t=b[r>>2];if(e)for(var a=r+4,o=0;o<=t;++o){var i=r+4+o;if(o==t||0==g[i]){var u=h(a,i-a);void 0===n?n=u:(n+=String.fromCharCode(0),n+=u),a=i+1}}else{var c=new Array(t);for(o=0;o<t;++o)c[o]=String.fromCharCode(g[r+4+o]);n=c.join("")}return Er(r),n},toWireType:function(r,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var t="string"==typeof n;t||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||nr("Cannot pass non-string to std::string");var a=(e&&t?function(){return function(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&r.charCodeAt(++e)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n}(n)}:function(){return n.length})(),o=Cr(4+a+1);if(b[o>>2]=a,e&&t)!function(r,n,e,t){if(!(t>0))return 0;for(var a=e+t-1,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),i<=127){if(e>=a)break;n[e++]=i}else if(i<=2047){if(e+1>=a)break;n[e++]=192|i>>6,n[e++]=128|63&i}else if(i<=65535){if(e+2>=a)break;n[e++]=224|i>>12,n[e++]=128|i>>6&63,n[e++]=128|63&i}else{if(e+3>=a)break;n[e++]=240|i>>18,n[e++]=128|i>>12&63,n[e++]=128|i>>6&63,n[e++]=128|63&i}}n[e]=0}(n,g,o+4,a+1);else if(t)for(var i=0;i<a;++i){var u=n.charCodeAt(i);u>255&&(Er(o),nr("String has UTF-16 code units that do not fit in 8 bits")),g[o+4+i]=u}else for(i=0;i<a;++i)g[o+4+i]=n[i];return null!==r&&r.push(Er,o),o},argPackAdvance:8,readValueFromPointer:sr,destructorFunction:function(r){Er(r)}})},f:function(r,n,e){var t,a,o,i,u;e=Y(e),2===n?(t=E,a=k,i=x,o=function(){return w},u=1):4===n&&(t=W,a=P,i=S,o=function(){return b},u=2),ar(r,{name:e,fromWireType:function(r){for(var e,a=b[r>>2],i=o(),c=r+4,s=0;s<=a;++s){var f=r+4+s*n;if(s==a||0==i[f>>u]){var l=t(c,f-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=f+n}}return Er(r),e},toWireType:function(r,t){"string"!=typeof t&&nr("Cannot pass non-string to C++ string type "+e);var o=i(t),c=Cr(4+o+n);return b[c>>2]=o>>u,a(t,c+4,o+n),null!==r&&r.push(Er,c),c},argPackAdvance:8,readValueFromPointer:sr,destructorFunction:function(r){Er(r)}})},o:function(r,n){ar(r,{isVoid:!0,name:n=Y(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(r,n){}})},c:ur,d:function(r){return 0===r?cr(yr()):(r=void 0===(e=gr[n=r])?Y(n):e,cr(yr()[r]));var n,e},j:function(r){r>4&&(ir[r].refcount+=1)},k:function(n,e,t,a){n=function(r){return r||nr("Cannot use deleted val. handle = "+r),ir[r].value}(n);var o=_r[e];return o||(o=function(n){for(var e="",t=0;t<n;++t)e+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+n+"(constructor, argTypes, args) {\n";for(t=0;t<n;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(wr,r,cr)}(e),_r[e]=o),o(n,t,a)},l:function(){H()},q:function(r,n,e){g.copyWithin(r,n,n+e)},g:function(r){var n,e=g.length,t=2147483648;if((r>>>=0)>t)return!1;for(var a=1;a<=4;a*=2){var o=e*(1+.2/a);if(o=Math.min(o,r+100663296),br(Math.min(t,((n=Math.max(r,o))%65536>0&&(n+=65536-n%65536),n))))return!0}return!1}},Cr=(function(){var n={a:Tr};function t(n,e){var t,a=n.exports;r.asm=a,F((f=r.asm.s).buffer),R=r.asm.y,t=r.asm.t,M.unshift(t),function(n){if(D--,r.monitorRunDependencies&&r.monitorRunDependencies(D),0==D&&(null!==U&&(clearInterval(U),U=null),B)){var e=B;B=null,e()}}()}function a(r){t(r.instance)}function o(r){return(s||"function"!=typeof fetch?Promise.resolve().then((function(){return N(q)})):fetch(q,{credentials:"same-origin"}).then((function(r){if(!r.ok)throw"failed to load wasm binary file at '"+q+"'";return r.arrayBuffer()})).catch((function(){return N(q)}))).then((function(r){return WebAssembly.instantiate(r,n)})).then(r,(function(r){l("failed to asynchronously prepare wasm: "+r),H(r)}))}if(D++,r.monitorRunDependencies&&r.monitorRunDependencies(D),r.instantiateWasm)try{return r.instantiateWasm(n,t)}catch(r){return l("Module.instantiateWasm callback failed with error: "+r),!1}(s||"function"!=typeof WebAssembly.instantiateStreaming||L(q)||"function"!=typeof fetch?o(a):fetch(q,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,n).then(a,(function(r){return l("wasm streaming compile failed: "+r),l("falling back to ArrayBuffer instantiation"),o(a)}))}))).catch(e)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.t).apply(null,arguments)},r._malloc=function(){return(Cr=r._malloc=r.asm.u).apply(null,arguments)}),Er=r._free=function(){return(Er=r._free=r.asm.v).apply(null,arguments)},kr=r.___getTypeName=function(){return(kr=r.___getTypeName=r.asm.w).apply(null,arguments)};function xr(e){function t(){Ar||(Ar=!0,r.calledRun=!0,d||(V(M),n(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)n=r.postRun.shift(),O.unshift(n);var n;V(O)}()))}e=e||u,D>0||(function(){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)n=r.preRun.shift(),j.unshift(n);var n;V(j)}(),D>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),t()}),1)):t()))}if(r.___embind_register_native_and_builtin_types=function(){return(r.___embind_register_native_and_builtin_types=r.asm.x).apply(null,arguments)},B=function r(){Ar||xr(),Ar||(B=r)},r.run=xr,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return xr(),r.ready};let cn;const sn=function(r){var n,e;(r=void 0!==(r=r||{})?r:{}).ready=new Promise((function(r,t){n=r,e=t}));var t,o={};for(t in r)r.hasOwnProperty(t)&&(o[t]=r[t]);var i,u=[],c="";c=self.location.href,c=0!==(c="file:///D:/altri/squoosh-web/squoosh-browser/codecs/wp2/dec/wp2_dec.js").indexOf("blob:")?c.substr(0,c.lastIndexOf("/")+1):"",i=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)};var s,f,l=r.print||console.log.bind(console),d=r.printErr||console.warn.bind(console);for(t in o)o.hasOwnProperty(t)&&(r[t]=o[t]);o=null,r.arguments&&(u=r.arguments),r.thisProgram&&r.thisProgram,r.quit&&r.quit,r.wasmBinary&&(s=r.wasmBinary),r.noExitRuntime,"object"!=typeof WebAssembly&&L("no native wasm support detected");var p=!1,h=new TextDecoder("utf8");function v(r,n){if(!r)return"";for(var e=r+n,t=r;!(t>=e)&&y[t];)++t;return h.decode(y.subarray(r,t))}var m,g,y,w,_,b,A,T,C,E=new TextDecoder("utf-16le");function k(r,n){for(var e=r,t=e>>1,a=t+n/2;!(t>=a)&&_[t];)++t;return e=t<<1,E.decode(y.subarray(r,e))}function x(r,n,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=n,a=(e-=2)<2*r.length?e/2:r.length,o=0;o<a;++o){var i=r.charCodeAt(o);w[n>>1]=i,n+=2}return w[n>>1]=0,n-t}function W(r){return 2*r.length}function P(r,n){for(var e=0,t="";!(e>=n/4);){var a=b[r+4*e>>2];if(0==a)break;if(++e,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function S(r,n,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=n,a=t+e-4,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),b[n>>2]=i,(n+=4)+4>a)break}return b[n>>2]=0,n-t}function F(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&++e,n+=4}return n}function R(n){m=n,r.HEAP8=g=new Int8Array(n),r.HEAP16=w=new Int16Array(n),r.HEAP32=b=new Int32Array(n),r.HEAPU8=y=new Uint8Array(n),r.HEAPU16=_=new Uint16Array(n),r.HEAPU32=A=new Uint32Array(n),r.HEAPF32=T=new Float32Array(n),r.HEAPF64=C=new Float64Array(n)}r.INITIAL_MEMORY;var I,j,M=[],O=[],D=[],U=0,B=null,H=null;function L(n){r.onAbort&&r.onAbort(n),d(n+=""),p=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(n);throw e(t),t}function q(r){return r.startsWith("data:application/octet-stream;base64,")}if(r.preloadedImages={},r.preloadedAudios={},r.locateFile)q(N="wp2_dec.wasm")||(j=N,N=r.locateFile?r.locateFile(j,c):c+j);else var N=new URL(a(389),a.b).toString();function V(r){try{if(r==N&&s)return new Uint8Array(s);if(i)return i(r);throw"both async and sync fetching of the wasm failed"}catch(r){L(r)}}function z(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?I.get(t)():I.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(r)}}function G(r){this.excPtr=r,this.ptr=r-16,this.set_type=function(r){b[this.ptr+8>>2]=r},this.get_type=function(){return b[this.ptr+8>>2]},this.set_destructor=function(r){b[this.ptr+0>>2]=r},this.get_destructor=function(){return b[this.ptr+0>>2]},this.set_refcount=function(r){b[this.ptr+4>>2]=r},this.set_caught=function(r){r=r?1:0,g[this.ptr+12>>0]=r},this.get_caught=function(){return 0!=g[this.ptr+12>>0]},this.set_rethrown=function(r){r=r?1:0,g[this.ptr+13>>0]=r},this.get_rethrown=function(){return 0!=g[this.ptr+13>>0]},this.init=function(r,n){this.set_type(r),this.set_destructor(n),this.set_refcount(0),this.set_caught(!1),this.set_rethrown(!1)},this.add_ref=function(){var r=b[this.ptr+4>>2];b[this.ptr+4>>2]=r+1},this.release_ref=function(){var r=b[this.ptr+4>>2];return b[this.ptr+4>>2]=r-1,1===r}}function Y(r){switch(r){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+r)}}var Q=void 0;function J(r){for(var n="",e=r;y[e];)n+=Q[y[e++]];return n}var $={},X={},Z={};function K(r){if(void 0===r)return"_unknown";var n=(r=r.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return n>=48&&n<=57?"_"+r:r}function rr(r,n){return r=K(r),new Function("body","return function "+r+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(n)}function nr(r,n){var e=rr(n,(function(r){this.name=n,this.message=r;var e=new Error(r).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var er=void 0;function tr(r){throw new er(r)}var ar=void 0;function or(r){throw new ar(r)}function ir(r,n,e){if(e=e||{},!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=n.name;if(r||tr('type "'+t+'" must have a positive integer typeid pointer'),X.hasOwnProperty(r)){if(e.ignoreDuplicateRegistrations)return;tr("Cannot register type '"+t+"' twice")}if(X[r]=n,delete Z[r],$.hasOwnProperty(r)){var a=$[r];delete $[r],a.forEach((function(r){r()}))}}var ur=[],cr=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function sr(r){r>4&&0==--cr[r].refcount&&(cr[r]=void 0,ur.push(r))}function fr(r){switch(r){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=ur.length?ur.pop():cr.length;return cr[n]={refcount:1,value:r},n}}function lr(r){return this.fromWireType(A[r>>2])}function dr(r){if(null===r)return"null";var n=typeof r;return"object"===n||"array"===n||"function"===n?r.toString():""+r}function pr(r,n){switch(n){case 2:return function(r){return this.fromWireType(T[r>>2])};case 3:return function(r){return this.fromWireType(C[r>>3])};default:throw new TypeError("Unknown float type: "+r)}}function hr(r){for(;r.length;){var n=r.pop();r.pop()(n)}}function vr(n,e,t){return n.includes("j")?function(n,e,t){var a=r["dynCall_"+n];return t&&t.length?a.apply(null,[e].concat(t)):a.call(null,e)}(n,e,t):I.get(e).apply(null,t)}var mr=void 0;function gr(r){var n=Pr(r),e=J(n);return xr(n),e}function yr(r,n,e){switch(n){case 0:return e?function(r){return g[r]}:function(r){return y[r]};case 1:return e?function(r){return w[r>>1]}:function(r){return _[r>>1]};case 2:return e?function(r){return b[r>>2]}:function(r){return A[r>>2]};default:throw new TypeError("Unknown integer type: "+r)}}var wr={};function _r(){return"object"==typeof globalThis?globalThis:Function("return this")()}function br(r,n){var e=X[r];return void 0===e&&tr(n+" has unknown type "+gr(r)),e}var Ar={};function Tr(r){try{return f.grow(r-m.byteLength+65535>>>16),R(f.buffer),1}catch(r){}}var Cr={mappings:{},buffers:[null,[],[]],printChar:function(r,n){var e=Cr.buffers[r];0===n||10===n?((1===r?l:d)(function(r,n,e){for(var t=0;r[t]&&!(t>=NaN);)++t;return h.decode(r.subarray?r.subarray(0,t):new Uint8Array(r.slice(0,t)))}(e)),e.length=0):e.push(n)},varargs:void 0,get:function(){return Cr.varargs+=4,b[Cr.varargs-4>>2]},getStr:function(r){return v(r)},get64:function(r,n){return r}};!function(){for(var r=new Array(256),n=0;n<256;++n)r[n]=String.fromCharCode(n);Q=r}(),er=r.BindingError=nr(Error,"BindingError"),ar=r.InternalError=nr(Error,"InternalError"),r.count_emval_handles=function(){for(var r=0,n=5;n<cr.length;++n)void 0!==cr[n]&&++r;return r},r.get_first_emval=function(){for(var r=5;r<cr.length;++r)if(void 0!==cr[r])return cr[r];return null},mr=r.UnboundTypeError=nr(Error,"UnboundTypeError");var Er,kr={p:function(r){return Wr(r+16)+16},e:function(r,n){},o:function(r,n,e){throw new G(r).init(n,e),r},r:function(r,n,e,t,a){},m:function(r,n,e,t,a){var o=Y(e);ir(r,{name:n=J(n),fromWireType:function(r){return!!r},toWireType:function(r,n){return n?t:a},argPackAdvance:8,readValueFromPointer:function(r){var t;if(1===e)t=g;else if(2===e)t=w;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+n);t=b}return this.fromWireType(t[r>>o])},destructorFunction:null})},v:function(r,n){ir(r,{name:n=J(n),fromWireType:function(r){var n=cr[r].value;return sr(r),n},toWireType:function(r,n){return fr(n)},argPackAdvance:8,readValueFromPointer:lr,destructorFunction:null})},k:function(r,n,e){var t=Y(e);ir(r,{name:n=J(n),fromWireType:function(r){return r},toWireType:function(r,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+dr(n)+'" to '+this.name);return n},argPackAdvance:8,readValueFromPointer:pr(n,t),destructorFunction:null})},q:function(n,e,t,a,o,i){var u=function(r,n){for(var e=[],t=0;t<r;t++)e.push(b[(n>>2)+t]);return e}(e,t);n=J(n),o=function(r,n){var e,t,a,o=(r=J(r)).includes("j")?(e=r,t=n,a=[],function(){a.length=arguments.length;for(var r=0;r<arguments.length;r++)a[r]=arguments[r];return vr(e,t,a)}):I.get(n);return"function"!=typeof o&&tr("unknown function pointer with signature "+r+": "+n),o}(a,o),function(n,e,t){r.hasOwnProperty(n)?((void 0===t||void 0!==r[n].overloadTable&&void 0!==r[n].overloadTable[t])&&tr("Cannot register public name '"+n+"' twice"),function(r,n,e){if(void 0===r[n].overloadTable){var t=r[n];r[n]=function(){return r[n].overloadTable.hasOwnProperty(arguments.length)||tr("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+r[n].overloadTable+")!"),r[n].overloadTable[arguments.length].apply(this,arguments)},r[n].overloadTable=[],r[n].overloadTable[t.argCount]=t}}(r,n,n),r.hasOwnProperty(t)&&tr("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),r[n].overloadTable[t]=e):(r[n]=e,void 0!==t&&(r[n].numArguments=t))}(n,(function(){!function(r,n){var e=[],t={};throw n.forEach((function r(n){t[n]||X[n]||(Z[n]?Z[n].forEach(r):(e.push(n),t[n]=!0))})),new mr(r+": "+e.map(gr).join([", "]))}("Cannot call "+n+" due to unbound types",u)}),e-1),function(t,a,u){function c(a){var u=function(t){var a=[t[0],null].concat(t.slice(1));return function(n,e,t){r.hasOwnProperty(n)||or("Replacing nonexistant public symbol"),void 0!==r[n].overloadTable&&void 0!==t?r[n].overloadTable[t]=e:(r[n]=e,r[n].argCount=t)}(n,function(r,n,e,t,a){var o=n.length;o<2&&tr("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==n[1]&&null!==e,u=!1,c=1;c<n.length;++c)if(null!==n[c]&&void 0===n[c].destructorFunction){u=!0;break}var s="void"!==n[0].name,f="",l="";for(c=0;c<o-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+K(r)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+r+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[tr,t,a,hr,n[0],n[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<o-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+n[c+2].name+"\n",h.push("argType"+c),v.push(n[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<n.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==n[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+n[c].name+"\n",h.push(m+"_dtor"),v.push(n[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(r,n){if(!(r instanceof Function))throw new TypeError("new_ called with constructor type "+typeof r+" which is not a function");var e=rr(r.name||"unknownFunctionName",(function(){}));e.prototype=r.prototype;var t=new e,a=r.apply(t,n);return a instanceof Object?a:t}(Function,h).apply(null,v)}(n,a,null,o,i),e-1),[]}(a);u.length!==t.length&&or("Mismatched type converter count");for(var c=0;c<t.length;++c)ir(t[c],u[c])}t.forEach((function(r){Z[r]=a}));var s=new Array(a.length),f=[],l=0;a.forEach((function(r,n){X.hasOwnProperty(r)?s[n]=X[r]:(f.push(r),$.hasOwnProperty(r)||($[r]=[]),$[r].push((function(){s[n]=X[r],++l===f.length&&c(s)})))})),0===f.length&&c(s)}([],u)},b:function(r,n,e,t,a){n=J(n),-1===a&&(a=4294967295);var o=Y(e),i=function(r){return r};if(0===t){var u=32-8*e;i=function(r){return r<<u>>>u}}var c=n.includes("unsigned");ir(r,{name:n,fromWireType:i,toWireType:function(r,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+dr(e)+'" to '+this.name);if(e<t||e>a)throw new TypeError('Passing a number "'+dr(e)+'" from JS side to C/C++ side to an argument of type "'+n+'", which is outside the valid range ['+t+", "+a+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:yr(n,o,0!==t),destructorFunction:null})},a:function(r,n,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function a(r){var n=A,e=n[r>>=2],a=n[r+1];return new t(m,a,e)}ir(r,{name:e=J(e),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},l:function(r,n){var e="std::string"===(n=J(n));ir(r,{name:n,fromWireType:function(r){var n,t=A[r>>2];if(e)for(var a=r+4,o=0;o<=t;++o){var i=r+4+o;if(o==t||0==y[i]){var u=v(a,i-a);void 0===n?n=u:(n+=String.fromCharCode(0),n+=u),a=i+1}}else{var c=new Array(t);for(o=0;o<t;++o)c[o]=String.fromCharCode(y[r+4+o]);n=c.join("")}return xr(r),n},toWireType:function(r,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var t="string"==typeof n;t||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||tr("Cannot pass non-string to std::string");var a=(e&&t?function(){return function(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&r.charCodeAt(++e)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n}(n)}:function(){return n.length})(),o=Wr(4+a+1);if(A[o>>2]=a,e&&t)!function(r,n,e,t){if(!(t>0))return 0;for(var a=e+t-1,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),i<=127){if(e>=a)break;n[e++]=i}else if(i<=2047){if(e+1>=a)break;n[e++]=192|i>>6,n[e++]=128|63&i}else if(i<=65535){if(e+2>=a)break;n[e++]=224|i>>12,n[e++]=128|i>>6&63,n[e++]=128|63&i}else{if(e+3>=a)break;n[e++]=240|i>>18,n[e++]=128|i>>12&63,n[e++]=128|i>>6&63,n[e++]=128|63&i}}n[e]=0}(n,y,o+4,a+1);else if(t)for(var i=0;i<a;++i){var u=n.charCodeAt(i);u>255&&(xr(o),tr("String has UTF-16 code units that do not fit in 8 bits")),y[o+4+i]=u}else for(i=0;i<a;++i)y[o+4+i]=n[i];return null!==r&&r.push(xr,o),o},argPackAdvance:8,readValueFromPointer:lr,destructorFunction:function(r){xr(r)}})},g:function(r,n,e){var t,a,o,i,u;e=J(e),2===n?(t=k,a=x,i=W,o=function(){return _},u=1):4===n&&(t=P,a=S,i=F,o=function(){return A},u=2),ir(r,{name:e,fromWireType:function(r){for(var e,a=A[r>>2],i=o(),c=r+4,s=0;s<=a;++s){var f=r+4+s*n;if(s==a||0==i[f>>u]){var l=t(c,f-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=f+n}}return xr(r),e},toWireType:function(r,t){"string"!=typeof t&&tr("Cannot pass non-string to C++ string type "+e);var o=i(t),c=Wr(4+o+n);return A[c>>2]=o>>u,a(t,c+4,o+n),null!==r&&r.push(xr,c),c},argPackAdvance:8,readValueFromPointer:lr,destructorFunction:function(r){xr(r)}})},n:function(r,n){ir(r,{isVoid:!0,name:n=J(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(r,n){}})},c:sr,d:function(r){return 0===r?fr(_r()):(r=void 0===(e=wr[n=r])?J(n):e,fr(_r()[r]));var n,e},h:function(r){r>4&&(cr[r].refcount+=1)},i:function(n,e,t,a){n=function(r){return r||tr("Cannot use deleted val. handle = "+r),cr[r].value}(n);var o=Ar[e];return o||(o=function(n){for(var e="",t=0;t<n;++t)e+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+n+"(constructor, argTypes, args) {\n";for(t=0;t<n;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(br,r,fr)}(e),Ar[e]=o),o(n,t,a)},j:function(){L()},t:function(r,n,e){y.copyWithin(r,n,n+e)},f:function(r){var n,e=y.length,t=2147483648;if((r>>>=0)>t)return!1;for(var a=1;a<=4;a*=2){var o=e*(1+.2/a);if(o=Math.min(o,r+100663296),Tr(Math.min(t,((n=Math.max(r,o))%65536>0&&(n+=65536-n%65536),n))))return!0}return!1},u:function(r,n,e,t){for(var a=0,o=0;o<e;o++){for(var i=b[n+8*o>>2],u=b[n+(8*o+4)>>2],c=0;c<u;c++)Cr.printChar(r,y[i+c]);a+=u}return b[t>>2]=a,0},s:function(r){}},xr=(function(){var n={a:kr};function t(n,e){var t,a=n.exports;r.asm=a,R((f=r.asm.w).buffer),I=r.asm.C,t=r.asm.x,O.unshift(t),function(n){if(U--,r.monitorRunDependencies&&r.monitorRunDependencies(U),0==U&&(null!==B&&(clearInterval(B),B=null),H)){var e=H;H=null,e()}}()}function a(r){t(r.instance)}function o(r){return(s||"function"!=typeof fetch?Promise.resolve().then((function(){return V(N)})):fetch(N,{credentials:"same-origin"}).then((function(r){if(!r.ok)throw"failed to load wasm binary file at '"+N+"'";return r.arrayBuffer()})).catch((function(){return V(N)}))).then((function(r){return WebAssembly.instantiate(r,n)})).then(r,(function(r){d("failed to asynchronously prepare wasm: "+r),L(r)}))}if(U++,r.monitorRunDependencies&&r.monitorRunDependencies(U),r.instantiateWasm)try{return r.instantiateWasm(n,t)}catch(r){return d("Module.instantiateWasm callback failed with error: "+r),!1}(s||"function"!=typeof WebAssembly.instantiateStreaming||q(N)||"function"!=typeof fetch?o(a):fetch(N,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,n).then(a,(function(r){return d("wasm streaming compile failed: "+r),d("falling back to ArrayBuffer instantiation"),o(a)}))}))).catch(e)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.x).apply(null,arguments)},r._free=function(){return(xr=r._free=r.asm.y).apply(null,arguments)}),Wr=r._malloc=function(){return(Wr=r._malloc=r.asm.z).apply(null,arguments)},Pr=r.___getTypeName=function(){return(Pr=r.___getTypeName=r.asm.A).apply(null,arguments)};function Sr(e){function t(){Er||(Er=!0,r.calledRun=!0,p||(z(O),n(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)n=r.postRun.shift(),D.unshift(n);var n;z(D)}()))}e=e||u,U>0||(function(){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)n=r.preRun.shift(),M.unshift(n);var n;z(M)}(),U>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),t()}),1)):t()))}if(r.___embind_register_native_and_builtin_types=function(){return(r.___embind_register_native_and_builtin_types=r.asm.B).apply(null,arguments)},r.dynCall_jiji=function(){return(r.dynCall_jiji=r.asm.D).apply(null,arguments)},H=function r(){Er||Sr(),Er||(H=r)},r.run=Sr,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return Sr(),r.ready};let fn,ln;function dn(r,n,e,t){const a=e/t;if(a>r/n){const e=r/a;return{sw:r,sh:e,sx:0,sy:(n-e)/2}}const o=n*a;return{sh:n,sw:o,sx:(r-o)/2,sy:0}}let pn=null,hn=0;let vn=null;function mn(){return null!==vn&&vn.buffer===ln.memory.buffer||(vn=new Int32Array(ln.memory.buffer)),vn}let gn=null;const yn=async function r(n){void 0===n&&(n=new URL(a(49),a.b)),("string"==typeof n||"function"==typeof Request&&n instanceof Request||"function"==typeof URL&&n instanceof URL)&&(n=fetch(n));const{instance:e,module:t}=await async function(r,n){if("function"==typeof Response&&r instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(r,n)}catch(n){if("application/wasm"==r.headers.get("Content-Type"))throw n;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",n)}const e=await r.arrayBuffer();return await WebAssembly.instantiate(e,n)}{const e=await WebAssembly.instantiate(r,n);return e instanceof WebAssembly.Instance?{instance:e,module:r}:e}}(await n,{});return ln=e.exports,r.__wbindgen_wasm_module=t,ln};let wn,_n=null;function bn(){return null!==_n&&_n.buffer===wn.memory.buffer||(_n=new Uint32Array(wn.memory.buffer)),_n}let An=0,Tn=null;function Cn(){return null!==Tn&&Tn.buffer===wn.memory.buffer||(Tn=new Int32Array(wn.memory.buffer)),Tn}const En=async function r(n){void 0===n&&(n=new URL(a(91),a.b)),("string"==typeof n||"function"==typeof Request&&n instanceof Request||"function"==typeof URL&&n instanceof URL)&&(n=fetch(n));const{instance:e,module:t}=await async function(r,n){if("function"==typeof Response&&r instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(r,n)}catch(n){if("application/wasm"==r.headers.get("Content-Type"))throw n;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",n)}const e=await r.arrayBuffer();return await WebAssembly.instantiate(e,n)}{const e=await WebAssembly.instantiate(r,n);return e instanceof WebAssembly.Instance?{instance:e,module:r}:e}}(await n,{});return wn=e.exports,r.__wbindgen_wasm_module=t,wn},kn=["triangle","catrom","mitchell","lanczos3"];let xn,Wn;async function Pn(r,n){Wn||(Wn=En()),await Wn;const e=n.width/r.width,t=n.height/r.height,a=Math.max(e,t),o=function(r,{min:n=Number.MIN_VALUE,max:e=Number.MAX_VALUE}){return Math.min(Math.max(r,n),e)}(Math.ceil(a),{min:1,max:4});if(1===o)return r;const i=function(r,n,e,t){try{const l=wn.__wbindgen_add_to_stack_pointer(-16);var a=function(r,n){const e=n(4*r.length);return bn().set(r,e/4),An=r.length,e}(r,wn.__wbindgen_malloc),o=An;wn.resize(l,a,o,n,e,t);var i=Cn()[l/4+0],u=Cn()[l/4+1],c=(s=i,f=u,bn().subarray(s/4,s/4+f)).slice();return wn.__wbindgen_free(i,4*u),c}finally{wn.__wbindgen_add_to_stack_pointer(16)}var s,f}(new Uint32Array(r.data.buffer),r.width,r.height,o);return new ImageData(new Uint8ClampedArray(i.buffer),r.width*o,r.height*o)}async function Sn(r,n){let e=r;if(xn||(xn=yn()),function(r){return"hqx"===r.method}(n)&&(e=await Pn(e,n),n={...n,method:"catrom"}),await xn,"contain"===n.fitMethod){const{sx:t,sy:a,sw:o,sh:i}=dn(r.width,r.height,n.width,n.height);e=function(r,n,e,t,a){const o=new Uint32Array(r.data.buffer);for(let i=0;i<a;i+=1){const a=(i+e)*r.width+n;o.copyWithin(i*t,a,a+t)}return new ImageData(new Uint8ClampedArray(o.buffer.slice(0,t*a*4)),t,a)}(e,Math.round(t),Math.round(a),Math.round(o),Math.round(i))}const t=function(r,n,e,t,a,o,i,u){try{const v=ln.__wbindgen_add_to_stack_pointer(-16);var c=function(r,n){const e=n(1*r.length);return(null!==pn&&pn.buffer===ln.memory.buffer||(pn=new Uint8Array(ln.memory.buffer)),pn).set(r,e/1),hn=r.length,e}(r,ln.__wbindgen_malloc),s=hn;ln.resize(v,c,s,n,e,t,a,o,i,u);var f=mn()[v/4+0],l=mn()[v/4+1],d=(p=f,h=l,(null!==gn&&gn.buffer===ln.memory.buffer||(gn=new Uint8ClampedArray(ln.memory.buffer)),gn).subarray(p/1,p/1+h)).slice();return ln.__wbindgen_free(f,1*l),d}finally{ln.__wbindgen_add_to_stack_pointer(16)}var p,h}(new Uint8Array(e.data.buffer),e.width,e.height,n.width,n.height,kn.indexOf(n.method),n.premultiply,n.linearRGB);return new ImageData(new Uint8ClampedArray(t.buffer),n.width,n.height)}async function Fn(r,n){if("vector"===n.method){if(!r.vectorImage)throw Error("No vector image available");return function(r,n){let e=0,t=0,a=r.width,o=r.height;return"contain"===n.fitMethod&&({sx:e,sy:t,sw:a,sh:o}=dn(a,o,n.width,n.height)),A(r,{sx:e,sy:t,sw:a,sh:o,width:n.width,height:n.height})}(r.vectorImage,n)}return e=n,Zr.includes(e.method)?Sn(r.preprocessed,n):function(r,n){let e=0,t=0,a=r.width,o=r.height;return"contain"===n.fitMethod&&({sx:e,sy:t,sw:a,sh:o}=dn(a,o,n.width,n.height)),function(r,n,e,t,a,o,i,u){const c=document.createElement("canvas");c.width=r.width,c.height=r.height,function(r,n){const e=r.getContext("2d");if(!e)throw Error("Canvas not initialized");e.clearRect(0,0,r.width,r.height),e.putImageData(n,0,0)}(c,r);const s=document.createElement("canvas");s.width=o,s.height=i;const f=s.getContext("2d");if(!f)throw new Error("Could not create canvas context");return"pixelated"===u?f.imageSmoothingEnabled=!1:f.imageSmoothingQuality=u,f.drawImage(c,n,e,t,a,0,0,o,i),f.getImageData(0,0,o,i)}(r,e,t,a,o,n.width,n.height,n.method.slice("browser-".length))}(r.preprocessed,n);var e}const Rn=function(r){var n,e;(r=void 0!==(r=r||{})?r:{}).ready=new Promise((function(r,t){n=r,e=t}));var t,o={};for(t in r)r.hasOwnProperty(t)&&(o[t]=r[t]);var i,u=[],c="";c=self.location.href,c=0!==(c="file:///D:/altri/squoosh-web/squoosh-browser/codecs/imagequant/imagequant.js").indexOf("blob:")?c.substr(0,c.lastIndexOf("/")+1):"",i=function(r){var n=new XMLHttpRequest;return n.open("GET",r,!1),n.responseType="arraybuffer",n.send(null),new Uint8Array(n.response)};var s,f,l=r.print||console.log.bind(console),d=r.printErr||console.warn.bind(console);for(t in o)o.hasOwnProperty(t)&&(r[t]=o[t]);o=null,r.arguments&&(u=r.arguments),r.thisProgram&&r.thisProgram,r.quit&&r.quit,r.wasmBinary&&(s=r.wasmBinary),r.noExitRuntime,"object"!=typeof WebAssembly&&L("no native wasm support detected");var p=!1,h=new TextDecoder("utf8");function v(r,n){if(!r)return"";for(var e=r+n,t=r;!(t>=e)&&y[t];)++t;return h.decode(y.subarray(r,t))}var m,g,y,w,_,b,A,T,C,E=new TextDecoder("utf-16le");function k(r,n){for(var e=r,t=e>>1,a=t+n/2;!(t>=a)&&_[t];)++t;return e=t<<1,E.decode(y.subarray(r,e))}function x(r,n,e){if(void 0===e&&(e=2147483647),e<2)return 0;for(var t=n,a=(e-=2)<2*r.length?e/2:r.length,o=0;o<a;++o){var i=r.charCodeAt(o);w[n>>1]=i,n+=2}return w[n>>1]=0,n-t}function W(r){return 2*r.length}function P(r,n){for(var e=0,t="";!(e>=n/4);){var a=b[r+4*e>>2];if(0==a)break;if(++e,a>=65536){var o=a-65536;t+=String.fromCharCode(55296|o>>10,56320|1023&o)}else t+=String.fromCharCode(a)}return t}function S(r,n,e){if(void 0===e&&(e=2147483647),e<4)return 0;for(var t=n,a=t+e-4,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),b[n>>2]=i,(n+=4)+4>a)break}return b[n>>2]=0,n-t}function F(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&++e,n+=4}return n}function R(n){m=n,r.HEAP8=g=new Int8Array(n),r.HEAP16=w=new Int16Array(n),r.HEAP32=b=new Int32Array(n),r.HEAPU8=y=new Uint8Array(n),r.HEAPU16=_=new Uint16Array(n),r.HEAPU32=A=new Uint32Array(n),r.HEAPF32=T=new Float32Array(n),r.HEAPF64=C=new Float64Array(n)}r.INITIAL_MEMORY;var I,j,M=[],O=[],D=[],U=0,B=null,H=null;function L(n){r.onAbort&&r.onAbort(n),d(n+=""),p=!0,n="abort("+n+"). Build with -s ASSERTIONS=1 for more info.";var t=new WebAssembly.RuntimeError(n);throw e(t),t}function q(r){return r.startsWith("data:application/octet-stream;base64,")}if(r.preloadedImages={},r.preloadedAudios={},r.locateFile)q(N="imagequant.wasm")||(j=N,N=r.locateFile?r.locateFile(j,c):c+j);else var N=new URL(a(388),a.b).toString();function V(r){try{if(r==N&&s)return new Uint8Array(s);if(i)return i(r);throw"both async and sync fetching of the wasm failed"}catch(r){L(r)}}function z(n){for(;n.length>0;){var e=n.shift();if("function"!=typeof e){var t=e.func;"number"==typeof t?void 0===e.arg?I.get(t)():I.get(t)(e.arg):t(void 0===e.arg?null:e.arg)}else e(r)}}function G(r){switch(r){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+r)}}var Y=void 0;function Q(r){for(var n="",e=r;y[e];)n+=Y[y[e++]];return n}var J={},$={},X={};function Z(r){if(void 0===r)return"_unknown";var n=(r=r.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return n>=48&&n<=57?"_"+r:r}function K(r,n){return r=Z(r),new Function("body","return function "+r+'() {\n    "use strict";    return body.apply(this, arguments);\n};\n')(n)}function rr(r,n){var e=K(n,(function(r){this.name=n,this.message=r;var e=new Error(r).stack;void 0!==e&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return e.prototype=Object.create(r.prototype),e.prototype.constructor=e,e.prototype.toString=function(){return void 0===this.message?this.name:this.name+": "+this.message},e}var nr=void 0;function er(r){throw new nr(r)}var tr=void 0;function ar(r){throw new tr(r)}function or(r,n,e){if(e=e||{},!("argPackAdvance"in n))throw new TypeError("registerType registeredInstance requires argPackAdvance");var t=n.name;if(r||er('type "'+t+'" must have a positive integer typeid pointer'),$.hasOwnProperty(r)){if(e.ignoreDuplicateRegistrations)return;er("Cannot register type '"+t+"' twice")}if($[r]=n,delete X[r],J.hasOwnProperty(r)){var a=J[r];delete J[r],a.forEach((function(r){r()}))}}var ir=[],ur=[{},{value:void 0},{value:null},{value:!0},{value:!1}];function cr(r){r>4&&0==--ur[r].refcount&&(ur[r]=void 0,ir.push(r))}function sr(r){switch(r){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:var n=ir.length?ir.pop():ur.length;return ur[n]={refcount:1,value:r},n}}function fr(r){return this.fromWireType(A[r>>2])}function lr(r){if(null===r)return"null";var n=typeof r;return"object"===n||"array"===n||"function"===n?r.toString():""+r}function dr(r,n){switch(n){case 2:return function(r){return this.fromWireType(T[r>>2])};case 3:return function(r){return this.fromWireType(C[r>>3])};default:throw new TypeError("Unknown float type: "+r)}}function pr(r){for(;r.length;){var n=r.pop();r.pop()(n)}}function hr(n,e,t){return n.includes("j")?function(n,e,t){var a=r["dynCall_"+n];return t&&t.length?a.apply(null,[e].concat(t)):a.call(null,e)}(n,e,t):I.get(e).apply(null,t)}var vr=void 0;function mr(r){var n=Wr(r),e=Q(n);return xr(n),e}function gr(r,n,e){switch(n){case 0:return e?function(r){return g[r]}:function(r){return y[r]};case 1:return e?function(r){return w[r>>1]}:function(r){return _[r>>1]};case 2:return e?function(r){return b[r>>2]}:function(r){return A[r>>2]};default:throw new TypeError("Unknown integer type: "+r)}}var yr={};function wr(){return"object"==typeof globalThis?globalThis:Function("return this")()}function _r(r,n){var e=$[r];return void 0===e&&er(n+" has unknown type "+mr(r)),e}var br={};function Ar(r){try{return f.grow(r-m.byteLength+65535>>>16),R(f.buffer),1}catch(r){}}var Tr={mappings:{},buffers:[null,[],[]],printChar:function(r,n){var e=Tr.buffers[r];0===n||10===n?((1===r?l:d)(function(r,n,e){for(var t=0;r[t]&&!(t>=NaN);)++t;return h.decode(r.subarray?r.subarray(0,t):new Uint8Array(r.slice(0,t)))}(e)),e.length=0):e.push(n)},varargs:void 0,get:function(){return Tr.varargs+=4,b[Tr.varargs-4>>2]},getStr:function(r){return v(r)},get64:function(r,n){return r}};!function(){for(var r=new Array(256),n=0;n<256;++n)r[n]=String.fromCharCode(n);Y=r}(),nr=r.BindingError=rr(Error,"BindingError"),tr=r.InternalError=rr(Error,"InternalError"),r.count_emval_handles=function(){for(var r=0,n=5;n<ur.length;++n)void 0!==ur[n]&&++r;return r},r.get_first_emval=function(){for(var r=5;r<ur.length;++r)if(void 0!==ur[r])return ur[r];return null},vr=r.UnboundTypeError=rr(Error,"UnboundTypeError");var Cr,Er={m:function(r,n){},q:function(r,n,e,t,a){},n:function(r,n,e,t,a){var o=G(e);or(r,{name:n=Q(n),fromWireType:function(r){return!!r},toWireType:function(r,n){return n?t:a},argPackAdvance:8,readValueFromPointer:function(r){var t;if(1===e)t=g;else if(2===e)t=w;else{if(4!==e)throw new TypeError("Unknown boolean type size: "+n);t=b}return this.fromWireType(t[r>>o])},destructorFunction:null})},v:function(r,n){or(r,{name:n=Q(n),fromWireType:function(r){var n=ur[r].value;return cr(r),n},toWireType:function(r,n){return sr(n)},argPackAdvance:8,readValueFromPointer:fr,destructorFunction:null})},l:function(r,n,e){var t=G(e);or(r,{name:n=Q(n),fromWireType:function(r){return r},toWireType:function(r,n){if("number"!=typeof n&&"boolean"!=typeof n)throw new TypeError('Cannot convert "'+lr(n)+'" to '+this.name);return n},argPackAdvance:8,readValueFromPointer:dr(n,t),destructorFunction:null})},c:function(n,e,t,a,o,i){var u=function(r,n){for(var e=[],t=0;t<r;t++)e.push(b[(n>>2)+t]);return e}(e,t);n=Q(n),o=function(r,n){var e,t,a,o=(r=Q(r)).includes("j")?(e=r,t=n,a=[],function(){a.length=arguments.length;for(var r=0;r<arguments.length;r++)a[r]=arguments[r];return hr(e,t,a)}):I.get(n);return"function"!=typeof o&&er("unknown function pointer with signature "+r+": "+n),o}(a,o),function(n,e,t){r.hasOwnProperty(n)?((void 0===t||void 0!==r[n].overloadTable&&void 0!==r[n].overloadTable[t])&&er("Cannot register public name '"+n+"' twice"),function(r,n,e){if(void 0===r[n].overloadTable){var t=r[n];r[n]=function(){return r[n].overloadTable.hasOwnProperty(arguments.length)||er("Function '"+e+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+r[n].overloadTable+")!"),r[n].overloadTable[arguments.length].apply(this,arguments)},r[n].overloadTable=[],r[n].overloadTable[t.argCount]=t}}(r,n,n),r.hasOwnProperty(t)&&er("Cannot register multiple overloads of a function with the same number of arguments ("+t+")!"),r[n].overloadTable[t]=e):(r[n]=e,void 0!==t&&(r[n].numArguments=t))}(n,(function(){!function(r,n){var e=[],t={};throw n.forEach((function r(n){t[n]||$[n]||(X[n]?X[n].forEach(r):(e.push(n),t[n]=!0))})),new vr(r+": "+e.map(mr).join([", "]))}("Cannot call "+n+" due to unbound types",u)}),e-1),function(t,a,u){function c(a){var u=function(t){var a=[t[0],null].concat(t.slice(1));return function(n,e,t){r.hasOwnProperty(n)||ar("Replacing nonexistant public symbol"),void 0!==r[n].overloadTable&&void 0!==t?r[n].overloadTable[t]=e:(r[n]=e,r[n].argCount=t)}(n,function(r,n,e,t,a){var o=n.length;o<2&&er("argTypes array size mismatch! Must at least get return value and 'this' types!");for(var i=null!==n[1]&&null!==e,u=!1,c=1;c<n.length;++c)if(null!==n[c]&&void 0===n[c].destructorFunction){u=!0;break}var s="void"!==n[0].name,f="",l="";for(c=0;c<o-2;++c)f+=(0!==c?", ":"")+"arg"+c,l+=(0!==c?", ":"")+"arg"+c+"Wired";var d="return function "+Z(r)+"("+f+") {\nif (arguments.length !== "+(o-2)+") {\nthrowBindingError('function "+r+" called with ' + arguments.length + ' arguments, expected "+(o-2)+" args!');\n}\n";u&&(d+="var destructors = [];\n");var p=u?"destructors":"null",h=["throwBindingError","invoker","fn","runDestructors","retType","classParam"],v=[er,t,a,pr,n[0],n[1]];for(i&&(d+="var thisWired = classParam.toWireType("+p+", this);\n"),c=0;c<o-2;++c)d+="var arg"+c+"Wired = argType"+c+".toWireType("+p+", arg"+c+"); // "+n[c+2].name+"\n",h.push("argType"+c),v.push(n[c+2]);if(i&&(l="thisWired"+(l.length>0?", ":"")+l),d+=(s?"var rv = ":"")+"invoker(fn"+(l.length>0?", ":"")+l+");\n",u)d+="runDestructors(destructors);\n";else for(c=i?1:2;c<n.length;++c){var m=1===c?"thisWired":"arg"+(c-2)+"Wired";null!==n[c].destructorFunction&&(d+=m+"_dtor("+m+"); // "+n[c].name+"\n",h.push(m+"_dtor"),v.push(n[c].destructorFunction))}return s&&(d+="var ret = retType.fromWireType(rv);\nreturn ret;\n"),d+="}\n",h.push(d),function(r,n){if(!(r instanceof Function))throw new TypeError("new_ called with constructor type "+typeof r+" which is not a function");var e=K(r.name||"unknownFunctionName",(function(){}));e.prototype=r.prototype;var t=new e,a=r.apply(t,n);return a instanceof Object?a:t}(Function,h).apply(null,v)}(n,a,null,o,i),e-1),[]}(a);u.length!==t.length&&ar("Mismatched type converter count");for(var c=0;c<t.length;++c)or(t[c],u[c])}t.forEach((function(r){X[r]=a}));var s=new Array(a.length),f=[],l=0;a.forEach((function(r,n){$.hasOwnProperty(r)?s[n]=$[r]:(f.push(r),J.hasOwnProperty(r)||(J[r]=[]),J[r].push((function(){s[n]=$[r],++l===f.length&&c(s)})))})),0===f.length&&c(s)}([],u)},b:function(r,n,e,t,a){n=Q(n),-1===a&&(a=4294967295);var o=G(e),i=function(r){return r};if(0===t){var u=32-8*e;i=function(r){return r<<u>>>u}}var c=n.includes("unsigned");or(r,{name:n,fromWireType:i,toWireType:function(r,e){if("number"!=typeof e&&"boolean"!=typeof e)throw new TypeError('Cannot convert "'+lr(e)+'" to '+this.name);if(e<t||e>a)throw new TypeError('Passing a number "'+lr(e)+'" from JS side to C/C++ side to an argument of type "'+n+'", which is outside the valid range ['+t+", "+a+"]!");return c?e>>>0:0|e},argPackAdvance:8,readValueFromPointer:gr(n,o,0!==t),destructorFunction:null})},a:function(r,n,e){var t=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][n];function a(r){var n=A,e=n[r>>=2],a=n[r+1];return new t(m,a,e)}or(r,{name:e=Q(e),fromWireType:a,argPackAdvance:8,readValueFromPointer:a},{ignoreDuplicateRegistrations:!0})},h:function(r,n){var e="std::string"===(n=Q(n));or(r,{name:n,fromWireType:function(r){var n,t=A[r>>2];if(e)for(var a=r+4,o=0;o<=t;++o){var i=r+4+o;if(o==t||0==y[i]){var u=v(a,i-a);void 0===n?n=u:(n+=String.fromCharCode(0),n+=u),a=i+1}}else{var c=new Array(t);for(o=0;o<t;++o)c[o]=String.fromCharCode(y[r+4+o]);n=c.join("")}return xr(r),n},toWireType:function(r,n){n instanceof ArrayBuffer&&(n=new Uint8Array(n));var t="string"==typeof n;t||n instanceof Uint8Array||n instanceof Uint8ClampedArray||n instanceof Int8Array||er("Cannot pass non-string to std::string");var a=(e&&t?function(){return function(r){for(var n=0,e=0;e<r.length;++e){var t=r.charCodeAt(e);t>=55296&&t<=57343&&(t=65536+((1023&t)<<10)|1023&r.charCodeAt(++e)),t<=127?++n:n+=t<=2047?2:t<=65535?3:4}return n}(n)}:function(){return n.length})(),o=kr(4+a+1);if(A[o>>2]=a,e&&t)!function(r,n,e,t){if(!(t>0))return 0;for(var a=e+t-1,o=0;o<r.length;++o){var i=r.charCodeAt(o);if(i>=55296&&i<=57343&&(i=65536+((1023&i)<<10)|1023&r.charCodeAt(++o)),i<=127){if(e>=a)break;n[e++]=i}else if(i<=2047){if(e+1>=a)break;n[e++]=192|i>>6,n[e++]=128|63&i}else if(i<=65535){if(e+2>=a)break;n[e++]=224|i>>12,n[e++]=128|i>>6&63,n[e++]=128|63&i}else{if(e+3>=a)break;n[e++]=240|i>>18,n[e++]=128|i>>12&63,n[e++]=128|i>>6&63,n[e++]=128|63&i}}n[e]=0}(n,y,o+4,a+1);else if(t)for(var i=0;i<a;++i){var u=n.charCodeAt(i);u>255&&(xr(o),er("String has UTF-16 code units that do not fit in 8 bits")),y[o+4+i]=u}else for(i=0;i<a;++i)y[o+4+i]=n[i];return null!==r&&r.push(xr,o),o},argPackAdvance:8,readValueFromPointer:fr,destructorFunction:function(r){xr(r)}})},f:function(r,n,e){var t,a,o,i,u;e=Q(e),2===n?(t=k,a=x,i=W,o=function(){return _},u=1):4===n&&(t=P,a=S,i=F,o=function(){return A},u=2),or(r,{name:e,fromWireType:function(r){for(var e,a=A[r>>2],i=o(),c=r+4,s=0;s<=a;++s){var f=r+4+s*n;if(s==a||0==i[f>>u]){var l=t(c,f-c);void 0===e?e=l:(e+=String.fromCharCode(0),e+=l),c=f+n}}return xr(r),e},toWireType:function(r,t){"string"!=typeof t&&er("Cannot pass non-string to C++ string type "+e);var o=i(t),c=kr(4+o+n);return A[c>>2]=o>>u,a(t,c+4,o+n),null!==r&&r.push(xr,c),c},argPackAdvance:8,readValueFromPointer:fr,destructorFunction:function(r){xr(r)}})},o:function(r,n){or(r,{isVoid:!0,name:n=Q(n),argPackAdvance:0,fromWireType:function(){},toWireType:function(r,n){}})},d:cr,k:function(r){return 0===r?sr(wr()):(r=void 0===(e=yr[n=r])?Q(n):e,sr(wr()[r]));var n,e},i:function(r){r>4&&(ur[r].refcount+=1)},j:function(n,e,t,a){n=function(r){return r||er("Cannot use deleted val. handle = "+r),ur[r].value}(n);var o=br[e];return o||(o=function(n){for(var e="",t=0;t<n;++t)e+=(0!==t?", ":"")+"arg"+t;var a="return function emval_allocator_"+n+"(constructor, argTypes, args) {\n";for(t=0;t<n;++t)a+="var argType"+t+" = requireRegisteredType(Module['HEAP32'][(argTypes >>> 2) + "+t+'], "parameter '+t+'");\nvar arg'+t+" = argType"+t+".readValueFromPointer(args);\nargs += argType"+t+"['argPackAdvance'];\n";return a+="var obj = new constructor("+e+");\nreturn __emval_register(obj);\n}\n",new Function("requireRegisteredType","Module","__emval_register",a)(_r,r,sr)}(e),br[e]=o),o(n,t,a)},g:function(){L()},s:function(r,n,e){y.copyWithin(r,n,n+e)},e:function(r){var n,e=y.length,t=2147483648;if((r>>>=0)>t)return!1;for(var a=1;a<=4;a*=2){var o=e*(1+.2/a);if(o=Math.min(o,r+100663296),Ar(Math.min(t,((n=Math.max(r,o))%65536>0&&(n+=65536-n%65536),n))))return!0}return!1},u:function(r){return 0},p:function(r,n,e,t,a){},t:function(r,n,e,t){for(var a=0,o=0;o<e;o++){for(var i=b[n+8*o>>2],u=b[n+(8*o+4)>>2],c=0;c<u;c++)Tr.printChar(r,y[i+c]);a+=u}return b[t>>2]=a,0},r:function(r){}},kr=(function(){var n={a:Er};function t(n,e){var t,a=n.exports;r.asm=a,R((f=r.asm.w).buffer),I=r.asm.C,t=r.asm.x,O.unshift(t),function(n){if(U--,r.monitorRunDependencies&&r.monitorRunDependencies(U),0==U&&(null!==B&&(clearInterval(B),B=null),H)){var e=H;H=null,e()}}()}function a(r){t(r.instance)}function o(r){return(s||"function"!=typeof fetch?Promise.resolve().then((function(){return V(N)})):fetch(N,{credentials:"same-origin"}).then((function(r){if(!r.ok)throw"failed to load wasm binary file at '"+N+"'";return r.arrayBuffer()})).catch((function(){return V(N)}))).then((function(r){return WebAssembly.instantiate(r,n)})).then(r,(function(r){d("failed to asynchronously prepare wasm: "+r),L(r)}))}if(U++,r.monitorRunDependencies&&r.monitorRunDependencies(U),r.instantiateWasm)try{return r.instantiateWasm(n,t)}catch(r){return d("Module.instantiateWasm callback failed with error: "+r),!1}(s||"function"!=typeof WebAssembly.instantiateStreaming||q(N)||"function"!=typeof fetch?o(a):fetch(N,{credentials:"same-origin"}).then((function(r){return WebAssembly.instantiateStreaming(r,n).then(a,(function(r){return d("wasm streaming compile failed: "+r),d("falling back to ArrayBuffer instantiation"),o(a)}))}))).catch(e)}(),r.___wasm_call_ctors=function(){return(r.___wasm_call_ctors=r.asm.x).apply(null,arguments)},r._malloc=function(){return(kr=r._malloc=r.asm.y).apply(null,arguments)}),xr=r._free=function(){return(xr=r._free=r.asm.z).apply(null,arguments)},Wr=r.___getTypeName=function(){return(Wr=r.___getTypeName=r.asm.A).apply(null,arguments)};function Pr(e){function t(){Cr||(Cr=!0,r.calledRun=!0,p||(z(O),n(r),r.onRuntimeInitialized&&r.onRuntimeInitialized(),function(){if(r.postRun)for("function"==typeof r.postRun&&(r.postRun=[r.postRun]);r.postRun.length;)n=r.postRun.shift(),D.unshift(n);var n;z(D)}()))}e=e||u,U>0||(function(){if(r.preRun)for("function"==typeof r.preRun&&(r.preRun=[r.preRun]);r.preRun.length;)n=r.preRun.shift(),M.unshift(n);var n;z(M)}(),U>0||(r.setStatus?(r.setStatus("Running..."),setTimeout((function(){setTimeout((function(){r.setStatus("")}),1),t()}),1)):t()))}if(r.___embind_register_native_and_builtin_types=function(){return(r.___embind_register_native_and_builtin_types=r.asm.B).apply(null,arguments)},r.dynCall_jiji=function(){return(r.dynCall_jiji=r.asm.D).apply(null,arguments)},H=function r(){Cr||Pr(),Cr||(H=r)},r.run=Pr,r.preInit)for("function"==typeof r.preInit&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.pop()();return Pr(),r.ready};let In;async function jn(r){const n=await async function(r){const n=await E(r.slice(0,16)),e=Array.from(new Uint8Array(n)).map((r=>String.fromCodePoint(r))).join("");for(const[r,n]of k)if(r.test(e))return n;return""}(r);if(!await function(r){if(!C.has(r)){const n=(async()=>{const n=document.createElement("picture"),e=document.createElement("img"),t=document.createElement("source");return t.srcset="data:,x",t.type=r,n.append(t,e),await 0,!!e.currentSrc})();C.set(r,n)}return C.get(r)}(n))switch(n){case"image/avif":return await async function(r){tn||(tn=fr(en));const[n,e]=await Promise.all([tn,lr(r)]),t=n.decode(e);if(!t)throw new Error("Decoding error");return t}(r);case"image/webp":return await async function(r){cn||(cn=fr(un));const[n,e]=await Promise.all([cn,lr(r)]),t=n.decode(e);if(!t)throw new Error("Decoding error");return t}(r);case"image/jxl":return await async function(r){on||(on=fr(an));const[n,e]=await Promise.all([on,lr(r)]),t=n.decode(e);if(!t)throw new Error("Decoding error");return t}(r);case"image/webp2":return await async function(r){fn||(fn=fr(sn));const[n,e]=await Promise.all([fn,lr(r)]),t=n.decode(e);if(!t)throw new Error("Decoding error");return t}(r)}return await async function(r,n){if(await async function(r){if(!T)return!1;try{return await ImageDecoder.isTypeSupported(r)}catch(r){return!1}}(n))try{return await async function(r,n){if(!T)throw Error("This browser does not support ImageDecoder. This function should not have been called.");const e=new ImageDecoder({type:n,data:new Response(r).body}),{image:t}=await e.decode();return A(t)}(r,n)}catch(r){}return A("createImageBitmap"in self?await createImageBitmap(r):await x(r))}(r,n)}class Mn{file;setting={encoderState:{type:"webP",options:Kr.webP.meta.defaultOptions},processorState:rn,preprocessorState:nn};constructor(r,n){this.file=r,n&&(this.setting=n)}async process(){let r,n;this.file.type.startsWith("image/svg+xml")?(n=await async function(r){const n=new DOMParser,e=await function(r){return new Response(r).text()}(r),t=n.parseFromString(e,"image/svg+xml"),a=t.documentElement;if(a.hasAttribute("width")&&a.hasAttribute("height"))return x(r);const o=a.getAttribute("viewBox");if(null===o)throw Error("SVG must have width/height or viewBox");const i=o.split(/\s+/);a.setAttribute("width",i[2]),a.setAttribute("height",i[3]);const u=(new XMLSerializer).serializeToString(t);return x(new Blob([u],{type:"image/svg+xml"}))}(this.file),r=A(n)):r=await jn(this.file);const e=await async function(r,n){let e=r;return n.rotate.rotate,e}(r,this.setting.preprocessorState),t={file:this.file,decoded:r,vectorImage:n,preprocessed:e},a=await async function(r,n){let e=r.preprocessed;return n.resize.enabled&&(e=await Fn(r,n.resize)),n.quantize.enabled&&(e=await async function(r,n){In||(In=fr(Rn));const e=await In,t=n.zx?e.zx_quantize(r.data,r.width,r.height,n.dither):e.quantize(r.data,r.width,r.height,n.maxNumColors,n.dither);return new ImageData(t,r.width,r.height)}(e,n.quantize)),e}(t,this.setting.processorState);return await async function(r,n,e){const t=Kr[n.type];let a;switch(n.type){case"avif":a=await gr(r,n.options);break;case"browserGIF":a=await wr(r,n.options);break;case"browserJPEG":a=await _r(r,n.options);break;case"browserPNG":a=await br(r,n.options);break;case"jxl":a=await kr(r,n.options);break;case"mozJPEG":a=await Pr(r,n.options);break;case"oxiPNG":a=await qr(r,n.options);break;case"webP":a=await Gr(r,n.options);break;case"wp2":a=await Xr(r,n.options);break;default:a=new Blob}const o=t.meta.mimeType;return new File([a],e.replace(/.[^.]*$/,`.${t.meta.extension}`),{type:o})}(a,this.setting.encoderState,t.file.name)}}var On=a(379),Dn=a.n(On),Un=a(795),Bn=a.n(Un),Hn=a(569),Ln=a.n(Hn),qn=a(565),Nn=a.n(qn),Vn=a(609),zn=a.n(Vn),Gn=a(589),Yn=a.n(Gn),Qn=a(121),Jn={};Jn.styleTagTransform=Yn(),Jn.setAttributes=Nn(),Jn.insert=Ln().bind(null,"head"),Jn.domAPI=Bn(),Jn.insertStyleElement=zn(),Dn()(Qn.Z,Jn),Qn.Z&&Qn.Z.locals&&Qn.Z.locals;const $n={encoderState:{type:"avif",options:{cqLevel:33,cqAlphaLevel:-1,denoiseLevel:0,tileColsLog2:0,tileRowsLog2:0,speed:6,subsample:1,chromaDeltaQ:!1,sharpness:0,tune:1}},preprocessorState:{rotate:{rotate:0}},processorState:{quantize:{enabled:!1,zx:0,maxNumColors:256,dither:1},resize:{enabled:!1,width:1,height:1,method:"lanczos3",fitMethod:"stretch",premultiply:!0,linearRGB:!0}}},Xn={encodeLog(r,n){console.log("Squoosh Browser"),console.log(new Date+`Filename: ${r.size}  (size ${r.size})`),n&&console.log("data",n)},async encoder(r,n=$n){this.encodeLog(r,n);const e=new Mn(r,n),t=await e.process();return this.encodeLog(t),t},downloadBase64Data(r,n){const e=document.createElement("a");e.href=n,e.download=r},setImage(r,n){const e=new Image;e.src=r,document.getElementById(n).appendChild(e)},async changeCallback(r){const n=r.target;n.files?.length&&[...n.files].forEach((r=>{Xn.readImage(r).then((n=>{Xn.loadOriginal(r),Xn.setImage(n.imageSrc,"encoded"),console.log(n)}))}))},async loadOriginal(r){var n=new FileReader;n.onload=function(r){Xn.setImage(r.target.result,"original")},n.readAsDataURL(r)},async readImage(r,n){const e=await Xn.encoder(r,n),t=new FileReader;return await t.readAsDataURL(e),new Promise((function(r){t.onload=()=>{r({imageSrc:t.result,name:e.name})}}))}};document.getElementById("file").addEventListener("change",(r=>{const n=Xn.changeCallback(r);console.log(n)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,